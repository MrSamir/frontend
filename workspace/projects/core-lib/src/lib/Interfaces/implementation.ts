(function (define) {
  define(['jquery'], function ($) {
    return (function () {
      var app = appCore || {};

      /* LOCALIZATION ***********************************************/
      //Implements Localization API that simplifies usage of localization scripts generated by app.

      app.localization = app.localization || {};

      app.localization.languages = [];

      app.localization.currentLanguage = {};

      app.localization.sources = [];

      app.localization.values = {};

      app.localization.localize = function (key, sourceName) {
        sourceName = sourceName || app.localization.defaultSourceName;

        var source = app.localization.values[sourceName];

        if (!source) {
          app.log.warn('Could not find localization source: ' + sourceName);
          return key;
        }

        var value = source[key];
        if (value == undefined) {
          return key;
        }

        var copiedArguments = Array.prototype.slice.call(arguments, 0);
        copiedArguments.splice(1, 1);
        copiedArguments[0] = value;

        return app.utils.formatString.apply(this, copiedArguments);
      };

      app.localization.getSource = function (sourceName) {
        return function (key) {
          var copiedArguments = Array.prototype.slice.call(arguments, 0);
          copiedArguments.splice(1, 0, sourceName);
          return app.localization.localize.apply(this, copiedArguments);
        };
      };

      app.localization.isCurrentCulture = function (name) {
        return app.localization.currentCulture
          && app.localization.currentCulture.name
          && app.localization.currentCulture.name.indexOf(name) == 0;
      };

      app.localization.defaultSourceName = undefined;
      app.localization.abpWeb = app.localization.getSource('AbpWeb');



      /* SETTINGS **************************************************/
      //Implements Settings API that simplifies usage of setting scripts generated by app.

      app.setting = app.setting || {};

      app.setting.values = app.setting.values || {};

      app.setting.get = function (name) {
        return app.setting.values[name];
      };

      app.setting.getBoolean = function (name) {
        var value = app.setting.get(name);
        return value == 'true' || value == 'True';
      };

      app.setting.getInt = function (name) {
        return parseInt(app.setting.values[name]);
      };


      /* MESSAGE **************************************************/
      //Defines Message API, not implements it

      app.message = app.message || {};

    var showMessage = function (message, title, options) {
        alert((title || '') + ' ' + message);

        if (!$) {
          app.log.warn('app.message can not return promise since jQuery is not defined!');
          return null;
        }

        return $.Deferred(function ($dfd) {
          $dfd.resolve();
        });
      };

    app.message.info = function (message, title, options) {
        app.log.warn('app.message.info is not implemented!');
        return showMessage(message, title, options);
    };

    app.message.success = function (message, title, options) {
        app.log.warn('app.message.success is not implemented!');
        return showMessage(message, title, options);
    };

    app.message.warn = function (message, title, options) {
        app.log.warn('app.message.warn is not implemented!');
        return showMessage(message, title, options);
    };

    app.message.error = function (message, title, options) {
        app.log.warn('app.message.error is not implemented!');
        return showMessage(message, title, options);
    };

    app.message.confirm = function (message, title, callback, options) {
        app.log.warn('app.message.confirm is not implemented!');

        var result = confirm(message);
        callback && callback(result);

        if (!$) {
          app.log.warn('app.message can not return promise since jQuery is not defined!');
          return null;
        }

        return $.Deferred(function ($dfd) {
          $dfd.resolve();
        });
      };
  });
}(typeof define === 'function' && define.amd
  ? define
  : function (deps, factory) {
    if (typeof module !== 'undefined' && module.exports) {
      module.exports = factory(require('jquery'));
    } else {
      window.abp = factory(window.jQuery);
    }
  }));

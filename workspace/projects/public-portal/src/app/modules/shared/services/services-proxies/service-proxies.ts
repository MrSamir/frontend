//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import { DateTime, Duration } from "luxon";

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginModel | undefined): Observable<ApiResponseOfTokenResponse> {
        let url_ = this.baseUrl + "/api/Account/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfTokenResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfTokenResponse>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<ApiResponseOfTokenResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfTokenResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class AppCoreConfigurationsServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAppCoreConfigurations(): Observable<AppCore> {
        let url_ = this.baseUrl + "/api/AppCoreConfigurationsService/GetAppCoreConfigurations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppCoreConfigurations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppCoreConfigurations(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppCore>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppCore>;
        }));
    }

    protected processGetAppCoreConfigurations(response: HttpResponseBase): Observable<AppCore> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppCore.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ApplicationUserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentUser(): Observable<ApiResponseOfOutputApplicationUserDto> {
        let url_ = this.baseUrl + "/api/ApplicationUserService/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputApplicationUserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputApplicationUserDto>;
        }));
    }

    protected processGetCurrentUser(response: HttpResponseBase): Observable<ApiResponseOfOutputApplicationUserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputApplicationUserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getUserProfile(body: string | undefined): Observable<ApiResponseOfOutputApplicationUserDto> {
        let url_ = this.baseUrl + "/api/ApplicationUserService/GetUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserProfile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputApplicationUserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputApplicationUserDto>;
        }));
    }

    protected processGetUserProfile(response: HttpResponseBase): Observable<ApiResponseOfOutputApplicationUserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputApplicationUserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    generatePhoneNumberOtp(body: PhoneOtpGenerationInputDto | undefined): Observable<ApiResponseOfOtpGenerationOutputDto> {
        let url_ = this.baseUrl + "/api/ApplicationUserService/GeneratePhoneNumberOtp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGeneratePhoneNumberOtp(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGeneratePhoneNumberOtp(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOtpGenerationOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOtpGenerationOutputDto>;
        }));
    }

    protected processGeneratePhoneNumberOtp(response: HttpResponseBase): Observable<ApiResponseOfOtpGenerationOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOtpGenerationOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    verifyPhoneNumberOtp(body: PhoneOtpVerificationInputDto | undefined): Observable<ApiResponseOfOutputApplicationUserDto> {
        let url_ = this.baseUrl + "/api/ApplicationUserService/VerifyPhoneNumberOtp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVerifyPhoneNumberOtp(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVerifyPhoneNumberOtp(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputApplicationUserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputApplicationUserDto>;
        }));
    }

    protected processVerifyPhoneNumberOtp(response: HttpResponseBase): Observable<ApiResponseOfOutputApplicationUserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputApplicationUserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    sendEmailToVerifyUserEmailAddress(body: EmailOtpGenerationInputDto | undefined): Observable<ApiResponseOfOtpVerificationOutputDto> {
        let url_ = this.baseUrl + "/api/ApplicationUserService/SendEmailToVerifyUserEmailAddress";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendEmailToVerifyUserEmailAddress(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendEmailToVerifyUserEmailAddress(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOtpVerificationOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOtpVerificationOutputDto>;
        }));
    }

    protected processSendEmailToVerifyUserEmailAddress(response: HttpResponseBase): Observable<ApiResponseOfOtpVerificationOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOtpVerificationOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    confirmUserEmail(body: ConfirmUserEmailInputDto | undefined): Observable<ApiResponseOfOtpVerificationOutputDto> {
        let url_ = this.baseUrl + "/api/ApplicationUserService/ConfirmUserEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConfirmUserEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConfirmUserEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOtpVerificationOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOtpVerificationOutputDto>;
        }));
    }

    protected processConfirmUserEmail(response: HttpResponseBase): Observable<ApiResponseOfOtpVerificationOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOtpVerificationOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateCurrentUserRegionAndCity(body: UpdateUserCityRegionInputDto | undefined): Observable<ApiResponseOfOutputApplicationUserDto> {
        let url_ = this.baseUrl + "/api/ApplicationUserService/UpdateCurrentUserRegionAndCity";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCurrentUserRegionAndCity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCurrentUserRegionAndCity(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputApplicationUserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputApplicationUserDto>;
        }));
    }

    protected processUpdateCurrentUserRegionAndCity(response: HttpResponseBase): Observable<ApiResponseOfOutputApplicationUserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputApplicationUserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    ensureYaqeenPersonalInfo(body: InputApplicationUserDto | undefined): Observable<ApiResponseOfOutputApplicationUserDto> {
        let url_ = this.baseUrl + "/api/ApplicationUserService/EnsureYaqeenPersonalInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnsureYaqeenPersonalInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnsureYaqeenPersonalInfo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputApplicationUserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputApplicationUserDto>;
        }));
    }

    protected processEnsureYaqeenPersonalInfo(response: HttpResponseBase): Observable<ApiResponseOfOutputApplicationUserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputApplicationUserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class EndowmentRegistrationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createEndowment(body: InputEndowmentDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/CreateEndowment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateEndowment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateEndowment(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processCreateEndowment(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestId (optional) 
     * @return Success
     */
    getEndowmentDataByRequestId(requestId: string | undefined): Observable<ApiResponseOfOutputEndowmentDetailsDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GetEndowmentDataByRequestId?";
        if (requestId === null)
            throw new Error("The parameter 'requestId' cannot be null.");
        else if (requestId !== undefined)
            url_ += "requestId=" + encodeURIComponent("" + requestId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEndowmentDataByRequestId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEndowmentDataByRequestId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputEndowmentDetailsDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputEndowmentDetailsDto>;
        }));
    }

    protected processGetEndowmentDataByRequestId(response: HttpResponseBase): Observable<ApiResponseOfOutputEndowmentDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputEndowmentDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateEndowmentRegistrationRequest(body: InputEndowmentRegistrationRequestDto | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/UpdateEndowmentRegistrationRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateEndowmentRegistrationRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateEndowmentRegistrationRequest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUpdateEndowmentRegistrationRequest(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestId (optional) 
     * @return Success
     */
    generateEnowmentInitialCertificate(requestId: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GenerateEnowmentInitialCertificate?";
        if (requestId === null)
            throw new Error("The parameter 'requestId' cannot be null.");
        else if (requestId !== undefined)
            url_ += "requestId=" + encodeURIComponent("" + requestId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateEnowmentInitialCertificate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateEnowmentInitialCertificate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGenerateEnowmentInitialCertificate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param endowmentId (optional) 
     * @return Success
     */
    generateEnowmentFinalCertificate(endowmentId: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GenerateEnowmentFinalCertificate?";
        if (endowmentId === null)
            throw new Error("The parameter 'endowmentId' cannot be null.");
        else if (endowmentId !== undefined)
            url_ += "endowmentId=" + encodeURIComponent("" + endowmentId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateEnowmentFinalCertificate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateEnowmentFinalCertificate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGenerateEnowmentFinalCertificate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestId (optional) 
     * @return Success
     */
    generateFinalCertificateFromK2(requestId: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GenerateFinalCertificateFromK2?";
        if (requestId === null)
            throw new Error("The parameter 'requestId' cannot be null.");
        else if (requestId !== undefined)
            url_ += "requestId=" + encodeURIComponent("" + requestId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateFinalCertificateFromK2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateFinalCertificateFromK2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGenerateFinalCertificateFromK2(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestId (optional) 
     * @return Success
     */
    generateRestirctedCertificateFromK2(requestId: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GenerateRestirctedCertificateFromK2?";
        if (requestId === null)
            throw new Error("The parameter 'requestId' cannot be null.");
        else if (requestId !== undefined)
            url_ += "requestId=" + encodeURIComponent("" + requestId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateRestirctedCertificateFromK2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateRestirctedCertificateFromK2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGenerateRestirctedCertificateFromK2(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    editWaqfAssetRequest(body: InputAssetDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/EditWaqfAssetRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditWaqfAssetRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditWaqfAssetRequest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processEditWaqfAssetRequest(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createWaqfRequestAsset(body: InputAssetDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/CreateWaqfRequestAsset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateWaqfRequestAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateWaqfRequestAsset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processCreateWaqfRequestAsset(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteWaqfRequestAsset(body: InputRemoveAssetDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/DeleteWaqfRequestAsset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteWaqfRequestAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteWaqfRequestAsset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processDeleteWaqfRequestAsset(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestId (optional) 
     * @return Success
     */
    getAssetsByRequestId(requestId: string | undefined): Observable<OutputAssetDto[]> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GetAssetsByRequestId?";
        if (requestId === null)
            throw new Error("The parameter 'requestId' cannot be null.");
        else if (requestId !== undefined)
            url_ += "requestId=" + encodeURIComponent("" + requestId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetsByRequestId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetsByRequestId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OutputAssetDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OutputAssetDto[]>;
        }));
    }

    protected processGetAssetsByRequestId(response: HttpResponseBase): Observable<OutputAssetDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OutputAssetDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getOneAsset(body: InputOneAssetDto | undefined): Observable<ApiResponseOfOutputAssetDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GetOneAsset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOneAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOneAsset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputAssetDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputAssetDto>;
        }));
    }

    protected processGetOneAsset(response: HttpResponseBase): Observable<ApiResponseOfOutputAssetDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputAssetDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestId (optional) 
     * @return Success
     */
    getSeersInformationByReqId(requestId: string | undefined): Observable<ApiResponseOfPagedResultDtoOfOutputSeerDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GetSeersInformationByReqId?";
        if (requestId === null)
            throw new Error("The parameter 'requestId' cannot be null.");
        else if (requestId !== undefined)
            url_ += "requestId=" + encodeURIComponent("" + requestId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSeersInformationByReqId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSeersInformationByReqId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfPagedResultDtoOfOutputSeerDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfPagedResultDtoOfOutputSeerDto>;
        }));
    }

    protected processGetSeersInformationByReqId(response: HttpResponseBase): Observable<ApiResponseOfPagedResultDtoOfOutputSeerDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfPagedResultDtoOfOutputSeerDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addSeer(body: AddSeerInputDto | undefined): Observable<ApiResponseOfAddSeerOutputDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/AddSeer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddSeer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddSeer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfAddSeerOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfAddSeerOutputDto>;
        }));
    }

    protected processAddSeer(response: HttpResponseBase): Observable<ApiResponseOfAddSeerOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfAddSeerOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    removeSeer(body: RemoveSeerInputDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/RemoveSeer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveSeer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveSeer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processRemoveSeer(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    editSeer(body: EditSeerInputDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/EditSeer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditSeer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditSeer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processEditSeer(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addBeneficiary(body: AddBeneficiaryInputDto | undefined): Observable<ApiResponseOfAddBeneficiaryOutputDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/AddBeneficiary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddBeneficiary(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddBeneficiary(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfAddBeneficiaryOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfAddBeneficiaryOutputDto>;
        }));
    }

    protected processAddBeneficiary(response: HttpResponseBase): Observable<ApiResponseOfAddBeneficiaryOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfAddBeneficiaryOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestId (optional) 
     * @return Success
     */
    getBeneficiariesInformationByReqId(requestId: string | undefined): Observable<ApiResponseOfPagedResultDtoOfOutputBeneficiaryDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GetBeneficiariesInformationByReqId?";
        if (requestId === null)
            throw new Error("The parameter 'requestId' cannot be null.");
        else if (requestId !== undefined)
            url_ += "requestId=" + encodeURIComponent("" + requestId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBeneficiariesInformationByReqId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBeneficiariesInformationByReqId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfPagedResultDtoOfOutputBeneficiaryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfPagedResultDtoOfOutputBeneficiaryDto>;
        }));
    }

    protected processGetBeneficiariesInformationByReqId(response: HttpResponseBase): Observable<ApiResponseOfPagedResultDtoOfOutputBeneficiaryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfPagedResultDtoOfOutputBeneficiaryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    removeBeneficiary(body: RemoveBeneficiaryInputDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/RemoveBeneficiary";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveBeneficiary(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveBeneficiary(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processRemoveBeneficiary(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestId (optional) 
     * @return Success
     */
    getEndowersInformationByReqId(requestId: string | undefined): Observable<ApiResponseOfPagedResultDtoOfOutputEndowmerDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GetEndowersInformationByReqId?";
        if (requestId === null)
            throw new Error("The parameter 'requestId' cannot be null.");
        else if (requestId !== undefined)
            url_ += "requestId=" + encodeURIComponent("" + requestId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEndowersInformationByReqId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEndowersInformationByReqId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfPagedResultDtoOfOutputEndowmerDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfPagedResultDtoOfOutputEndowmerDto>;
        }));
    }

    protected processGetEndowersInformationByReqId(response: HttpResponseBase): Observable<ApiResponseOfPagedResultDtoOfOutputEndowmerDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfPagedResultDtoOfOutputEndowmerDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addEndowmer(body: InputEndowmerDto | undefined): Observable<ApiResponseOfOutputEndowmerDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/AddEndowmer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEndowmer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEndowmer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputEndowmerDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputEndowmerDto>;
        }));
    }

    protected processAddEndowmer(response: HttpResponseBase): Observable<ApiResponseOfOutputEndowmerDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputEndowmerDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    editEndowmer(body: InputEndowmerDto | undefined): Observable<ApiResponseOfOutputEndowmerDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/EditEndowmer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditEndowmer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditEndowmer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputEndowmerDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputEndowmerDto>;
        }));
    }

    protected processEditEndowmer(response: HttpResponseBase): Observable<ApiResponseOfOutputEndowmerDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputEndowmerDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteEndowmer(body: InputEndowmerDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/DeleteEndowmer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEndowmer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEndowmer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processDeleteEndowmer(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createOrEditEndowmentRegistrationRequest(body: InputEndwomentRegistraionRequestApplicantDto | undefined): Observable<ApiResponseOfOutputEndwomentRegistrationRequestDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/CreateOrEditEndowmentRegistrationRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEditEndowmentRegistrationRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEditEndowmentRegistrationRequest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputEndwomentRegistrationRequestDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputEndwomentRegistrationRequestDto>;
        }));
    }

    protected processCreateOrEditEndowmentRegistrationRequest(response: HttpResponseBase): Observable<ApiResponseOfOutputEndwomentRegistrationRequestDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputEndwomentRegistrationRequestDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestId (optional) 
     * @return Success
     */
    getEndowmentRegistrationApplicant(requestId: string | undefined): Observable<ApiResponseOfOutputEndwomentRegistrationRequestDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GetEndowmentRegistrationApplicant?";
        if (requestId === null)
            throw new Error("The parameter 'requestId' cannot be null.");
        else if (requestId !== undefined)
            url_ += "requestId=" + encodeURIComponent("" + requestId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEndowmentRegistrationApplicant(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEndowmentRegistrationApplicant(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputEndwomentRegistrationRequestDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputEndwomentRegistrationRequestDto>;
        }));
    }

    protected processGetEndowmentRegistrationApplicant(response: HttpResponseBase): Observable<ApiResponseOfOutputEndwomentRegistrationRequestDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputEndwomentRegistrationRequestDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class FileLibraryApplicationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    downloadFilePost(body: InputFileDto | undefined): Observable<ApiResponseOfOutputFileDto> {
        let url_ = this.baseUrl + "/api/FileLibraryApplicationService/DownloadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadFilePost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadFilePost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputFileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputFileDto>;
        }));
    }

    protected processDownloadFilePost(response: HttpResponseBase): Observable<ApiResponseOfOutputFileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputFileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param entityName (optional) 
     * @param id (optional) 
     * @return Success
     */
    downloadFileGet(entityName: string | undefined, id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/FileLibraryApplicationService/DownloadFile?";
        if (entityName === null)
            throw new Error("The parameter 'entityName' cannot be null.");
        else if (entityName !== undefined)
            url_ += "entityName=" + encodeURIComponent("" + entityName) + "&";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadFileGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadFileGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDownloadFileGet(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    downloadFileById(body: FileByIdDto | undefined): Observable<ApiResponseOfOutputFileDto> {
        let url_ = this.baseUrl + "/api/FileLibraryApplicationService/DownloadFileById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadFileById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadFileById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputFileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputFileDto>;
        }));
    }

    protected processDownloadFileById(response: HttpResponseBase): Observable<ApiResponseOfOutputFileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputFileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param entityName (optional) 
     * @param file (optional) 
     * @param fileExtraDatas (optional) 
     * @return Success
     */
    uploadFile(entityName: string | undefined, file: FileParameter | undefined, fileExtraDatas: FileExtraData[] | undefined): Observable<ApiResponseOfOutputFileDto> {
        let url_ = this.baseUrl + "/api/FileLibraryApplicationService/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (entityName === null || entityName === undefined)
            throw new Error("The parameter 'entityName' cannot be null.");
        else
            content_.append("entityName", entityName.toString());
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        if (fileExtraDatas === null || fileExtraDatas === undefined)
            throw new Error("The parameter 'fileExtraDatas' cannot be null.");
        else
            fileExtraDatas.forEach(item_ => content_.append("fileExtraDatas", item_.toString()));

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputFileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputFileDto>;
        }));
    }

    protected processUploadFile(response: HttpResponseBase): Observable<ApiResponseOfOutputFileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputFileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param entityName (optional) 
     * @param contentType (optional) 
     * @param fileName (optional) 
     * @param fileData (optional) 
     * @param fileExtraDatas (optional) 
     * @return Success
     */
    uploadFileBytes(entityName: string | undefined, contentType: string | undefined, fileName: string | undefined, fileData: string | undefined, fileExtraDatas: FileExtraData[] | undefined): Observable<ApiResponseOfOutputFileDto> {
        let url_ = this.baseUrl + "/api/FileLibraryApplicationService/UploadFileBytes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (entityName === null || entityName === undefined)
            throw new Error("The parameter 'entityName' cannot be null.");
        else
            content_.append("entityName", entityName.toString());
        if (contentType === null || contentType === undefined)
            throw new Error("The parameter 'contentType' cannot be null.");
        else
            content_.append("contentType", contentType.toString());
        if (fileName === null || fileName === undefined)
            throw new Error("The parameter 'fileName' cannot be null.");
        else
            content_.append("fileName", fileName.toString());
        if (fileData === null || fileData === undefined)
            throw new Error("The parameter 'fileData' cannot be null.");
        else
            content_.append("fileData", fileData.toString());
        if (fileExtraDatas === null || fileExtraDatas === undefined)
            throw new Error("The parameter 'fileExtraDatas' cannot be null.");
        else
            fileExtraDatas.forEach(item_ => content_.append("fileExtraDatas", item_.toString()));

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadFileBytes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadFileBytes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputFileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputFileDto>;
        }));
    }

    protected processUploadFileBytes(response: HttpResponseBase): Observable<ApiResponseOfOutputFileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputFileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteFile(body: InputFileDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/FileLibraryApplicationService/DeleteFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processDeleteFile(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class LookupApplicationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAllLookups(body: InputLookUpDto | undefined): Observable<ApiResponseOfPagedResultDtoOfLookupDto> {
        let url_ = this.baseUrl + "/api/LookupApplicationService/GetAllLookups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllLookups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllLookups(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfPagedResultDtoOfLookupDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfPagedResultDtoOfLookupDto>;
        }));
    }

    protected processGetAllLookups(response: HttpResponseBase): Observable<ApiResponseOfPagedResultDtoOfLookupDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfPagedResultDtoOfLookupDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getById(body: InputLookUpDto | undefined): Observable<ApiResponseOfLookupDto> {
        let url_ = this.baseUrl + "/api/LookupApplicationService/GetById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfLookupDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfLookupDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponseOfLookupDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfLookupDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class MOJApplicationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    attorneyInquiry(body: AttorneyInquiryInput | undefined): Observable<ApiResponseOfAttorneyInquiryOutput> {
        let url_ = this.baseUrl + "/api/MOJApplicationService/AttorneyInquiry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAttorneyInquiry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAttorneyInquiry(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfAttorneyInquiryOutput>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfAttorneyInquiryOutput>;
        }));
    }

    protected processAttorneyInquiry(response: HttpResponseBase): Observable<ApiResponseOfAttorneyInquiryOutput> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfAttorneyInquiryOutput.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class MojDataMigrationApplicationServicesProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    registerAllEndowment(): Observable<ApiResponseOfRequestDto> {
        let url_ = this.baseUrl + "/api/MojDataMigrationApplicationServices/RegisterAllEndowment";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterAllEndowment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterAllEndowment(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfRequestDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfRequestDto>;
        }));
    }

    protected processRegisterAllEndowment(response: HttpResponseBase): Observable<ApiResponseOfRequestDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfRequestDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param deedNumber (optional) 
     * @return Success
     */
    registerEndowmentByDeedNumber(deedNumber: number | undefined): Observable<ApiResponseOfRequestDto> {
        let url_ = this.baseUrl + "/api/MojDataMigrationApplicationServices/RegisterEndowmentByDeedNumber?";
        if (deedNumber === null)
            throw new Error("The parameter 'deedNumber' cannot be null.");
        else if (deedNumber !== undefined)
            url_ += "deedNumber=" + encodeURIComponent("" + deedNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterEndowmentByDeedNumber(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterEndowmentByDeedNumber(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfRequestDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfRequestDto>;
        }));
    }

    protected processRegisterEndowmentByDeedNumber(response: HttpResponseBase): Observable<ApiResponseOfRequestDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfRequestDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param deedNumber (optional) 
     * @param isFromWebPortal (optional) 
     * @return Success
     */
    registerEndowmentByDeedNumberFromWeb(deedNumber: number | undefined, isFromWebPortal: boolean | undefined): Observable<ApiResponseOfRequestDto> {
        let url_ = this.baseUrl + "/api/MojDataMigrationApplicationServices/RegisterEndowmentByDeedNumberFromWeb?";
        if (deedNumber === null)
            throw new Error("The parameter 'deedNumber' cannot be null.");
        else if (deedNumber !== undefined)
            url_ += "deedNumber=" + encodeURIComponent("" + deedNumber) + "&";
        if (isFromWebPortal === null)
            throw new Error("The parameter 'isFromWebPortal' cannot be null.");
        else if (isFromWebPortal !== undefined)
            url_ += "isFromWebPortal=" + encodeURIComponent("" + isFromWebPortal) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            
            return this.processRegisterEndowmentByDeedNumberFromWeb(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    
                    return this.processRegisterEndowmentByDeedNumberFromWeb(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfRequestDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfRequestDto>;
        }));
    }

    protected processRegisterEndowmentByDeedNumberFromWeb(response: HttpResponseBase): Observable<ApiResponseOfRequestDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfRequestDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class OtpHandlerApplicationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param id (optional) 
     * @param templateGroupId (optional) 
     * @param body (optional) 
     * @return Success
     */
    otpVerificationEmail(id: string | undefined, templateGroupId: number | undefined, body: string[] | undefined): Observable<ApiResponseOfSentNotificationMessagesDto> {
        let url_ = this.baseUrl + "/api/OtpHandlerApplicationService/OtpVerificationEmail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (templateGroupId === null)
            throw new Error("The parameter 'templateGroupId' cannot be null.");
        else if (templateGroupId !== undefined)
            url_ += "templateGroupId=" + encodeURIComponent("" + templateGroupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processOtpVerificationEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOtpVerificationEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
        }));
    }

    protected processOtpVerificationEmail(response: HttpResponseBase): Observable<ApiResponseOfSentNotificationMessagesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfSentNotificationMessagesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @param templateGroupId (optional) 
     * @param body (optional) 
     * @return Success
     */
    otpVerificationSMS(id: string | undefined, templateGroupId: number | undefined, body: string[] | undefined): Observable<ApiResponseOfSentNotificationMessagesDto> {
        let url_ = this.baseUrl + "/api/OtpHandlerApplicationService/OtpVerificationSMS?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (templateGroupId === null)
            throw new Error("The parameter 'templateGroupId' cannot be null.");
        else if (templateGroupId !== undefined)
            url_ += "templateGroupId=" + encodeURIComponent("" + templateGroupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processOtpVerificationSMS(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOtpVerificationSMS(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
        }));
    }

    protected processOtpVerificationSMS(response: HttpResponseBase): Observable<ApiResponseOfSentNotificationMessagesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfSentNotificationMessagesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class RequestApplicationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param sorting (optional) 
     * @param skipCount (optional) 
     * @param limitCount (optional) 
     * @return Success
     */
    getMyEndowments(sorting: string | undefined, skipCount: number | undefined, limitCount: number | undefined): Observable<ApiResponseOfPagedResultDtoOfEndowmentOutputDto> {
        let url_ = this.baseUrl + "/api/RequestApplicationService/GetMyEndowments?";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (limitCount === null)
            throw new Error("The parameter 'limitCount' cannot be null.");
        else if (limitCount !== undefined)
            url_ += "limitCount=" + encodeURIComponent("" + limitCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMyEndowments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMyEndowments(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfPagedResultDtoOfEndowmentOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfPagedResultDtoOfEndowmentOutputDto>;
        }));
    }

    protected processGetMyEndowments(response: HttpResponseBase): Observable<ApiResponseOfPagedResultDtoOfEndowmentOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfPagedResultDtoOfEndowmentOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param sorting (optional) 
     * @param skipCount (optional) 
     * @param limitCount (optional) 
     * @return Success
     */
    getMyRequests(sorting: string | undefined, skipCount: number | undefined, limitCount: number | undefined): Observable<ApiResponseOfPagedResultDtoOfRequestOutputDto> {
        let url_ = this.baseUrl + "/api/RequestApplicationService/GetMyRequests?";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (limitCount === null)
            throw new Error("The parameter 'limitCount' cannot be null.");
        else if (limitCount !== undefined)
            url_ += "limitCount=" + encodeURIComponent("" + limitCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMyRequests(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMyRequests(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfPagedResultDtoOfRequestOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfPagedResultDtoOfRequestOutputDto>;
        }));
    }

    protected processGetMyRequests(response: HttpResponseBase): Observable<ApiResponseOfPagedResultDtoOfRequestOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfPagedResultDtoOfRequestOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param sorting (optional) 
     * @param skipCount (optional) 
     * @param limitCount (optional) 
     * @return Success
     */
    getMyTasks(sorting: string | undefined, skipCount: number | undefined, limitCount: number | undefined): Observable<ApiResponseOfPagedResultDtoOfRequestOutputDto> {
        let url_ = this.baseUrl + "/api/RequestApplicationService/GetMyTasks?";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (limitCount === null)
            throw new Error("The parameter 'limitCount' cannot be null.");
        else if (limitCount !== undefined)
            url_ += "limitCount=" + encodeURIComponent("" + limitCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMyTasks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMyTasks(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfPagedResultDtoOfRequestOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfPagedResultDtoOfRequestOutputDto>;
        }));
    }

    protected processGetMyTasks(response: HttpResponseBase): Observable<ApiResponseOfPagedResultDtoOfRequestOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfPagedResultDtoOfRequestOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class SendNotificationApplicationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param requestNumber (optional) 
     * @param templateGroupId (optional) 
     * @param roleName (optional) 
     * @return Success
     */
    sendNotificationForRole(requestNumber: string | undefined, templateGroupId: number | undefined, roleName: string | undefined): Observable<ApiResponseOfSentNotificationMessagesDto> {
        let url_ = this.baseUrl + "/api/SendNotificationApplicationService/SendNotificationForRole?";
        if (requestNumber === null)
            throw new Error("The parameter 'requestNumber' cannot be null.");
        else if (requestNumber !== undefined)
            url_ += "requestNumber=" + encodeURIComponent("" + requestNumber) + "&";
        if (templateGroupId === null)
            throw new Error("The parameter 'templateGroupId' cannot be null.");
        else if (templateGroupId !== undefined)
            url_ += "templateGroupId=" + encodeURIComponent("" + templateGroupId) + "&";
        if (roleName === null)
            throw new Error("The parameter 'roleName' cannot be null.");
        else if (roleName !== undefined)
            url_ += "roleName=" + encodeURIComponent("" + roleName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendNotificationForRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendNotificationForRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
        }));
    }

    protected processSendNotificationForRole(response: HttpResponseBase): Observable<ApiResponseOfSentNotificationMessagesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfSentNotificationMessagesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestNumber (optional) 
     * @param templateGroupId (optional) 
     * @param body (optional) 
     * @return Success
     */
    sendNotificationUsers(requestNumber: string | undefined, templateGroupId: number | undefined, body: string[] | undefined): Observable<ApiResponseOfSentNotificationMessagesDto> {
        let url_ = this.baseUrl + "/api/SendNotificationApplicationService/SendNotificationUsers?";
        if (requestNumber === null)
            throw new Error("The parameter 'requestNumber' cannot be null.");
        else if (requestNumber !== undefined)
            url_ += "requestNumber=" + encodeURIComponent("" + requestNumber) + "&";
        if (templateGroupId === null)
            throw new Error("The parameter 'templateGroupId' cannot be null.");
        else if (templateGroupId !== undefined)
            url_ += "templateGroupId=" + encodeURIComponent("" + templateGroupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendNotificationUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendNotificationUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
        }));
    }

    protected processSendNotificationUsers(response: HttpResponseBase): Observable<ApiResponseOfSentNotificationMessagesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfSentNotificationMessagesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class WeatherForecastProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    weatherForecast(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherForecast(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherForecast(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherForecast[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherForecast[]>;
        }));
    }

    protected processWeatherForecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class YaqeenApplicationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAlienInfo(body: GetAlienInfoInputDto | undefined): Observable<ApiResponseOfAlienInfoResponse> {
        let url_ = this.baseUrl + "/api/YaqeenApplicationService/GetAlienInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAlienInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAlienInfo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfAlienInfoResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfAlienInfoResponse>;
        }));
    }

    protected processGetAlienInfo(response: HttpResponseBase): Observable<ApiResponseOfAlienInfoResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfAlienInfoResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getCitizenInfo(body: GetCitizenInfoInputDto | undefined): Observable<ApiResponseOfCitizenInfoResponse> {
        let url_ = this.baseUrl + "/api/YaqeenApplicationService/GetCitizenInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCitizenInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCitizenInfo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfCitizenInfoResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfCitizenInfoResponse>;
        }));
    }

    protected processGetCitizenInfo(response: HttpResponseBase): Observable<ApiResponseOfCitizenInfoResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfCitizenInfoResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AddBeneficiaryInputDto implements IAddBeneficiaryInputDto {
    requestId!: string;
    createBeneficiaryDto!: CreateBeneficiaryDto;
    applicationUserId!: string | undefined;
    beneficiaryPerson!: InputApplicationUserDto;

    constructor(data?: IAddBeneficiaryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.createBeneficiaryDto = _data["createBeneficiaryDto"] ? CreateBeneficiaryDto.fromJS(_data["createBeneficiaryDto"]) : <any>undefined;
            this.applicationUserId = _data["applicationUserId"];
            this.beneficiaryPerson = _data["beneficiaryPerson"] ? InputApplicationUserDto.fromJS(_data["beneficiaryPerson"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddBeneficiaryInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddBeneficiaryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["createBeneficiaryDto"] = this.createBeneficiaryDto ? this.createBeneficiaryDto.toJSON() : <any>undefined;
        data["applicationUserId"] = this.applicationUserId;
        data["beneficiaryPerson"] = this.beneficiaryPerson ? this.beneficiaryPerson.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddBeneficiaryInputDto {
    requestId: string;
    createBeneficiaryDto: CreateBeneficiaryDto;
    applicationUserId: string | undefined;
    beneficiaryPerson: InputApplicationUserDto;
}

export class AddBeneficiaryOutputDto implements IAddBeneficiaryOutputDto {
    personId!: string;
    beneficiaryId!: string;

    constructor(data?: IAddBeneficiaryOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personId = _data["personId"];
            this.beneficiaryId = _data["beneficiaryId"];
        }
    }

    static fromJS(data: any): AddBeneficiaryOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddBeneficiaryOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        data["beneficiaryId"] = this.beneficiaryId;
        return data;
    }
}

export interface IAddBeneficiaryOutputDto {
    personId: string;
    beneficiaryId: string;
}

export class AddSeerInputDto implements IAddSeerInputDto {
    requestId!: string;
    createSeerInputDto!: CreateSeerInputDto;
    applicationUserId!: string | undefined;
    seerPerson!: InputApplicationUserDto;

    constructor(data?: IAddSeerInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.createSeerInputDto = _data["createSeerInputDto"] ? CreateSeerInputDto.fromJS(_data["createSeerInputDto"]) : <any>undefined;
            this.applicationUserId = _data["applicationUserId"];
            this.seerPerson = _data["seerPerson"] ? InputApplicationUserDto.fromJS(_data["seerPerson"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddSeerInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddSeerInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["createSeerInputDto"] = this.createSeerInputDto ? this.createSeerInputDto.toJSON() : <any>undefined;
        data["applicationUserId"] = this.applicationUserId;
        data["seerPerson"] = this.seerPerson ? this.seerPerson.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddSeerInputDto {
    requestId: string;
    createSeerInputDto: CreateSeerInputDto;
    applicationUserId: string | undefined;
    seerPerson: InputApplicationUserDto;
}

export class AddSeerOutputDto implements IAddSeerOutputDto {
    seerId!: string;

    constructor(data?: IAddSeerOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.seerId = _data["seerId"];
        }
    }

    static fromJS(data: any): AddSeerOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddSeerOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["seerId"] = this.seerId;
        return data;
    }
}

export interface IAddSeerOutputDto {
    seerId: string;
}

export class AlienInfoResponse implements IAlienInfoResponse {
    dateOfBirthG!: DateTime | undefined;
    englishFirstName!: string | undefined;
    englishLastName!: string | undefined;
    englishSecondName!: string | undefined;
    englishThirdName!: string | undefined;
    firstName!: string | undefined;
    gender!: string | undefined;
    iqamaExpiryDateG!: DateTime | undefined;
    iqamaIssueDateG!: DateTime | undefined;
    iqamaIssuePlaceCode!: number | undefined;
    iqamaVersionNumber!: number | undefined;
    lastName!: string | undefined;
    logId!: number | undefined;
    placeOfBirthCode!: number | undefined;
    placeOfBirthAr!: string | undefined;
    placeOfBirthEn!: string | undefined;
    secondName!: string | undefined;
    thirdName!: string | undefined;
    nationalityCode!: string | undefined;
    nationalityNameAr!: string | undefined;
    nationalityNameEn!: string | undefined;
    lifeStatus!: number | undefined;
    awqafNatinaityId!: number;

    constructor(data?: IAlienInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateOfBirthG = _data["dateOfBirthG"] ? DateTime.fromISO(_data["dateOfBirthG"].toString()) : <any>undefined;
            this.englishFirstName = _data["englishFirstName"];
            this.englishLastName = _data["englishLastName"];
            this.englishSecondName = _data["englishSecondName"];
            this.englishThirdName = _data["englishThirdName"];
            this.firstName = _data["firstName"];
            this.gender = _data["gender"];
            this.iqamaExpiryDateG = _data["iqamaExpiryDateG"] ? DateTime.fromISO(_data["iqamaExpiryDateG"].toString()) : <any>undefined;
            this.iqamaIssueDateG = _data["iqamaIssueDateG"] ? DateTime.fromISO(_data["iqamaIssueDateG"].toString()) : <any>undefined;
            this.iqamaIssuePlaceCode = _data["iqamaIssuePlaceCode"];
            this.iqamaVersionNumber = _data["iqamaVersionNumber"];
            this.lastName = _data["lastName"];
            this.logId = _data["logId"];
            this.placeOfBirthCode = _data["placeOfBirthCode"];
            this.placeOfBirthAr = _data["placeOfBirthAr"];
            this.placeOfBirthEn = _data["placeOfBirthEn"];
            this.secondName = _data["secondName"];
            this.thirdName = _data["thirdName"];
            this.nationalityCode = _data["nationalityCode"];
            this.nationalityNameAr = _data["nationalityNameAr"];
            this.nationalityNameEn = _data["nationalityNameEn"];
            this.lifeStatus = _data["lifeStatus"];
            this.awqafNatinaityId = _data["awqafNatinaityId"];
        }
    }

    static fromJS(data: any): AlienInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AlienInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateOfBirthG"] = this.dateOfBirthG ? this.dateOfBirthG.toString() : <any>undefined;
        data["englishFirstName"] = this.englishFirstName;
        data["englishLastName"] = this.englishLastName;
        data["englishSecondName"] = this.englishSecondName;
        data["englishThirdName"] = this.englishThirdName;
        data["firstName"] = this.firstName;
        data["gender"] = this.gender;
        data["iqamaExpiryDateG"] = this.iqamaExpiryDateG ? this.iqamaExpiryDateG.toString() : <any>undefined;
        data["iqamaIssueDateG"] = this.iqamaIssueDateG ? this.iqamaIssueDateG.toString() : <any>undefined;
        data["iqamaIssuePlaceCode"] = this.iqamaIssuePlaceCode;
        data["iqamaVersionNumber"] = this.iqamaVersionNumber;
        data["lastName"] = this.lastName;
        data["logId"] = this.logId;
        data["placeOfBirthCode"] = this.placeOfBirthCode;
        data["placeOfBirthAr"] = this.placeOfBirthAr;
        data["placeOfBirthEn"] = this.placeOfBirthEn;
        data["secondName"] = this.secondName;
        data["thirdName"] = this.thirdName;
        data["nationalityCode"] = this.nationalityCode;
        data["nationalityNameAr"] = this.nationalityNameAr;
        data["nationalityNameEn"] = this.nationalityNameEn;
        data["lifeStatus"] = this.lifeStatus;
        data["awqafNatinaityId"] = this.awqafNatinaityId;
        return data;
    }
}

export interface IAlienInfoResponse {
    dateOfBirthG: DateTime | undefined;
    englishFirstName: string | undefined;
    englishLastName: string | undefined;
    englishSecondName: string | undefined;
    englishThirdName: string | undefined;
    firstName: string | undefined;
    gender: string | undefined;
    iqamaExpiryDateG: DateTime | undefined;
    iqamaIssueDateG: DateTime | undefined;
    iqamaIssuePlaceCode: number | undefined;
    iqamaVersionNumber: number | undefined;
    lastName: string | undefined;
    logId: number | undefined;
    placeOfBirthCode: number | undefined;
    placeOfBirthAr: string | undefined;
    placeOfBirthEn: string | undefined;
    secondName: string | undefined;
    thirdName: string | undefined;
    nationalityCode: string | undefined;
    nationalityNameAr: string | undefined;
    nationalityNameEn: string | undefined;
    lifeStatus: number | undefined;
    awqafNatinaityId: number;
}

export class AnimalOrAgriculturalAssetData implements IAnimalOrAgriculturalAssetData {
    regionId!: number | undefined;
    cityId!: number | undefined;
    city!: City;
    region!: Region;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IAnimalOrAgriculturalAssetData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.city = _data["city"] ? City.fromJS(_data["city"]) : <any>undefined;
            this.region = _data["region"] ? Region.fromJS(_data["region"]) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): AnimalOrAgriculturalAssetData {
        data = typeof data === 'object' ? data : {};
        let result = new AnimalOrAgriculturalAssetData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        data["region"] = this.region ? this.region.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IAnimalOrAgriculturalAssetData {
    regionId: number | undefined;
    cityId: number | undefined;
    city: City;
    region: Region;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class ApiResponse implements IApiResponse {
    isSuccess!: boolean;
    dto!: any | undefined;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"];
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponse {
    isSuccess: boolean;
    dto: any | undefined;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfAddBeneficiaryOutputDto implements IApiResponseOfAddBeneficiaryOutputDto {
    isSuccess!: boolean;
    dto!: AddBeneficiaryOutputDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfAddBeneficiaryOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? AddBeneficiaryOutputDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfAddBeneficiaryOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfAddBeneficiaryOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfAddBeneficiaryOutputDto {
    isSuccess: boolean;
    dto: AddBeneficiaryOutputDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfAddSeerOutputDto implements IApiResponseOfAddSeerOutputDto {
    isSuccess!: boolean;
    dto!: AddSeerOutputDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfAddSeerOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? AddSeerOutputDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfAddSeerOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfAddSeerOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfAddSeerOutputDto {
    isSuccess: boolean;
    dto: AddSeerOutputDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfAlienInfoResponse implements IApiResponseOfAlienInfoResponse {
    isSuccess!: boolean;
    dto!: AlienInfoResponse;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfAlienInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? AlienInfoResponse.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfAlienInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfAlienInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfAlienInfoResponse {
    isSuccess: boolean;
    dto: AlienInfoResponse;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfAttorneyInquiryOutput implements IApiResponseOfAttorneyInquiryOutput {
    isSuccess!: boolean;
    dto!: AttorneyInquiryOutput;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfAttorneyInquiryOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? AttorneyInquiryOutput.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfAttorneyInquiryOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfAttorneyInquiryOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfAttorneyInquiryOutput {
    isSuccess: boolean;
    dto: AttorneyInquiryOutput;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfCitizenInfoResponse implements IApiResponseOfCitizenInfoResponse {
    isSuccess!: boolean;
    dto!: CitizenInfoResponse;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfCitizenInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? CitizenInfoResponse.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfCitizenInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfCitizenInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfCitizenInfoResponse {
    isSuccess: boolean;
    dto: CitizenInfoResponse;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfLookupDto implements IApiResponseOfLookupDto {
    isSuccess!: boolean;
    dto!: LookupDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? LookupDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfLookupDto {
    isSuccess: boolean;
    dto: LookupDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfOtpGenerationOutputDto implements IApiResponseOfOtpGenerationOutputDto {
    isSuccess!: boolean;
    dto!: OtpGenerationOutputDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfOtpGenerationOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? OtpGenerationOutputDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfOtpGenerationOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfOtpGenerationOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfOtpGenerationOutputDto {
    isSuccess: boolean;
    dto: OtpGenerationOutputDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfOtpVerificationOutputDto implements IApiResponseOfOtpVerificationOutputDto {
    isSuccess!: boolean;
    dto!: OtpVerificationOutputDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfOtpVerificationOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? OtpVerificationOutputDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfOtpVerificationOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfOtpVerificationOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfOtpVerificationOutputDto {
    isSuccess: boolean;
    dto: OtpVerificationOutputDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfOutputApplicationUserDto implements IApiResponseOfOutputApplicationUserDto {
    isSuccess!: boolean;
    dto!: OutputApplicationUserDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfOutputApplicationUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? OutputApplicationUserDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfOutputApplicationUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfOutputApplicationUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfOutputApplicationUserDto {
    isSuccess: boolean;
    dto: OutputApplicationUserDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfOutputAssetDto implements IApiResponseOfOutputAssetDto {
    isSuccess!: boolean;
    dto!: OutputAssetDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfOutputAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? OutputAssetDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfOutputAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfOutputAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfOutputAssetDto {
    isSuccess: boolean;
    dto: OutputAssetDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfOutputEndowmentDetailsDto implements IApiResponseOfOutputEndowmentDetailsDto {
    isSuccess!: boolean;
    dto!: OutputEndowmentDetailsDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfOutputEndowmentDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? OutputEndowmentDetailsDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfOutputEndowmentDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfOutputEndowmentDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfOutputEndowmentDetailsDto {
    isSuccess: boolean;
    dto: OutputEndowmentDetailsDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfOutputEndowmerDto implements IApiResponseOfOutputEndowmerDto {
    isSuccess!: boolean;
    dto!: OutputEndowmerDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfOutputEndowmerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? OutputEndowmerDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfOutputEndowmerDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfOutputEndowmerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfOutputEndowmerDto {
    isSuccess: boolean;
    dto: OutputEndowmerDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfOutputEndwomentRegistrationRequestDto implements IApiResponseOfOutputEndwomentRegistrationRequestDto {
    isSuccess!: boolean;
    dto!: OutputEndwomentRegistrationRequestDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfOutputEndwomentRegistrationRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? OutputEndwomentRegistrationRequestDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfOutputEndwomentRegistrationRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfOutputEndwomentRegistrationRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfOutputEndwomentRegistrationRequestDto {
    isSuccess: boolean;
    dto: OutputEndwomentRegistrationRequestDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfOutputFileDto implements IApiResponseOfOutputFileDto {
    isSuccess!: boolean;
    dto!: OutputFileDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfOutputFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? OutputFileDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfOutputFileDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfOutputFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfOutputFileDto {
    isSuccess: boolean;
    dto: OutputFileDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfPagedResultDtoOfEndowmentOutputDto implements IApiResponseOfPagedResultDtoOfEndowmentOutputDto {
    isSuccess!: boolean;
    dto!: PagedResultDtoOfEndowmentOutputDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfPagedResultDtoOfEndowmentOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? PagedResultDtoOfEndowmentOutputDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfPagedResultDtoOfEndowmentOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfPagedResultDtoOfEndowmentOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfPagedResultDtoOfEndowmentOutputDto {
    isSuccess: boolean;
    dto: PagedResultDtoOfEndowmentOutputDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfPagedResultDtoOfLookupDto implements IApiResponseOfPagedResultDtoOfLookupDto {
    isSuccess!: boolean;
    dto!: PagedResultDtoOfLookupDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfPagedResultDtoOfLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? PagedResultDtoOfLookupDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfPagedResultDtoOfLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfPagedResultDtoOfLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfPagedResultDtoOfLookupDto {
    isSuccess: boolean;
    dto: PagedResultDtoOfLookupDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfPagedResultDtoOfOutputBeneficiaryDto implements IApiResponseOfPagedResultDtoOfOutputBeneficiaryDto {
    isSuccess!: boolean;
    dto!: PagedResultDtoOfOutputBeneficiaryDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfPagedResultDtoOfOutputBeneficiaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? PagedResultDtoOfOutputBeneficiaryDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfPagedResultDtoOfOutputBeneficiaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfPagedResultDtoOfOutputBeneficiaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfPagedResultDtoOfOutputBeneficiaryDto {
    isSuccess: boolean;
    dto: PagedResultDtoOfOutputBeneficiaryDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfPagedResultDtoOfOutputEndowmerDto implements IApiResponseOfPagedResultDtoOfOutputEndowmerDto {
    isSuccess!: boolean;
    dto!: PagedResultDtoOfOutputEndowmerDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfPagedResultDtoOfOutputEndowmerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? PagedResultDtoOfOutputEndowmerDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfPagedResultDtoOfOutputEndowmerDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfPagedResultDtoOfOutputEndowmerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfPagedResultDtoOfOutputEndowmerDto {
    isSuccess: boolean;
    dto: PagedResultDtoOfOutputEndowmerDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfPagedResultDtoOfOutputSeerDto implements IApiResponseOfPagedResultDtoOfOutputSeerDto {
    isSuccess!: boolean;
    dto!: PagedResultDtoOfOutputSeerDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfPagedResultDtoOfOutputSeerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? PagedResultDtoOfOutputSeerDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfPagedResultDtoOfOutputSeerDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfPagedResultDtoOfOutputSeerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfPagedResultDtoOfOutputSeerDto {
    isSuccess: boolean;
    dto: PagedResultDtoOfOutputSeerDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfPagedResultDtoOfRequestOutputDto implements IApiResponseOfPagedResultDtoOfRequestOutputDto {
    isSuccess!: boolean;
    dto!: PagedResultDtoOfRequestOutputDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfPagedResultDtoOfRequestOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? PagedResultDtoOfRequestOutputDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfPagedResultDtoOfRequestOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfPagedResultDtoOfRequestOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfPagedResultDtoOfRequestOutputDto {
    isSuccess: boolean;
    dto: PagedResultDtoOfRequestOutputDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfRequestDto implements IApiResponseOfRequestDto {
    isSuccess!: boolean;
    dto!: RequestDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? RequestDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfRequestDto {
    isSuccess: boolean;
    dto: RequestDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfSentNotificationMessagesDto implements IApiResponseOfSentNotificationMessagesDto {
    isSuccess!: boolean;
    dto!: SentNotificationMessagesDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfSentNotificationMessagesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? SentNotificationMessagesDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfSentNotificationMessagesDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfSentNotificationMessagesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfSentNotificationMessagesDto {
    isSuccess: boolean;
    dto: SentNotificationMessagesDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfTokenResponse implements IApiResponseOfTokenResponse {
    isSuccess!: boolean;
    dto!: TokenResponse;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfTokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? TokenResponse.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfTokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfTokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfTokenResponse {
    isSuccess: boolean;
    dto: TokenResponse;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class AppCore implements IAppCore {
    localization!: LocalizationDto;
    settings!: Setting;

    constructor(data?: IAppCore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localization = _data["localization"] ? LocalizationDto.fromJS(_data["localization"]) : <any>undefined;
            this.settings = _data["settings"] ? Setting.fromJS(_data["settings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AppCore {
        data = typeof data === 'object' ? data : {};
        let result = new AppCore();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localization"] = this.localization ? this.localization.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAppCore {
    localization: LocalizationDto;
    settings: Setting;
}

export class AppCulture implements IAppCulture {
    name!: string | undefined;
    displayName!: string | undefined;

    constructor(data?: IAppCulture) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): AppCulture {
        data = typeof data === 'object' ? data : {};
        let result = new AppCulture();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        return data;
    }
}

export interface IAppCulture {
    name: string | undefined;
    displayName: string | undefined;
}

export class ApplicantType implements IApplicantType {
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: IApplicantType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ApplicantType {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicantType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IApplicantType {
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class ApplicationUser implements IApplicationUser {
    fullName!: string | undefined;
    userType!: UserType;
    birthDate!: DateTime | undefined;
    birthDateHijri!: string | undefined;
    gender!: UserGender;
    idTypeId!: number | undefined;
    regionId!: number | undefined;
    cityId!: number | undefined;
    firstNameEn!: string | undefined;
    thirdNameEn!: string | undefined;
    secondNameEn!: string | undefined;
    lastNameEn!: string | undefined;
    firstNameAr!: string | undefined;
    secondNameAr!: string | undefined;
    thirdNameAr!: string | undefined;
    lastNameAr!: string | undefined;
    idExpiryDate!: string | undefined;
    idIssueDate!: string | undefined;
    idIssuePlace!: string | undefined;
    placeOfBirth!: string | undefined;
    iqamaExpiryDateGregorian!: DateTime | undefined;
    iqamaIssueDateGregorian!: DateTime | undefined;
    iqamaIssuePlaceCode!: string | undefined;
    placeOfBirthCode!: string | undefined;
    nationalityId!: number | undefined;
    noIdentityReason!: number | undefined;
    validatedByYaqeen!: boolean | undefined;
    isAlive!: boolean | undefined;
    city!: City;
    idType!: IdType;
    nationality!: Nationality;
    region!: Region;
    requests!: Request[] | undefined;
    id!: string | undefined;
    userName!: string | undefined;
    normalizedUserName!: string | undefined;
    email!: string | undefined;
    normalizedEmail!: string | undefined;
    emailConfirmed!: boolean;
    passwordHash!: string | undefined;
    securityStamp!: string | undefined;
    concurrencyStamp!: string | undefined;
    phoneNumber!: string | undefined;
    phoneNumberConfirmed!: boolean;
    twoFactorEnabled!: boolean;
    lockoutEnd!: DateTime | undefined;
    lockoutEnabled!: boolean;
    accessFailedCount!: number;

    constructor(data?: IApplicationUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.userType = _data["userType"];
            this.birthDate = _data["birthDate"] ? DateTime.fromISO(_data["birthDate"].toString()) : <any>undefined;
            this.birthDateHijri = _data["birthDateHijri"];
            this.gender = _data["gender"];
            this.idTypeId = _data["idTypeId"];
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.firstNameEn = _data["firstNameEn"];
            this.thirdNameEn = _data["thirdNameEn"];
            this.secondNameEn = _data["secondNameEn"];
            this.lastNameEn = _data["lastNameEn"];
            this.firstNameAr = _data["firstNameAr"];
            this.secondNameAr = _data["secondNameAr"];
            this.thirdNameAr = _data["thirdNameAr"];
            this.lastNameAr = _data["lastNameAr"];
            this.idExpiryDate = _data["idExpiryDate"];
            this.idIssueDate = _data["idIssueDate"];
            this.idIssuePlace = _data["idIssuePlace"];
            this.placeOfBirth = _data["placeOfBirth"];
            this.iqamaExpiryDateGregorian = _data["iqamaExpiryDateGregorian"] ? DateTime.fromISO(_data["iqamaExpiryDateGregorian"].toString()) : <any>undefined;
            this.iqamaIssueDateGregorian = _data["iqamaIssueDateGregorian"] ? DateTime.fromISO(_data["iqamaIssueDateGregorian"].toString()) : <any>undefined;
            this.iqamaIssuePlaceCode = _data["iqamaIssuePlaceCode"];
            this.placeOfBirthCode = _data["placeOfBirthCode"];
            this.nationalityId = _data["nationalityId"];
            this.noIdentityReason = _data["noIdentityReason"];
            this.validatedByYaqeen = _data["validatedByYaqeen"];
            this.isAlive = _data["isAlive"];
            this.city = _data["city"] ? City.fromJS(_data["city"]) : <any>undefined;
            this.idType = _data["idType"] ? IdType.fromJS(_data["idType"]) : <any>undefined;
            this.nationality = _data["nationality"] ? Nationality.fromJS(_data["nationality"]) : <any>undefined;
            this.region = _data["region"] ? Region.fromJS(_data["region"]) : <any>undefined;
            if (Array.isArray(_data["requests"])) {
                this.requests = [] as any;
                for (let item of _data["requests"])
                    this.requests!.push(Request.fromJS(item));
            }
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? DateTime.fromISO(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): ApplicationUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["userType"] = this.userType;
        data["birthDate"] = this.birthDate ? this.birthDate.toString() : <any>undefined;
        data["birthDateHijri"] = this.birthDateHijri;
        data["gender"] = this.gender;
        data["idTypeId"] = this.idTypeId;
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["firstNameEn"] = this.firstNameEn;
        data["thirdNameEn"] = this.thirdNameEn;
        data["secondNameEn"] = this.secondNameEn;
        data["lastNameEn"] = this.lastNameEn;
        data["firstNameAr"] = this.firstNameAr;
        data["secondNameAr"] = this.secondNameAr;
        data["thirdNameAr"] = this.thirdNameAr;
        data["lastNameAr"] = this.lastNameAr;
        data["idExpiryDate"] = this.idExpiryDate;
        data["idIssueDate"] = this.idIssueDate;
        data["idIssuePlace"] = this.idIssuePlace;
        data["placeOfBirth"] = this.placeOfBirth;
        data["iqamaExpiryDateGregorian"] = this.iqamaExpiryDateGregorian ? this.iqamaExpiryDateGregorian.toString() : <any>undefined;
        data["iqamaIssueDateGregorian"] = this.iqamaIssueDateGregorian ? this.iqamaIssueDateGregorian.toString() : <any>undefined;
        data["iqamaIssuePlaceCode"] = this.iqamaIssuePlaceCode;
        data["placeOfBirthCode"] = this.placeOfBirthCode;
        data["nationalityId"] = this.nationalityId;
        data["noIdentityReason"] = this.noIdentityReason;
        data["validatedByYaqeen"] = this.validatedByYaqeen;
        data["isAlive"] = this.isAlive;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        data["idType"] = this.idType ? this.idType.toJSON() : <any>undefined;
        data["nationality"] = this.nationality ? this.nationality.toJSON() : <any>undefined;
        data["region"] = this.region ? this.region.toJSON() : <any>undefined;
        if (Array.isArray(this.requests)) {
            data["requests"] = [];
            for (let item of this.requests)
                data["requests"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data;
    }
}

export interface IApplicationUser {
    fullName: string | undefined;
    userType: UserType;
    birthDate: DateTime | undefined;
    birthDateHijri: string | undefined;
    gender: UserGender;
    idTypeId: number | undefined;
    regionId: number | undefined;
    cityId: number | undefined;
    firstNameEn: string | undefined;
    thirdNameEn: string | undefined;
    secondNameEn: string | undefined;
    lastNameEn: string | undefined;
    firstNameAr: string | undefined;
    secondNameAr: string | undefined;
    thirdNameAr: string | undefined;
    lastNameAr: string | undefined;
    idExpiryDate: string | undefined;
    idIssueDate: string | undefined;
    idIssuePlace: string | undefined;
    placeOfBirth: string | undefined;
    iqamaExpiryDateGregorian: DateTime | undefined;
    iqamaIssueDateGregorian: DateTime | undefined;
    iqamaIssuePlaceCode: string | undefined;
    placeOfBirthCode: string | undefined;
    nationalityId: number | undefined;
    noIdentityReason: number | undefined;
    validatedByYaqeen: boolean | undefined;
    isAlive: boolean | undefined;
    city: City;
    idType: IdType;
    nationality: Nationality;
    region: Region;
    requests: Request[] | undefined;
    id: string | undefined;
    userName: string | undefined;
    normalizedUserName: string | undefined;
    email: string | undefined;
    normalizedEmail: string | undefined;
    emailConfirmed: boolean;
    passwordHash: string | undefined;
    securityStamp: string | undefined;
    concurrencyStamp: string | undefined;
    phoneNumber: string | undefined;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd: DateTime | undefined;
    lockoutEnabled: boolean;
    accessFailedCount: number;
}

export class AttorneyInquiryInput implements IAttorneyInquiryInput {
    code!: string | undefined;
    identityNumber!: string | undefined;

    constructor(data?: IAttorneyInquiryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.identityNumber = _data["identityNumber"];
        }
    }

    static fromJS(data: any): AttorneyInquiryInput {
        data = typeof data === 'object' ? data : {};
        let result = new AttorneyInquiryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["identityNumber"] = this.identityNumber;
        return data;
    }
}

export interface IAttorneyInquiryInput {
    code: string | undefined;
    identityNumber: string | undefined;
}

export class AttorneyInquiryOutput implements IAttorneyInquiryOutput {
    statusId!: string | undefined;
    statusName!: string | undefined;
    issueDateHijri!: string | undefined;
    issueDateGreg!: DateTime | undefined;
    endDateHijri!: string | undefined;
    endDateGreg!: DateTime | undefined;

    constructor(data?: IAttorneyInquiryOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusId = _data["statusId"];
            this.statusName = _data["statusName"];
            this.issueDateHijri = _data["issueDateHijri"];
            this.issueDateGreg = _data["issueDateGreg"] ? DateTime.fromISO(_data["issueDateGreg"].toString()) : <any>undefined;
            this.endDateHijri = _data["endDateHijri"];
            this.endDateGreg = _data["endDateGreg"] ? DateTime.fromISO(_data["endDateGreg"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AttorneyInquiryOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AttorneyInquiryOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusId"] = this.statusId;
        data["statusName"] = this.statusName;
        data["issueDateHijri"] = this.issueDateHijri;
        data["issueDateGreg"] = this.issueDateGreg ? this.issueDateGreg.toString() : <any>undefined;
        data["endDateHijri"] = this.endDateHijri;
        data["endDateGreg"] = this.endDateGreg ? this.endDateGreg.toString() : <any>undefined;
        return data;
    }
}

export interface IAttorneyInquiryOutput {
    statusId: string | undefined;
    statusName: string | undefined;
    issueDateHijri: string | undefined;
    issueDateGreg: DateTime | undefined;
    endDateHijri: string | undefined;
    endDateGreg: DateTime | undefined;
}

export class BusinessEntityAssetData implements IBusinessEntityAssetData {
    businessEntityName!: string | undefined;
    regionId!: number | undefined;
    cityId!: number | undefined;
    longitude!: number | undefined;
    latitude!: number | undefined;
    registrationDocumentNumber!: string | undefined;
    registrationDocumentType!: string | undefined;
    waqfResponserPortion!: number | undefined;
    waqfPercentageFromAsset!: number | undefined;
    commercialRegisterAttachmentId!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IBusinessEntityAssetData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.businessEntityName = _data["businessEntityName"];
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.registrationDocumentNumber = _data["registrationDocumentNumber"];
            this.registrationDocumentType = _data["registrationDocumentType"];
            this.waqfResponserPortion = _data["waqfResponserPortion"];
            this.waqfPercentageFromAsset = _data["waqfPercentageFromAsset"];
            this.commercialRegisterAttachmentId = _data["commercialRegisterAttachmentId"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BusinessEntityAssetData {
        data = typeof data === 'object' ? data : {};
        let result = new BusinessEntityAssetData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessEntityName"] = this.businessEntityName;
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["registrationDocumentNumber"] = this.registrationDocumentNumber;
        data["registrationDocumentType"] = this.registrationDocumentType;
        data["waqfResponserPortion"] = this.waqfResponserPortion;
        data["waqfPercentageFromAsset"] = this.waqfPercentageFromAsset;
        data["commercialRegisterAttachmentId"] = this.commercialRegisterAttachmentId;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IBusinessEntityAssetData {
    businessEntityName: string | undefined;
    regionId: number | undefined;
    cityId: number | undefined;
    longitude: number | undefined;
    latitude: number | undefined;
    registrationDocumentNumber: string | undefined;
    registrationDocumentType: string | undefined;
    waqfResponserPortion: number | undefined;
    waqfPercentageFromAsset: number | undefined;
    commercialRegisterAttachmentId: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class Certificate implements ICertificate {
    certificateNumber!: string | undefined;
    certificateStatusId!: number;
    certificateTypeId!: number;
    currentVersion!: number;
    issueDate!: DateTime;
    expiryDate!: DateTime;
    certificateType!: CertificateType;
    certificateStatus!: CertificateStatus;
    endowmentCertificate!: EndowmentCertificate;
    endowmentCertificateVersions!: EndowmentCertificateVersion[] | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: ICertificate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.certificateNumber = _data["certificateNumber"];
            this.certificateStatusId = _data["certificateStatusId"];
            this.certificateTypeId = _data["certificateTypeId"];
            this.currentVersion = _data["currentVersion"];
            this.issueDate = _data["issueDate"] ? DateTime.fromISO(_data["issueDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? DateTime.fromISO(_data["expiryDate"].toString()) : <any>undefined;
            this.certificateType = _data["certificateType"] ? CertificateType.fromJS(_data["certificateType"]) : <any>undefined;
            this.certificateStatus = _data["certificateStatus"] ? CertificateStatus.fromJS(_data["certificateStatus"]) : <any>undefined;
            this.endowmentCertificate = _data["endowmentCertificate"] ? EndowmentCertificate.fromJS(_data["endowmentCertificate"]) : <any>undefined;
            if (Array.isArray(_data["endowmentCertificateVersions"])) {
                this.endowmentCertificateVersions = [] as any;
                for (let item of _data["endowmentCertificateVersions"])
                    this.endowmentCertificateVersions!.push(EndowmentCertificateVersion.fromJS(item));
            }
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Certificate {
        data = typeof data === 'object' ? data : {};
        let result = new Certificate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["certificateNumber"] = this.certificateNumber;
        data["certificateStatusId"] = this.certificateStatusId;
        data["certificateTypeId"] = this.certificateTypeId;
        data["currentVersion"] = this.currentVersion;
        data["issueDate"] = this.issueDate ? this.issueDate.toString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toString() : <any>undefined;
        data["certificateType"] = this.certificateType ? this.certificateType.toJSON() : <any>undefined;
        data["certificateStatus"] = this.certificateStatus ? this.certificateStatus.toJSON() : <any>undefined;
        data["endowmentCertificate"] = this.endowmentCertificate ? this.endowmentCertificate.toJSON() : <any>undefined;
        if (Array.isArray(this.endowmentCertificateVersions)) {
            data["endowmentCertificateVersions"] = [];
            for (let item of this.endowmentCertificateVersions)
                data["endowmentCertificateVersions"].push(item.toJSON());
        }
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICertificate {
    certificateNumber: string | undefined;
    certificateStatusId: number;
    certificateTypeId: number;
    currentVersion: number;
    issueDate: DateTime;
    expiryDate: DateTime;
    certificateType: CertificateType;
    certificateStatus: CertificateStatus;
    endowmentCertificate: EndowmentCertificate;
    endowmentCertificateVersions: EndowmentCertificateVersion[] | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class CertificateStatus implements ICertificateStatus {
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: ICertificateStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CertificateStatus {
        data = typeof data === 'object' ? data : {};
        let result = new CertificateStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICertificateStatus {
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class CertificateType implements ICertificateType {
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: ICertificateType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CertificateType {
        data = typeof data === 'object' ? data : {};
        let result = new CertificateType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICertificateType {
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class CitizenInfoResponse implements ICitizenInfoResponse {
    dateOfBirthH!: string | undefined;
    englishFirstName!: string | undefined;
    englishLastName!: string | undefined;
    englishSecondName!: string | undefined;
    englishThirdName!: string | undefined;
    familyName!: string | undefined;
    fatherName!: string | undefined;
    firstName!: string | undefined;
    gender!: string | undefined;
    grandFatherName!: string | undefined;
    idExpiryDate!: string | undefined;
    idIssueDate!: string | undefined;
    idIssuePlace!: string | undefined;
    idVersionNumber!: number | undefined;
    logId!: number | undefined;
    placeOfBirth!: string | undefined;
    nationalityCode!: number;
    nationalityId!: number;
    lifeStatus!: number;

    constructor(data?: ICitizenInfoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateOfBirthH = _data["dateOfBirthH"];
            this.englishFirstName = _data["englishFirstName"];
            this.englishLastName = _data["englishLastName"];
            this.englishSecondName = _data["englishSecondName"];
            this.englishThirdName = _data["englishThirdName"];
            this.familyName = _data["familyName"];
            this.fatherName = _data["fatherName"];
            this.firstName = _data["firstName"];
            this.gender = _data["gender"];
            this.grandFatherName = _data["grandFatherName"];
            this.idExpiryDate = _data["idExpiryDate"];
            this.idIssueDate = _data["idIssueDate"];
            this.idIssuePlace = _data["idIssuePlace"];
            this.idVersionNumber = _data["idVersionNumber"];
            this.logId = _data["logId"];
            this.placeOfBirth = _data["placeOfBirth"];
            this.nationalityCode = _data["nationalityCode"];
            this.nationalityId = _data["nationalityId"];
            this.lifeStatus = _data["lifeStatus"];
        }
    }

    static fromJS(data: any): CitizenInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CitizenInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateOfBirthH"] = this.dateOfBirthH;
        data["englishFirstName"] = this.englishFirstName;
        data["englishLastName"] = this.englishLastName;
        data["englishSecondName"] = this.englishSecondName;
        data["englishThirdName"] = this.englishThirdName;
        data["familyName"] = this.familyName;
        data["fatherName"] = this.fatherName;
        data["firstName"] = this.firstName;
        data["gender"] = this.gender;
        data["grandFatherName"] = this.grandFatherName;
        data["idExpiryDate"] = this.idExpiryDate;
        data["idIssueDate"] = this.idIssueDate;
        data["idIssuePlace"] = this.idIssuePlace;
        data["idVersionNumber"] = this.idVersionNumber;
        data["logId"] = this.logId;
        data["placeOfBirth"] = this.placeOfBirth;
        data["nationalityCode"] = this.nationalityCode;
        data["nationalityId"] = this.nationalityId;
        data["lifeStatus"] = this.lifeStatus;
        return data;
    }
}

export interface ICitizenInfoResponse {
    dateOfBirthH: string | undefined;
    englishFirstName: string | undefined;
    englishLastName: string | undefined;
    englishSecondName: string | undefined;
    englishThirdName: string | undefined;
    familyName: string | undefined;
    fatherName: string | undefined;
    firstName: string | undefined;
    gender: string | undefined;
    grandFatherName: string | undefined;
    idExpiryDate: string | undefined;
    idIssueDate: string | undefined;
    idIssuePlace: string | undefined;
    idVersionNumber: number | undefined;
    logId: number | undefined;
    placeOfBirth: string | undefined;
    nationalityCode: number;
    nationalityId: number;
    lifeStatus: number;
}

export class City implements ICity {
    hrsdCode!: number;
    regionId!: number;
    region!: Region;
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: ICity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hrsdCode = _data["hrsdCode"];
            this.regionId = _data["regionId"];
            this.region = _data["region"] ? Region.fromJS(_data["region"]) : <any>undefined;
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): City {
        data = typeof data === 'object' ? data : {};
        let result = new City();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hrsdCode"] = this.hrsdCode;
        data["regionId"] = this.regionId;
        data["region"] = this.region ? this.region.toJSON() : <any>undefined;
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICity {
    hrsdCode: number;
    regionId: number;
    region: Region;
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class ConfirmUserEmailInputDto implements IConfirmUserEmailInputDto {
    id!: number;
    code!: string | undefined;
    userId!: string | undefined;

    constructor(data?: IConfirmUserEmailInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): ConfirmUserEmailInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmUserEmailInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IConfirmUserEmailInputDto {
    id: number;
    code: string | undefined;
    userId: string | undefined;
}

export class CreateBeneficiaryDto implements ICreateBeneficiaryDto {
    beneficiaryId!: string | undefined;
    endowmentId!: string | undefined;
    beneficiaryName!: string | undefined;
    spendingCategoryId!: number | undefined;
    isBeneficiaryInsideKsa!: boolean | undefined;

    constructor(data?: ICreateBeneficiaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beneficiaryId = _data["beneficiaryId"];
            this.endowmentId = _data["endowmentId"];
            this.beneficiaryName = _data["beneficiaryName"];
            this.spendingCategoryId = _data["spendingCategoryId"];
            this.isBeneficiaryInsideKsa = _data["isBeneficiaryInsideKsa"];
        }
    }

    static fromJS(data: any): CreateBeneficiaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBeneficiaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beneficiaryId"] = this.beneficiaryId;
        data["endowmentId"] = this.endowmentId;
        data["beneficiaryName"] = this.beneficiaryName;
        data["spendingCategoryId"] = this.spendingCategoryId;
        data["isBeneficiaryInsideKsa"] = this.isBeneficiaryInsideKsa;
        return data;
    }
}

export interface ICreateBeneficiaryDto {
    beneficiaryId: string | undefined;
    endowmentId: string | undefined;
    beneficiaryName: string | undefined;
    spendingCategoryId: number | undefined;
    isBeneficiaryInsideKsa: boolean | undefined;
}

export class CreateSeerInputDto implements ICreateSeerInputDto {
    seerId!: string | undefined;
    endowmentId!: string | undefined;
    seerTypeId!: number | undefined;
    prestigiousAttributeTypeId!: number | undefined;
    prestigiousAttributeName!: string | undefined;
    seenDeedId!: string | undefined;
    seedDeedAttachmentId!: string | undefined;
    commercialNumber!: string | undefined;
    educationLevelId!: number | undefined;
    educationLevelCertificateAttachmentId!: string | undefined;
    experienceYearId!: number | undefined;
    startingDate!: DateTime | undefined;
    endDate!: DateTime | undefined;
    endSeerReasonTypeId!: number | undefined;
    endowmentPartiesTypeId!: number | undefined;
    id!: string;

    constructor(data?: ICreateSeerInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.seerId = _data["seerId"];
            this.endowmentId = _data["endowmentId"];
            this.seerTypeId = _data["seerTypeId"];
            this.prestigiousAttributeTypeId = _data["prestigiousAttributeTypeId"];
            this.prestigiousAttributeName = _data["prestigiousAttributeName"];
            this.seenDeedId = _data["seenDeedId"];
            this.seedDeedAttachmentId = _data["seedDeedAttachmentId"];
            this.commercialNumber = _data["commercialNumber"];
            this.educationLevelId = _data["educationLevelId"];
            this.educationLevelCertificateAttachmentId = _data["educationLevelCertificateAttachmentId"];
            this.experienceYearId = _data["experienceYearId"];
            this.startingDate = _data["startingDate"] ? DateTime.fromISO(_data["startingDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? DateTime.fromISO(_data["endDate"].toString()) : <any>undefined;
            this.endSeerReasonTypeId = _data["endSeerReasonTypeId"];
            this.endowmentPartiesTypeId = _data["endowmentPartiesTypeId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateSeerInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSeerInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["seerId"] = this.seerId;
        data["endowmentId"] = this.endowmentId;
        data["seerTypeId"] = this.seerTypeId;
        data["prestigiousAttributeTypeId"] = this.prestigiousAttributeTypeId;
        data["prestigiousAttributeName"] = this.prestigiousAttributeName;
        data["seenDeedId"] = this.seenDeedId;
        data["seedDeedAttachmentId"] = this.seedDeedAttachmentId;
        data["commercialNumber"] = this.commercialNumber;
        data["educationLevelId"] = this.educationLevelId;
        data["educationLevelCertificateAttachmentId"] = this.educationLevelCertificateAttachmentId;
        data["experienceYearId"] = this.experienceYearId;
        data["startingDate"] = this.startingDate ? this.startingDate.toString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toString() : <any>undefined;
        data["endSeerReasonTypeId"] = this.endSeerReasonTypeId;
        data["endowmentPartiesTypeId"] = this.endowmentPartiesTypeId;
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateSeerInputDto {
    seerId: string | undefined;
    endowmentId: string | undefined;
    seerTypeId: number | undefined;
    prestigiousAttributeTypeId: number | undefined;
    prestigiousAttributeName: string | undefined;
    seenDeedId: string | undefined;
    seedDeedAttachmentId: string | undefined;
    commercialNumber: string | undefined;
    educationLevelId: number | undefined;
    educationLevelCertificateAttachmentId: string | undefined;
    experienceYearId: number | undefined;
    startingDate: DateTime | undefined;
    endDate: DateTime | undefined;
    endSeerReasonTypeId: number | undefined;
    endowmentPartiesTypeId: number | undefined;
    id: string;
}

export class EditSeerInputDto implements IEditSeerInputDto {
    requestId!: string;
    createSeerInputDto!: CreateSeerInputDto;
    applicationUserId!: string | undefined;
    seerPerson!: InputApplicationUserDto;

    constructor(data?: IEditSeerInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.createSeerInputDto = _data["createSeerInputDto"] ? CreateSeerInputDto.fromJS(_data["createSeerInputDto"]) : <any>undefined;
            this.applicationUserId = _data["applicationUserId"];
            this.seerPerson = _data["seerPerson"] ? InputApplicationUserDto.fromJS(_data["seerPerson"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EditSeerInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditSeerInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["createSeerInputDto"] = this.createSeerInputDto ? this.createSeerInputDto.toJSON() : <any>undefined;
        data["applicationUserId"] = this.applicationUserId;
        data["seerPerson"] = this.seerPerson ? this.seerPerson.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEditSeerInputDto {
    requestId: string;
    createSeerInputDto: CreateSeerInputDto;
    applicationUserId: string | undefined;
    seerPerson: InputApplicationUserDto;
}

export class EducationLevel implements IEducationLevel {
    isAttachmentRequired!: boolean;
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: IEducationLevel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isAttachmentRequired = _data["isAttachmentRequired"];
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EducationLevel {
        data = typeof data === 'object' ? data : {};
        let result = new EducationLevel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isAttachmentRequired"] = this.isAttachmentRequired;
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IEducationLevel {
    isAttachmentRequired: boolean;
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class EmailOtpGenerationInputDto implements IEmailOtpGenerationInputDto {
    email!: string;
    userId!: string | undefined;

    constructor(data?: IEmailOtpGenerationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): EmailOtpGenerationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmailOtpGenerationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IEmailOtpGenerationInputDto {
    email: string;
    userId: string | undefined;
}

export class EndowmentAgentData implements IEndowmentAgentData {
    agentId!: string | undefined;
    endowmentId!: string;
    representativeNumber!: string | undefined;
    representativeAttachmentId!: string | undefined;
    statusId!: string | undefined;
    statusName!: string | undefined;
    issueDateHijri!: string | undefined;
    issueDateGreg!: DateTime | undefined;
    endDateHijri!: string | undefined;
    endDateGreg!: DateTime | undefined;
    isDeleted!: boolean | undefined;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;

    constructor(data?: IEndowmentAgentData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.agentId = _data["agentId"];
            this.endowmentId = _data["endowmentId"];
            this.representativeNumber = _data["representativeNumber"];
            this.representativeAttachmentId = _data["representativeAttachmentId"];
            this.statusId = _data["statusId"];
            this.statusName = _data["statusName"];
            this.issueDateHijri = _data["issueDateHijri"];
            this.issueDateGreg = _data["issueDateGreg"] ? DateTime.fromISO(_data["issueDateGreg"].toString()) : <any>undefined;
            this.endDateHijri = _data["endDateHijri"];
            this.endDateGreg = _data["endDateGreg"] ? DateTime.fromISO(_data["endDateGreg"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"];
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EndowmentAgentData {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentAgentData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["agentId"] = this.agentId;
        data["endowmentId"] = this.endowmentId;
        data["representativeNumber"] = this.representativeNumber;
        data["representativeAttachmentId"] = this.representativeAttachmentId;
        data["statusId"] = this.statusId;
        data["statusName"] = this.statusName;
        data["issueDateHijri"] = this.issueDateHijri;
        data["issueDateGreg"] = this.issueDateGreg ? this.issueDateGreg.toString() : <any>undefined;
        data["endDateHijri"] = this.endDateHijri;
        data["endDateGreg"] = this.endDateGreg ? this.endDateGreg.toString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        return data;
    }
}

export interface IEndowmentAgentData {
    agentId: string | undefined;
    endowmentId: string;
    representativeNumber: string | undefined;
    representativeAttachmentId: string | undefined;
    statusId: string | undefined;
    statusName: string | undefined;
    issueDateHijri: string | undefined;
    issueDateGreg: DateTime | undefined;
    endDateHijri: string | undefined;
    endDateGreg: DateTime | undefined;
    isDeleted: boolean | undefined;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
}

export class EndowmentAssetData implements IEndowmentAssetData {
    endowmentId!: string | undefined;
    assetTypeId!: number | undefined;
    assetSubTypeId!: number | undefined;
    assetSizeId!: number | undefined;
    assetApproximatelyAmount!: number | undefined;
    assetSubTypeDescription!: string | undefined;
    assetDescription!: string | undefined;
    assetDeedNumber!: string | undefined;
    assetIssuanceCourt!: string | undefined;
    assetDeedDate!: DateTime | undefined;
    assetDeedDateHijri!: string | undefined;
    animalOrAgriculturalAsset!: AnimalOrAgriculturalAssetData;
    businessEntityAssetData!: BusinessEntityAssetData;
    endowmentData!: EndowmentData;
    fiscalAssetData!: FiscalAssetData;
    monetaryAssetData!: MonetaryAssetData;
    intellectualPropertyAndTrademarkAssetData!: IntellectualPropertyAndTrademarkAssetData;
    movableAssetData!: MovableAssetData;
    particularBenefitAssetData!: ParticularBenefitAssetData;
    realEstateAssetData!: RealEstateAssetData;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IEndowmentAssetData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.endowmentId = _data["endowmentId"];
            this.assetTypeId = _data["assetTypeId"];
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.assetSizeId = _data["assetSizeId"];
            this.assetApproximatelyAmount = _data["assetApproximatelyAmount"];
            this.assetSubTypeDescription = _data["assetSubTypeDescription"];
            this.assetDescription = _data["assetDescription"];
            this.assetDeedNumber = _data["assetDeedNumber"];
            this.assetIssuanceCourt = _data["assetIssuanceCourt"];
            this.assetDeedDate = _data["assetDeedDate"] ? DateTime.fromISO(_data["assetDeedDate"].toString()) : <any>undefined;
            this.assetDeedDateHijri = _data["assetDeedDateHijri"];
            this.animalOrAgriculturalAsset = _data["animalOrAgriculturalAsset"] ? AnimalOrAgriculturalAssetData.fromJS(_data["animalOrAgriculturalAsset"]) : <any>undefined;
            this.businessEntityAssetData = _data["businessEntityAssetData"] ? BusinessEntityAssetData.fromJS(_data["businessEntityAssetData"]) : <any>undefined;
            this.endowmentData = _data["endowmentData"] ? EndowmentData.fromJS(_data["endowmentData"]) : <any>undefined;
            this.fiscalAssetData = _data["fiscalAssetData"] ? FiscalAssetData.fromJS(_data["fiscalAssetData"]) : <any>undefined;
            this.monetaryAssetData = _data["monetaryAssetData"] ? MonetaryAssetData.fromJS(_data["monetaryAssetData"]) : <any>undefined;
            this.intellectualPropertyAndTrademarkAssetData = _data["intellectualPropertyAndTrademarkAssetData"] ? IntellectualPropertyAndTrademarkAssetData.fromJS(_data["intellectualPropertyAndTrademarkAssetData"]) : <any>undefined;
            this.movableAssetData = _data["movableAssetData"] ? MovableAssetData.fromJS(_data["movableAssetData"]) : <any>undefined;
            this.particularBenefitAssetData = _data["particularBenefitAssetData"] ? ParticularBenefitAssetData.fromJS(_data["particularBenefitAssetData"]) : <any>undefined;
            this.realEstateAssetData = _data["realEstateAssetData"] ? RealEstateAssetData.fromJS(_data["realEstateAssetData"]) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EndowmentAssetData {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentAssetData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endowmentId"] = this.endowmentId;
        data["assetTypeId"] = this.assetTypeId;
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["assetSizeId"] = this.assetSizeId;
        data["assetApproximatelyAmount"] = this.assetApproximatelyAmount;
        data["assetSubTypeDescription"] = this.assetSubTypeDescription;
        data["assetDescription"] = this.assetDescription;
        data["assetDeedNumber"] = this.assetDeedNumber;
        data["assetIssuanceCourt"] = this.assetIssuanceCourt;
        data["assetDeedDate"] = this.assetDeedDate ? this.assetDeedDate.toString() : <any>undefined;
        data["assetDeedDateHijri"] = this.assetDeedDateHijri;
        data["animalOrAgriculturalAsset"] = this.animalOrAgriculturalAsset ? this.animalOrAgriculturalAsset.toJSON() : <any>undefined;
        data["businessEntityAssetData"] = this.businessEntityAssetData ? this.businessEntityAssetData.toJSON() : <any>undefined;
        data["endowmentData"] = this.endowmentData ? this.endowmentData.toJSON() : <any>undefined;
        data["fiscalAssetData"] = this.fiscalAssetData ? this.fiscalAssetData.toJSON() : <any>undefined;
        data["monetaryAssetData"] = this.monetaryAssetData ? this.monetaryAssetData.toJSON() : <any>undefined;
        data["intellectualPropertyAndTrademarkAssetData"] = this.intellectualPropertyAndTrademarkAssetData ? this.intellectualPropertyAndTrademarkAssetData.toJSON() : <any>undefined;
        data["movableAssetData"] = this.movableAssetData ? this.movableAssetData.toJSON() : <any>undefined;
        data["particularBenefitAssetData"] = this.particularBenefitAssetData ? this.particularBenefitAssetData.toJSON() : <any>undefined;
        data["realEstateAssetData"] = this.realEstateAssetData ? this.realEstateAssetData.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IEndowmentAssetData {
    endowmentId: string | undefined;
    assetTypeId: number | undefined;
    assetSubTypeId: number | undefined;
    assetSizeId: number | undefined;
    assetApproximatelyAmount: number | undefined;
    assetSubTypeDescription: string | undefined;
    assetDescription: string | undefined;
    assetDeedNumber: string | undefined;
    assetIssuanceCourt: string | undefined;
    assetDeedDate: DateTime | undefined;
    assetDeedDateHijri: string | undefined;
    animalOrAgriculturalAsset: AnimalOrAgriculturalAssetData;
    businessEntityAssetData: BusinessEntityAssetData;
    endowmentData: EndowmentData;
    fiscalAssetData: FiscalAssetData;
    monetaryAssetData: MonetaryAssetData;
    intellectualPropertyAndTrademarkAssetData: IntellectualPropertyAndTrademarkAssetData;
    movableAssetData: MovableAssetData;
    particularBenefitAssetData: ParticularBenefitAssetData;
    realEstateAssetData: RealEstateAssetData;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class EndowmentBankAccountData implements IEndowmentBankAccountData {
    endowmentId!: string | undefined;
    bankId!: number | undefined;
    accountName!: string | undefined;
    iban!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IEndowmentBankAccountData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.endowmentId = _data["endowmentId"];
            this.bankId = _data["bankId"];
            this.accountName = _data["accountName"];
            this.iban = _data["iban"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EndowmentBankAccountData {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentBankAccountData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endowmentId"] = this.endowmentId;
        data["bankId"] = this.bankId;
        data["accountName"] = this.accountName;
        data["iban"] = this.iban;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IEndowmentBankAccountData {
    endowmentId: string | undefined;
    bankId: number | undefined;
    accountName: string | undefined;
    iban: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class EndowmentBeneficiaryData implements IEndowmentBeneficiaryData {
    beneficiaryId!: string | undefined;
    endowmentId!: string | undefined;
    beneficiaryName!: string | undefined;
    spendingCategoryId!: number | undefined;
    isBeneficiaryInsideKsa!: boolean | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IEndowmentBeneficiaryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beneficiaryId = _data["beneficiaryId"];
            this.endowmentId = _data["endowmentId"];
            this.beneficiaryName = _data["beneficiaryName"];
            this.spendingCategoryId = _data["spendingCategoryId"];
            this.isBeneficiaryInsideKsa = _data["isBeneficiaryInsideKsa"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EndowmentBeneficiaryData {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentBeneficiaryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beneficiaryId"] = this.beneficiaryId;
        data["endowmentId"] = this.endowmentId;
        data["beneficiaryName"] = this.beneficiaryName;
        data["spendingCategoryId"] = this.spendingCategoryId;
        data["isBeneficiaryInsideKsa"] = this.isBeneficiaryInsideKsa;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IEndowmentBeneficiaryData {
    beneficiaryId: string | undefined;
    endowmentId: string | undefined;
    beneficiaryName: string | undefined;
    spendingCategoryId: number | undefined;
    isBeneficiaryInsideKsa: boolean | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class EndowmentCertificate implements IEndowmentCertificate {
    endowmentId!: string | undefined;
    requestId!: string | undefined;
    certificate!: Certificate;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IEndowmentCertificate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.endowmentId = _data["endowmentId"];
            this.requestId = _data["requestId"];
            this.certificate = _data["certificate"] ? Certificate.fromJS(_data["certificate"]) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EndowmentCertificate {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentCertificate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endowmentId"] = this.endowmentId;
        data["requestId"] = this.requestId;
        data["certificate"] = this.certificate ? this.certificate.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IEndowmentCertificate {
    endowmentId: string | undefined;
    requestId: string | undefined;
    certificate: Certificate;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class EndowmentCertificateVersion implements IEndowmentCertificateVersion {
    certificateId!: string;
    version!: number;
    requestId!: string;
    issueDate!: DateTime;
    expiryDate!: DateTime;
    certificate!: Certificate;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IEndowmentCertificateVersion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.certificateId = _data["certificateId"];
            this.version = _data["version"];
            this.requestId = _data["requestId"];
            this.issueDate = _data["issueDate"] ? DateTime.fromISO(_data["issueDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? DateTime.fromISO(_data["expiryDate"].toString()) : <any>undefined;
            this.certificate = _data["certificate"] ? Certificate.fromJS(_data["certificate"]) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EndowmentCertificateVersion {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentCertificateVersion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["certificateId"] = this.certificateId;
        data["version"] = this.version;
        data["requestId"] = this.requestId;
        data["issueDate"] = this.issueDate ? this.issueDate.toString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toString() : <any>undefined;
        data["certificate"] = this.certificate ? this.certificate.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IEndowmentCertificateVersion {
    certificateId: string;
    version: number;
    requestId: string;
    issueDate: DateTime;
    expiryDate: DateTime;
    certificate: Certificate;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class EndowmentData implements IEndowmentData {
    endowmentName!: string | undefined;
    endowmentTypeId!: number | undefined;
    endowmentStatusId!: number | undefined;
    endowmentConditions!: string | undefined;
    seerRules!: string | undefined;
    endowmentDeedNumber!: string | undefined;
    endowmentDeedStatusName!: string | undefined;
    endowmentDeedTypeName!: string | undefined;
    endowmentDeedDate!: DateTime | undefined;
    endowmentDeedDateHijri!: string | undefined;
    endowmentDeedRegionId!: number | undefined;
    endowmentDeedCityId!: number | undefined;
    endowmentDeedAttachmentId!: string | undefined;
    issuanceCourtId!: number | undefined;
    deedNotes!: string | undefined;
    endowmentInitialDate!: string | undefined;
    endowmentRevenue!: string | undefined;
    acceptDonations!: boolean | undefined;
    acceptGiveaways!: boolean | undefined;
    unifiedNationalNumber!: string | undefined;
    endowmentRegistrationSourceId!: number | undefined;
    endowmentAgentsData!: EndowmentAgentData[] | undefined;
    endowmentAssetsData!: EndowmentAssetData[] | undefined;
    endowmentBankAccountsData!: EndowmentBankAccountData[] | undefined;
    endowmentBeneficiariesData!: EndowmentBeneficiaryData[] | undefined;
    endowmersData!: EndowmerData[] | undefined;
    endowmentRegistrationSource!: EndowmentRegistrationSource;
    issuanceCourt!: IssuanceCourt;
    endowmentSeersData!: EndowmentSeerData[] | undefined;
    endowmentDeedCity!: City;
    endowmentDeedRegion!: Region;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IEndowmentData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.endowmentName = _data["endowmentName"];
            this.endowmentTypeId = _data["endowmentTypeId"];
            this.endowmentStatusId = _data["endowmentStatusId"];
            this.endowmentConditions = _data["endowmentConditions"];
            this.seerRules = _data["seerRules"];
            this.endowmentDeedNumber = _data["endowmentDeedNumber"];
            this.endowmentDeedStatusName = _data["endowmentDeedStatusName"];
            this.endowmentDeedTypeName = _data["endowmentDeedTypeName"];
            this.endowmentDeedDate = _data["endowmentDeedDate"] ? DateTime.fromISO(_data["endowmentDeedDate"].toString()) : <any>undefined;
            this.endowmentDeedDateHijri = _data["endowmentDeedDateHijri"];
            this.endowmentDeedRegionId = _data["endowmentDeedRegionId"];
            this.endowmentDeedCityId = _data["endowmentDeedCityId"];
            this.endowmentDeedAttachmentId = _data["endowmentDeedAttachmentId"];
            this.issuanceCourtId = _data["issuanceCourtId"];
            this.deedNotes = _data["deedNotes"];
            this.endowmentInitialDate = _data["endowmentInitialDate"];
            this.endowmentRevenue = _data["endowmentRevenue"];
            this.acceptDonations = _data["acceptDonations"];
            this.acceptGiveaways = _data["acceptGiveaways"];
            this.unifiedNationalNumber = _data["unifiedNationalNumber"];
            this.endowmentRegistrationSourceId = _data["endowmentRegistrationSourceId"];
            if (Array.isArray(_data["endowmentAgentsData"])) {
                this.endowmentAgentsData = [] as any;
                for (let item of _data["endowmentAgentsData"])
                    this.endowmentAgentsData!.push(EndowmentAgentData.fromJS(item));
            }
            if (Array.isArray(_data["endowmentAssetsData"])) {
                this.endowmentAssetsData = [] as any;
                for (let item of _data["endowmentAssetsData"])
                    this.endowmentAssetsData!.push(EndowmentAssetData.fromJS(item));
            }
            if (Array.isArray(_data["endowmentBankAccountsData"])) {
                this.endowmentBankAccountsData = [] as any;
                for (let item of _data["endowmentBankAccountsData"])
                    this.endowmentBankAccountsData!.push(EndowmentBankAccountData.fromJS(item));
            }
            if (Array.isArray(_data["endowmentBeneficiariesData"])) {
                this.endowmentBeneficiariesData = [] as any;
                for (let item of _data["endowmentBeneficiariesData"])
                    this.endowmentBeneficiariesData!.push(EndowmentBeneficiaryData.fromJS(item));
            }
            if (Array.isArray(_data["endowmersData"])) {
                this.endowmersData = [] as any;
                for (let item of _data["endowmersData"])
                    this.endowmersData!.push(EndowmerData.fromJS(item));
            }
            this.endowmentRegistrationSource = _data["endowmentRegistrationSource"] ? EndowmentRegistrationSource.fromJS(_data["endowmentRegistrationSource"]) : <any>undefined;
            this.issuanceCourt = _data["issuanceCourt"] ? IssuanceCourt.fromJS(_data["issuanceCourt"]) : <any>undefined;
            if (Array.isArray(_data["endowmentSeersData"])) {
                this.endowmentSeersData = [] as any;
                for (let item of _data["endowmentSeersData"])
                    this.endowmentSeersData!.push(EndowmentSeerData.fromJS(item));
            }
            this.endowmentDeedCity = _data["endowmentDeedCity"] ? City.fromJS(_data["endowmentDeedCity"]) : <any>undefined;
            this.endowmentDeedRegion = _data["endowmentDeedRegion"] ? Region.fromJS(_data["endowmentDeedRegion"]) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EndowmentData {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endowmentName"] = this.endowmentName;
        data["endowmentTypeId"] = this.endowmentTypeId;
        data["endowmentStatusId"] = this.endowmentStatusId;
        data["endowmentConditions"] = this.endowmentConditions;
        data["seerRules"] = this.seerRules;
        data["endowmentDeedNumber"] = this.endowmentDeedNumber;
        data["endowmentDeedStatusName"] = this.endowmentDeedStatusName;
        data["endowmentDeedTypeName"] = this.endowmentDeedTypeName;
        data["endowmentDeedDate"] = this.endowmentDeedDate ? this.endowmentDeedDate.toString() : <any>undefined;
        data["endowmentDeedDateHijri"] = this.endowmentDeedDateHijri;
        data["endowmentDeedRegionId"] = this.endowmentDeedRegionId;
        data["endowmentDeedCityId"] = this.endowmentDeedCityId;
        data["endowmentDeedAttachmentId"] = this.endowmentDeedAttachmentId;
        data["issuanceCourtId"] = this.issuanceCourtId;
        data["deedNotes"] = this.deedNotes;
        data["endowmentInitialDate"] = this.endowmentInitialDate;
        data["endowmentRevenue"] = this.endowmentRevenue;
        data["acceptDonations"] = this.acceptDonations;
        data["acceptGiveaways"] = this.acceptGiveaways;
        data["unifiedNationalNumber"] = this.unifiedNationalNumber;
        data["endowmentRegistrationSourceId"] = this.endowmentRegistrationSourceId;
        if (Array.isArray(this.endowmentAgentsData)) {
            data["endowmentAgentsData"] = [];
            for (let item of this.endowmentAgentsData)
                data["endowmentAgentsData"].push(item.toJSON());
        }
        if (Array.isArray(this.endowmentAssetsData)) {
            data["endowmentAssetsData"] = [];
            for (let item of this.endowmentAssetsData)
                data["endowmentAssetsData"].push(item.toJSON());
        }
        if (Array.isArray(this.endowmentBankAccountsData)) {
            data["endowmentBankAccountsData"] = [];
            for (let item of this.endowmentBankAccountsData)
                data["endowmentBankAccountsData"].push(item.toJSON());
        }
        if (Array.isArray(this.endowmentBeneficiariesData)) {
            data["endowmentBeneficiariesData"] = [];
            for (let item of this.endowmentBeneficiariesData)
                data["endowmentBeneficiariesData"].push(item.toJSON());
        }
        if (Array.isArray(this.endowmersData)) {
            data["endowmersData"] = [];
            for (let item of this.endowmersData)
                data["endowmersData"].push(item.toJSON());
        }
        data["endowmentRegistrationSource"] = this.endowmentRegistrationSource ? this.endowmentRegistrationSource.toJSON() : <any>undefined;
        data["issuanceCourt"] = this.issuanceCourt ? this.issuanceCourt.toJSON() : <any>undefined;
        if (Array.isArray(this.endowmentSeersData)) {
            data["endowmentSeersData"] = [];
            for (let item of this.endowmentSeersData)
                data["endowmentSeersData"].push(item.toJSON());
        }
        data["endowmentDeedCity"] = this.endowmentDeedCity ? this.endowmentDeedCity.toJSON() : <any>undefined;
        data["endowmentDeedRegion"] = this.endowmentDeedRegion ? this.endowmentDeedRegion.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IEndowmentData {
    endowmentName: string | undefined;
    endowmentTypeId: number | undefined;
    endowmentStatusId: number | undefined;
    endowmentConditions: string | undefined;
    seerRules: string | undefined;
    endowmentDeedNumber: string | undefined;
    endowmentDeedStatusName: string | undefined;
    endowmentDeedTypeName: string | undefined;
    endowmentDeedDate: DateTime | undefined;
    endowmentDeedDateHijri: string | undefined;
    endowmentDeedRegionId: number | undefined;
    endowmentDeedCityId: number | undefined;
    endowmentDeedAttachmentId: string | undefined;
    issuanceCourtId: number | undefined;
    deedNotes: string | undefined;
    endowmentInitialDate: string | undefined;
    endowmentRevenue: string | undefined;
    acceptDonations: boolean | undefined;
    acceptGiveaways: boolean | undefined;
    unifiedNationalNumber: string | undefined;
    endowmentRegistrationSourceId: number | undefined;
    endowmentAgentsData: EndowmentAgentData[] | undefined;
    endowmentAssetsData: EndowmentAssetData[] | undefined;
    endowmentBankAccountsData: EndowmentBankAccountData[] | undefined;
    endowmentBeneficiariesData: EndowmentBeneficiaryData[] | undefined;
    endowmersData: EndowmerData[] | undefined;
    endowmentRegistrationSource: EndowmentRegistrationSource;
    issuanceCourt: IssuanceCourt;
    endowmentSeersData: EndowmentSeerData[] | undefined;
    endowmentDeedCity: City;
    endowmentDeedRegion: Region;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class EndowmentOutputDto implements IEndowmentOutputDto {
    applicantTypeIds!: string | undefined;
    endowmentId!: string | undefined;
    endowmentData!: EndowmentData;
    assetsData!: EndowmentAssetData[] | undefined;
    endowmersData!: EndowmerData[] | undefined;
    seersData!: EndowmentSeerData[] | undefined;
    cetifcatesdata!: Certificate;
    agentsData!: EndowmentAgentData[] | undefined;
    beneficiariesData!: EndowmentBeneficiaryData[] | undefined;
    unifiedNumberResponse!: string | undefined;
    bankAccountData!: EndowmentBankAccountData[] | undefined;
    endowmentRegistrationSourceId!: number | undefined;
    dataStateId!: number | undefined;
    tobeVisitedStep!: number | undefined;
    applicantType!: ApplicantType;
    request!: Request;

    constructor(data?: IEndowmentOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicantTypeIds = _data["applicantTypeIds"];
            this.endowmentId = _data["endowmentId"];
            this.endowmentData = _data["endowmentData"] ? EndowmentData.fromJS(_data["endowmentData"]) : <any>undefined;
            if (Array.isArray(_data["assetsData"])) {
                this.assetsData = [] as any;
                for (let item of _data["assetsData"])
                    this.assetsData!.push(EndowmentAssetData.fromJS(item));
            }
            if (Array.isArray(_data["endowmersData"])) {
                this.endowmersData = [] as any;
                for (let item of _data["endowmersData"])
                    this.endowmersData!.push(EndowmerData.fromJS(item));
            }
            if (Array.isArray(_data["seersData"])) {
                this.seersData = [] as any;
                for (let item of _data["seersData"])
                    this.seersData!.push(EndowmentSeerData.fromJS(item));
            }
            this.cetifcatesdata = _data["cetifcatesdata"] ? Certificate.fromJS(_data["cetifcatesdata"]) : <any>undefined;
            if (Array.isArray(_data["agentsData"])) {
                this.agentsData = [] as any;
                for (let item of _data["agentsData"])
                    this.agentsData!.push(EndowmentAgentData.fromJS(item));
            }
            if (Array.isArray(_data["beneficiariesData"])) {
                this.beneficiariesData = [] as any;
                for (let item of _data["beneficiariesData"])
                    this.beneficiariesData!.push(EndowmentBeneficiaryData.fromJS(item));
            }
            this.unifiedNumberResponse = _data["unifiedNumberResponse"];
            if (Array.isArray(_data["bankAccountData"])) {
                this.bankAccountData = [] as any;
                for (let item of _data["bankAccountData"])
                    this.bankAccountData!.push(EndowmentBankAccountData.fromJS(item));
            }
            this.endowmentRegistrationSourceId = _data["endowmentRegistrationSourceId"];
            this.dataStateId = _data["dataStateId"];
            this.tobeVisitedStep = _data["tobeVisitedStep"];
            this.applicantType = _data["applicantType"] ? ApplicantType.fromJS(_data["applicantType"]) : <any>undefined;
            this.request = _data["request"] ? Request.fromJS(_data["request"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EndowmentOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicantTypeIds"] = this.applicantTypeIds;
        data["endowmentId"] = this.endowmentId;
        data["endowmentData"] = this.endowmentData ? this.endowmentData.toJSON() : <any>undefined;
        if (Array.isArray(this.assetsData)) {
            data["assetsData"] = [];
            for (let item of this.assetsData)
                data["assetsData"].push(item.toJSON());
        }
        if (Array.isArray(this.endowmersData)) {
            data["endowmersData"] = [];
            for (let item of this.endowmersData)
                data["endowmersData"].push(item.toJSON());
        }
        if (Array.isArray(this.seersData)) {
            data["seersData"] = [];
            for (let item of this.seersData)
                data["seersData"].push(item.toJSON());
        }
        data["cetifcatesdata"] = this.cetifcatesdata ? this.cetifcatesdata.toJSON() : <any>undefined;
        if (Array.isArray(this.agentsData)) {
            data["agentsData"] = [];
            for (let item of this.agentsData)
                data["agentsData"].push(item.toJSON());
        }
        if (Array.isArray(this.beneficiariesData)) {
            data["beneficiariesData"] = [];
            for (let item of this.beneficiariesData)
                data["beneficiariesData"].push(item.toJSON());
        }
        data["unifiedNumberResponse"] = this.unifiedNumberResponse;
        if (Array.isArray(this.bankAccountData)) {
            data["bankAccountData"] = [];
            for (let item of this.bankAccountData)
                data["bankAccountData"].push(item.toJSON());
        }
        data["endowmentRegistrationSourceId"] = this.endowmentRegistrationSourceId;
        data["dataStateId"] = this.dataStateId;
        data["tobeVisitedStep"] = this.tobeVisitedStep;
        data["applicantType"] = this.applicantType ? this.applicantType.toJSON() : <any>undefined;
        data["request"] = this.request ? this.request.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEndowmentOutputDto {
    applicantTypeIds: string | undefined;
    endowmentId: string | undefined;
    endowmentData: EndowmentData;
    assetsData: EndowmentAssetData[] | undefined;
    endowmersData: EndowmerData[] | undefined;
    seersData: EndowmentSeerData[] | undefined;
    cetifcatesdata: Certificate;
    agentsData: EndowmentAgentData[] | undefined;
    beneficiariesData: EndowmentBeneficiaryData[] | undefined;
    unifiedNumberResponse: string | undefined;
    bankAccountData: EndowmentBankAccountData[] | undefined;
    endowmentRegistrationSourceId: number | undefined;
    dataStateId: number | undefined;
    tobeVisitedStep: number | undefined;
    applicantType: ApplicantType;
    request: Request;
}

export class EndowmentRegistrationRequest implements IEndowmentRegistrationRequest {
    applicantTypeIds!: string | undefined;
    endowmentId!: string | undefined;
    endowmentData!: EndowmentData;
    assetsData!: EndowmentAssetData[] | undefined;
    endowmersData!: EndowmerData[] | undefined;
    seersData!: EndowmentSeerData[] | undefined;
    cetifcatesdata!: Certificate;
    agentsData!: EndowmentAgentData[] | undefined;
    beneficiariesData!: EndowmentBeneficiaryData[] | undefined;
    unifiedNumberResponse!: string | undefined;
    bankAccountData!: EndowmentBankAccountData[] | undefined;
    endowmentRegistrationSourceId!: number | undefined;
    dataStateId!: number | undefined;
    tobeVisitedStep!: number | undefined;
    applicantType!: ApplicantType;
    request!: Request;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IEndowmentRegistrationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicantTypeIds = _data["applicantTypeIds"];
            this.endowmentId = _data["endowmentId"];
            this.endowmentData = _data["endowmentData"] ? EndowmentData.fromJS(_data["endowmentData"]) : <any>undefined;
            if (Array.isArray(_data["assetsData"])) {
                this.assetsData = [] as any;
                for (let item of _data["assetsData"])
                    this.assetsData!.push(EndowmentAssetData.fromJS(item));
            }
            if (Array.isArray(_data["endowmersData"])) {
                this.endowmersData = [] as any;
                for (let item of _data["endowmersData"])
                    this.endowmersData!.push(EndowmerData.fromJS(item));
            }
            if (Array.isArray(_data["seersData"])) {
                this.seersData = [] as any;
                for (let item of _data["seersData"])
                    this.seersData!.push(EndowmentSeerData.fromJS(item));
            }
            this.cetifcatesdata = _data["cetifcatesdata"] ? Certificate.fromJS(_data["cetifcatesdata"]) : <any>undefined;
            if (Array.isArray(_data["agentsData"])) {
                this.agentsData = [] as any;
                for (let item of _data["agentsData"])
                    this.agentsData!.push(EndowmentAgentData.fromJS(item));
            }
            if (Array.isArray(_data["beneficiariesData"])) {
                this.beneficiariesData = [] as any;
                for (let item of _data["beneficiariesData"])
                    this.beneficiariesData!.push(EndowmentBeneficiaryData.fromJS(item));
            }
            this.unifiedNumberResponse = _data["unifiedNumberResponse"];
            if (Array.isArray(_data["bankAccountData"])) {
                this.bankAccountData = [] as any;
                for (let item of _data["bankAccountData"])
                    this.bankAccountData!.push(EndowmentBankAccountData.fromJS(item));
            }
            this.endowmentRegistrationSourceId = _data["endowmentRegistrationSourceId"];
            this.dataStateId = _data["dataStateId"];
            this.tobeVisitedStep = _data["tobeVisitedStep"];
            this.applicantType = _data["applicantType"] ? ApplicantType.fromJS(_data["applicantType"]) : <any>undefined;
            this.request = _data["request"] ? Request.fromJS(_data["request"]) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EndowmentRegistrationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentRegistrationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicantTypeIds"] = this.applicantTypeIds;
        data["endowmentId"] = this.endowmentId;
        data["endowmentData"] = this.endowmentData ? this.endowmentData.toJSON() : <any>undefined;
        if (Array.isArray(this.assetsData)) {
            data["assetsData"] = [];
            for (let item of this.assetsData)
                data["assetsData"].push(item.toJSON());
        }
        if (Array.isArray(this.endowmersData)) {
            data["endowmersData"] = [];
            for (let item of this.endowmersData)
                data["endowmersData"].push(item.toJSON());
        }
        if (Array.isArray(this.seersData)) {
            data["seersData"] = [];
            for (let item of this.seersData)
                data["seersData"].push(item.toJSON());
        }
        data["cetifcatesdata"] = this.cetifcatesdata ? this.cetifcatesdata.toJSON() : <any>undefined;
        if (Array.isArray(this.agentsData)) {
            data["agentsData"] = [];
            for (let item of this.agentsData)
                data["agentsData"].push(item.toJSON());
        }
        if (Array.isArray(this.beneficiariesData)) {
            data["beneficiariesData"] = [];
            for (let item of this.beneficiariesData)
                data["beneficiariesData"].push(item.toJSON());
        }
        data["unifiedNumberResponse"] = this.unifiedNumberResponse;
        if (Array.isArray(this.bankAccountData)) {
            data["bankAccountData"] = [];
            for (let item of this.bankAccountData)
                data["bankAccountData"].push(item.toJSON());
        }
        data["endowmentRegistrationSourceId"] = this.endowmentRegistrationSourceId;
        data["dataStateId"] = this.dataStateId;
        data["tobeVisitedStep"] = this.tobeVisitedStep;
        data["applicantType"] = this.applicantType ? this.applicantType.toJSON() : <any>undefined;
        data["request"] = this.request ? this.request.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IEndowmentRegistrationRequest {
    applicantTypeIds: string | undefined;
    endowmentId: string | undefined;
    endowmentData: EndowmentData;
    assetsData: EndowmentAssetData[] | undefined;
    endowmersData: EndowmerData[] | undefined;
    seersData: EndowmentSeerData[] | undefined;
    cetifcatesdata: Certificate;
    agentsData: EndowmentAgentData[] | undefined;
    beneficiariesData: EndowmentBeneficiaryData[] | undefined;
    unifiedNumberResponse: string | undefined;
    bankAccountData: EndowmentBankAccountData[] | undefined;
    endowmentRegistrationSourceId: number | undefined;
    dataStateId: number | undefined;
    tobeVisitedStep: number | undefined;
    applicantType: ApplicantType;
    request: Request;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class EndowmentRegistrationSource implements IEndowmentRegistrationSource {
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: IEndowmentRegistrationSource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): EndowmentRegistrationSource {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentRegistrationSource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IEndowmentRegistrationSource {
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class EndowmentSeerData implements IEndowmentSeerData {
    seerId!: string | undefined;
    endowmentId!: string;
    seerTypeId!: number | undefined;
    prestigiousAttributeTypeId!: number | undefined;
    prestigiousAttributeName!: string | undefined;
    seenDeedId!: string | undefined;
    seedDeedAttachmentId!: string | undefined;
    commercialNumber!: string | undefined;
    educationLevelId!: number | undefined;
    educationLevelCertificateAttachmentId!: string | undefined;
    experienceYearId!: number | undefined;
    startingDate!: DateTime | undefined;
    endDate!: DateTime | undefined;
    endSeerReasonTypeId!: number | undefined;
    isDeleted!: boolean | undefined;
    experienceYear!: ExperienceYear;
    applicationUser!: ApplicationUser;
    educationLevel!: EducationLevel;
    endowmentPartiesTypeId!: number | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;

    constructor(data?: IEndowmentSeerData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.seerId = _data["seerId"];
            this.endowmentId = _data["endowmentId"];
            this.seerTypeId = _data["seerTypeId"];
            this.prestigiousAttributeTypeId = _data["prestigiousAttributeTypeId"];
            this.prestigiousAttributeName = _data["prestigiousAttributeName"];
            this.seenDeedId = _data["seenDeedId"];
            this.seedDeedAttachmentId = _data["seedDeedAttachmentId"];
            this.commercialNumber = _data["commercialNumber"];
            this.educationLevelId = _data["educationLevelId"];
            this.educationLevelCertificateAttachmentId = _data["educationLevelCertificateAttachmentId"];
            this.experienceYearId = _data["experienceYearId"];
            this.startingDate = _data["startingDate"] ? DateTime.fromISO(_data["startingDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? DateTime.fromISO(_data["endDate"].toString()) : <any>undefined;
            this.endSeerReasonTypeId = _data["endSeerReasonTypeId"];
            this.isDeleted = _data["isDeleted"];
            this.experienceYear = _data["experienceYear"] ? ExperienceYear.fromJS(_data["experienceYear"]) : <any>undefined;
            this.applicationUser = _data["applicationUser"] ? ApplicationUser.fromJS(_data["applicationUser"]) : <any>undefined;
            this.educationLevel = _data["educationLevel"] ? EducationLevel.fromJS(_data["educationLevel"]) : <any>undefined;
            this.endowmentPartiesTypeId = _data["endowmentPartiesTypeId"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EndowmentSeerData {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmentSeerData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["seerId"] = this.seerId;
        data["endowmentId"] = this.endowmentId;
        data["seerTypeId"] = this.seerTypeId;
        data["prestigiousAttributeTypeId"] = this.prestigiousAttributeTypeId;
        data["prestigiousAttributeName"] = this.prestigiousAttributeName;
        data["seenDeedId"] = this.seenDeedId;
        data["seedDeedAttachmentId"] = this.seedDeedAttachmentId;
        data["commercialNumber"] = this.commercialNumber;
        data["educationLevelId"] = this.educationLevelId;
        data["educationLevelCertificateAttachmentId"] = this.educationLevelCertificateAttachmentId;
        data["experienceYearId"] = this.experienceYearId;
        data["startingDate"] = this.startingDate ? this.startingDate.toString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toString() : <any>undefined;
        data["endSeerReasonTypeId"] = this.endSeerReasonTypeId;
        data["isDeleted"] = this.isDeleted;
        data["experienceYear"] = this.experienceYear ? this.experienceYear.toJSON() : <any>undefined;
        data["applicationUser"] = this.applicationUser ? this.applicationUser.toJSON() : <any>undefined;
        data["educationLevel"] = this.educationLevel ? this.educationLevel.toJSON() : <any>undefined;
        data["endowmentPartiesTypeId"] = this.endowmentPartiesTypeId;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        return data;
    }
}

export interface IEndowmentSeerData {
    seerId: string | undefined;
    endowmentId: string;
    seerTypeId: number | undefined;
    prestigiousAttributeTypeId: number | undefined;
    prestigiousAttributeName: string | undefined;
    seenDeedId: string | undefined;
    seedDeedAttachmentId: string | undefined;
    commercialNumber: string | undefined;
    educationLevelId: number | undefined;
    educationLevelCertificateAttachmentId: string | undefined;
    experienceYearId: number | undefined;
    startingDate: DateTime | undefined;
    endDate: DateTime | undefined;
    endSeerReasonTypeId: number | undefined;
    isDeleted: boolean | undefined;
    experienceYear: ExperienceYear;
    applicationUser: ApplicationUser;
    educationLevel: EducationLevel;
    endowmentPartiesTypeId: number | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
}

export class EndowmerData implements IEndowmerData {
    endowmerId!: string | undefined;
    endowmentId!: string;
    endowmerTypeId!: number | undefined;
    prestigiousAttributeTypeId!: number | undefined;
    commercialNumber!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    isMainApplicant!: boolean;
    endowmentPartiesTypeId!: number | undefined;

    constructor(data?: IEndowmerData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.endowmerId = _data["endowmerId"];
            this.endowmentId = _data["endowmentId"];
            this.endowmerTypeId = _data["endowmerTypeId"];
            this.prestigiousAttributeTypeId = _data["prestigiousAttributeTypeId"];
            this.commercialNumber = _data["commercialNumber"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.isMainApplicant = _data["isMainApplicant"];
            this.endowmentPartiesTypeId = _data["endowmentPartiesTypeId"];
        }
    }

    static fromJS(data: any): EndowmerData {
        data = typeof data === 'object' ? data : {};
        let result = new EndowmerData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endowmerId"] = this.endowmerId;
        data["endowmentId"] = this.endowmentId;
        data["endowmerTypeId"] = this.endowmerTypeId;
        data["prestigiousAttributeTypeId"] = this.prestigiousAttributeTypeId;
        data["commercialNumber"] = this.commercialNumber;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["isMainApplicant"] = this.isMainApplicant;
        data["endowmentPartiesTypeId"] = this.endowmentPartiesTypeId;
        return data;
    }
}

export interface IEndowmerData {
    endowmerId: string | undefined;
    endowmentId: string;
    endowmerTypeId: number | undefined;
    prestigiousAttributeTypeId: number | undefined;
    commercialNumber: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    isMainApplicant: boolean;
    endowmentPartiesTypeId: number | undefined;
}

export class ExperienceYear implements IExperienceYear {
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: IExperienceYear) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ExperienceYear {
        data = typeof data === 'object' ? data : {};
        let result = new ExperienceYear();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IExperienceYear {
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class FileByIdDto implements IFileByIdDto {
    entityName!: string | undefined;
    id!: string;

    constructor(data?: IFileByIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.entityName = _data["entityName"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): FileByIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileByIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityName"] = this.entityName;
        data["id"] = this.id;
        return data;
    }
}

export interface IFileByIdDto {
    entityName: string | undefined;
    id: string;
}

export class FileExtraData implements IFileExtraData {
    dataName!: string | undefined;
    dataValue!: string | undefined;

    constructor(data?: IFileExtraData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataName = _data["dataName"];
            this.dataValue = _data["dataValue"];
        }
    }

    static fromJS(data: any): FileExtraData {
        data = typeof data === 'object' ? data : {};
        let result = new FileExtraData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataName"] = this.dataName;
        data["dataValue"] = this.dataValue;
        return data;
    }
}

export interface IFileExtraData {
    dataName: string | undefined;
    dataValue: string | undefined;
}

export class FiscalAssetData implements IFiscalAssetData {
    numberOfShare!: number | undefined;
    investmentPortfolioNumber!: number | undefined;
    currentAssetValue!: number | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IFiscalAssetData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numberOfShare = _data["numberOfShare"];
            this.investmentPortfolioNumber = _data["investmentPortfolioNumber"];
            this.currentAssetValue = _data["currentAssetValue"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): FiscalAssetData {
        data = typeof data === 'object' ? data : {};
        let result = new FiscalAssetData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numberOfShare"] = this.numberOfShare;
        data["investmentPortfolioNumber"] = this.investmentPortfolioNumber;
        data["currentAssetValue"] = this.currentAssetValue;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IFiscalAssetData {
    numberOfShare: number | undefined;
    investmentPortfolioNumber: number | undefined;
    currentAssetValue: number | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class GetAlienInfoInputDto implements IGetAlienInfoInputDto {
    iqama!: string | undefined;
    dateOfBirth!: string | undefined;

    constructor(data?: IGetAlienInfoInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iqama = _data["iqama"];
            this.dateOfBirth = _data["dateOfBirth"];
        }
    }

    static fromJS(data: any): GetAlienInfoInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAlienInfoInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["iqama"] = this.iqama;
        data["dateOfBirth"] = this.dateOfBirth;
        return data;
    }
}

export interface IGetAlienInfoInputDto {
    iqama: string | undefined;
    dateOfBirth: string | undefined;
}

export class GetCitizenInfoInputDto implements IGetCitizenInfoInputDto {
    nin!: string | undefined;
    dateOfBirth!: string | undefined;

    constructor(data?: IGetCitizenInfoInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nin = _data["nin"];
            this.dateOfBirth = _data["dateOfBirth"];
        }
    }

    static fromJS(data: any): GetCitizenInfoInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCitizenInfoInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nin"] = this.nin;
        data["dateOfBirth"] = this.dateOfBirth;
        return data;
    }
}

export interface IGetCitizenInfoInputDto {
    nin: string | undefined;
    dateOfBirth: string | undefined;
}

export class IdType implements IIdType {
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: IIdType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): IdType {
        data = typeof data === 'object' ? data : {};
        let result = new IdType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IIdType {
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class InputAnimalOrAgriculturalAssetDto implements IInputAnimalOrAgriculturalAssetDto {
    regionId!: number;
    cityId!: number;
    animalOrAgriculturaDescription!: string | undefined;
    id!: string;

    constructor(data?: IInputAnimalOrAgriculturalAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.animalOrAgriculturaDescription = _data["animalOrAgriculturaDescription"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputAnimalOrAgriculturalAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputAnimalOrAgriculturalAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["animalOrAgriculturaDescription"] = this.animalOrAgriculturaDescription;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputAnimalOrAgriculturalAssetDto {
    regionId: number;
    cityId: number;
    animalOrAgriculturaDescription: string | undefined;
    id: string;
}

export class InputApplicantAgentDto implements IInputApplicantAgentDto {
    representativeNumber!: string | undefined;
    representativeAttachmentId!: string;
    statusId!: string | undefined;
    statusName!: string | undefined;
    issueDateHijri!: string | undefined;
    issueDateGreg!: DateTime;
    endDateHijri!: string | undefined;
    endDateGreg!: DateTime;

    constructor(data?: IInputApplicantAgentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.representativeNumber = _data["representativeNumber"];
            this.representativeAttachmentId = _data["representativeAttachmentId"];
            this.statusId = _data["statusId"];
            this.statusName = _data["statusName"];
            this.issueDateHijri = _data["issueDateHijri"];
            this.issueDateGreg = _data["issueDateGreg"] ? DateTime.fromISO(_data["issueDateGreg"].toString()) : <any>undefined;
            this.endDateHijri = _data["endDateHijri"];
            this.endDateGreg = _data["endDateGreg"] ? DateTime.fromISO(_data["endDateGreg"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): InputApplicantAgentDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputApplicantAgentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["representativeNumber"] = this.representativeNumber;
        data["representativeAttachmentId"] = this.representativeAttachmentId;
        data["statusId"] = this.statusId;
        data["statusName"] = this.statusName;
        data["issueDateHijri"] = this.issueDateHijri;
        data["issueDateGreg"] = this.issueDateGreg ? this.issueDateGreg.toString() : <any>undefined;
        data["endDateHijri"] = this.endDateHijri;
        data["endDateGreg"] = this.endDateGreg ? this.endDateGreg.toString() : <any>undefined;
        return data;
    }
}

export interface IInputApplicantAgentDto {
    representativeNumber: string | undefined;
    representativeAttachmentId: string;
    statusId: string | undefined;
    statusName: string | undefined;
    issueDateHijri: string | undefined;
    issueDateGreg: DateTime;
    endDateHijri: string | undefined;
    endDateGreg: DateTime;
}

export class InputApplicantDto implements IInputApplicantDto {
    idNumber!: string | undefined;
    idTypeId!: number;
    birthDate!: DateTime | undefined;
    birthDateHijri!: string | undefined;
    gender!: UserGender;
    firstNameAr!: string | undefined;
    secondNameAr!: string | undefined;
    thirdNameAr!: string | undefined;
    lastNameAr!: string | undefined;
    nationalityId!: number;
    nationality!: LookupDto;
    isAlive!: boolean | undefined;
    phoneNumber!: string | undefined;
    email!: string | undefined;

    constructor(data?: IInputApplicantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idNumber = _data["idNumber"];
            this.idTypeId = _data["idTypeId"];
            this.birthDate = _data["birthDate"] ? DateTime.fromISO(_data["birthDate"].toString()) : <any>undefined;
            this.birthDateHijri = _data["birthDateHijri"];
            this.gender = _data["gender"];
            this.firstNameAr = _data["firstNameAr"];
            this.secondNameAr = _data["secondNameAr"];
            this.thirdNameAr = _data["thirdNameAr"];
            this.lastNameAr = _data["lastNameAr"];
            this.nationalityId = _data["nationalityId"];
            this.nationality = _data["nationality"] ? LookupDto.fromJS(_data["nationality"]) : <any>undefined;
            this.isAlive = _data["isAlive"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): InputApplicantDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputApplicantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idNumber"] = this.idNumber;
        data["idTypeId"] = this.idTypeId;
        data["birthDate"] = this.birthDate ? this.birthDate.toString() : <any>undefined;
        data["birthDateHijri"] = this.birthDateHijri;
        data["gender"] = this.gender;
        data["firstNameAr"] = this.firstNameAr;
        data["secondNameAr"] = this.secondNameAr;
        data["thirdNameAr"] = this.thirdNameAr;
        data["lastNameAr"] = this.lastNameAr;
        data["nationalityId"] = this.nationalityId;
        data["nationality"] = this.nationality ? this.nationality.toJSON() : <any>undefined;
        data["isAlive"] = this.isAlive;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        return data;
    }
}

export interface IInputApplicantDto {
    idNumber: string | undefined;
    idTypeId: number;
    birthDate: DateTime | undefined;
    birthDateHijri: string | undefined;
    gender: UserGender;
    firstNameAr: string | undefined;
    secondNameAr: string | undefined;
    thirdNameAr: string | undefined;
    lastNameAr: string | undefined;
    nationalityId: number;
    nationality: LookupDto;
    isAlive: boolean | undefined;
    phoneNumber: string | undefined;
    email: string | undefined;
}

export class InputApplicantEndowmerDto implements IInputApplicantEndowmerDto {
    prestigiousAttributeTypeId!: number;
    commercialNumber!: string | undefined;
    endowmentPartiesTypeId!: number;

    constructor(data?: IInputApplicantEndowmerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prestigiousAttributeTypeId = _data["prestigiousAttributeTypeId"];
            this.commercialNumber = _data["commercialNumber"];
            this.endowmentPartiesTypeId = _data["endowmentPartiesTypeId"];
        }
    }

    static fromJS(data: any): InputApplicantEndowmerDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputApplicantEndowmerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prestigiousAttributeTypeId"] = this.prestigiousAttributeTypeId;
        data["commercialNumber"] = this.commercialNumber;
        data["endowmentPartiesTypeId"] = this.endowmentPartiesTypeId;
        return data;
    }
}

export interface IInputApplicantEndowmerDto {
    prestigiousAttributeTypeId: number;
    commercialNumber: string | undefined;
    endowmentPartiesTypeId: number;
}

export class InputApplicantSeerDto implements IInputApplicantSeerDto {
    prestigiousAttributeTypeId!: number;
    seenDeedId!: string | undefined;
    seedDeedAttachmentId!: string;
    commercialNumber!: string | undefined;
    educationLevelId!: number;
    educationLevelCertificateAttachmentId!: string;
    experienceYearId!: number;
    endowmentPartiesTypeId!: number;

    constructor(data?: IInputApplicantSeerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prestigiousAttributeTypeId = _data["prestigiousAttributeTypeId"];
            this.seenDeedId = _data["seenDeedId"];
            this.seedDeedAttachmentId = _data["seedDeedAttachmentId"];
            this.commercialNumber = _data["commercialNumber"];
            this.educationLevelId = _data["educationLevelId"];
            this.educationLevelCertificateAttachmentId = _data["educationLevelCertificateAttachmentId"];
            this.experienceYearId = _data["experienceYearId"];
            this.endowmentPartiesTypeId = _data["endowmentPartiesTypeId"];
        }
    }

    static fromJS(data: any): InputApplicantSeerDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputApplicantSeerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prestigiousAttributeTypeId"] = this.prestigiousAttributeTypeId;
        data["seenDeedId"] = this.seenDeedId;
        data["seedDeedAttachmentId"] = this.seedDeedAttachmentId;
        data["commercialNumber"] = this.commercialNumber;
        data["educationLevelId"] = this.educationLevelId;
        data["educationLevelCertificateAttachmentId"] = this.educationLevelCertificateAttachmentId;
        data["experienceYearId"] = this.experienceYearId;
        data["endowmentPartiesTypeId"] = this.endowmentPartiesTypeId;
        return data;
    }
}

export interface IInputApplicantSeerDto {
    prestigiousAttributeTypeId: number;
    seenDeedId: string | undefined;
    seedDeedAttachmentId: string;
    commercialNumber: string | undefined;
    educationLevelId: number;
    educationLevelCertificateAttachmentId: string;
    experienceYearId: number;
    endowmentPartiesTypeId: number;
}

export class InputApplicationUserDto implements IInputApplicationUserDto {
    id!: string | undefined;
    birthDate!: DateTime | undefined;
    birthDateHijri!: string | undefined;
    gender!: UserGender;
    idTypeId!: number | undefined;
    regionId!: number | undefined;
    cityId!: number | undefined;
    fullName!: string | undefined;
    userName!: string | undefined;
    firstNameEn!: string | undefined;
    thirdNameEn!: string | undefined;
    secondNameEn!: string | undefined;
    lastNameEn!: string | undefined;
    firstNameAr!: string | undefined;
    secondNameAr!: string | undefined;
    thirdNameAr!: string | undefined;
    lastNameAr!: string | undefined;
    idExpiryDate!: string | undefined;
    idIssueDate!: string | undefined;
    idIssuePlace!: string | undefined;
    placeOfBirth!: string | undefined;
    iqamaExpiryDateGregorian!: DateTime | undefined;
    iqamaIssueDateGregorian!: DateTime | undefined;
    iqamaIssuePlaceCode!: string | undefined;
    placeOfBirthCode!: string | undefined;
    nationalityId!: number | undefined;
    noIdentityReason!: number | undefined;
    validatedByYaqeen!: boolean | undefined;
    isAlive!: boolean | undefined;
    type!: string | undefined;
    email!: string | undefined;
    emailConfirmed!: boolean | undefined;
    phoneNumber!: string | undefined;
    phoneNumberConfirmed!: boolean | undefined;

    constructor(data?: IInputApplicationUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.birthDate = _data["birthDate"] ? DateTime.fromISO(_data["birthDate"].toString()) : <any>undefined;
            this.birthDateHijri = _data["birthDateHijri"];
            this.gender = _data["gender"];
            this.idTypeId = _data["idTypeId"];
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.fullName = _data["fullName"];
            this.userName = _data["userName"];
            this.firstNameEn = _data["firstNameEn"];
            this.thirdNameEn = _data["thirdNameEn"];
            this.secondNameEn = _data["secondNameEn"];
            this.lastNameEn = _data["lastNameEn"];
            this.firstNameAr = _data["firstNameAr"];
            this.secondNameAr = _data["secondNameAr"];
            this.thirdNameAr = _data["thirdNameAr"];
            this.lastNameAr = _data["lastNameAr"];
            this.idExpiryDate = _data["idExpiryDate"];
            this.idIssueDate = _data["idIssueDate"];
            this.idIssuePlace = _data["idIssuePlace"];
            this.placeOfBirth = _data["placeOfBirth"];
            this.iqamaExpiryDateGregorian = _data["iqamaExpiryDateGregorian"] ? DateTime.fromISO(_data["iqamaExpiryDateGregorian"].toString()) : <any>undefined;
            this.iqamaIssueDateGregorian = _data["iqamaIssueDateGregorian"] ? DateTime.fromISO(_data["iqamaIssueDateGregorian"].toString()) : <any>undefined;
            this.iqamaIssuePlaceCode = _data["iqamaIssuePlaceCode"];
            this.placeOfBirthCode = _data["placeOfBirthCode"];
            this.nationalityId = _data["nationalityId"];
            this.noIdentityReason = _data["noIdentityReason"];
            this.validatedByYaqeen = _data["validatedByYaqeen"];
            this.isAlive = _data["isAlive"];
            this.type = _data["type"];
            this.email = _data["email"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
        }
    }

    static fromJS(data: any): InputApplicationUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputApplicationUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["birthDate"] = this.birthDate ? this.birthDate.toString() : <any>undefined;
        data["birthDateHijri"] = this.birthDateHijri;
        data["gender"] = this.gender;
        data["idTypeId"] = this.idTypeId;
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["fullName"] = this.fullName;
        data["userName"] = this.userName;
        data["firstNameEn"] = this.firstNameEn;
        data["thirdNameEn"] = this.thirdNameEn;
        data["secondNameEn"] = this.secondNameEn;
        data["lastNameEn"] = this.lastNameEn;
        data["firstNameAr"] = this.firstNameAr;
        data["secondNameAr"] = this.secondNameAr;
        data["thirdNameAr"] = this.thirdNameAr;
        data["lastNameAr"] = this.lastNameAr;
        data["idExpiryDate"] = this.idExpiryDate;
        data["idIssueDate"] = this.idIssueDate;
        data["idIssuePlace"] = this.idIssuePlace;
        data["placeOfBirth"] = this.placeOfBirth;
        data["iqamaExpiryDateGregorian"] = this.iqamaExpiryDateGregorian ? this.iqamaExpiryDateGregorian.toString() : <any>undefined;
        data["iqamaIssueDateGregorian"] = this.iqamaIssueDateGregorian ? this.iqamaIssueDateGregorian.toString() : <any>undefined;
        data["iqamaIssuePlaceCode"] = this.iqamaIssuePlaceCode;
        data["placeOfBirthCode"] = this.placeOfBirthCode;
        data["nationalityId"] = this.nationalityId;
        data["noIdentityReason"] = this.noIdentityReason;
        data["validatedByYaqeen"] = this.validatedByYaqeen;
        data["isAlive"] = this.isAlive;
        data["type"] = this.type;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        return data;
    }
}

export interface IInputApplicationUserDto {
    id: string | undefined;
    birthDate: DateTime | undefined;
    birthDateHijri: string | undefined;
    gender: UserGender;
    idTypeId: number | undefined;
    regionId: number | undefined;
    cityId: number | undefined;
    fullName: string | undefined;
    userName: string | undefined;
    firstNameEn: string | undefined;
    thirdNameEn: string | undefined;
    secondNameEn: string | undefined;
    lastNameEn: string | undefined;
    firstNameAr: string | undefined;
    secondNameAr: string | undefined;
    thirdNameAr: string | undefined;
    lastNameAr: string | undefined;
    idExpiryDate: string | undefined;
    idIssueDate: string | undefined;
    idIssuePlace: string | undefined;
    placeOfBirth: string | undefined;
    iqamaExpiryDateGregorian: DateTime | undefined;
    iqamaIssueDateGregorian: DateTime | undefined;
    iqamaIssuePlaceCode: string | undefined;
    placeOfBirthCode: string | undefined;
    nationalityId: number | undefined;
    noIdentityReason: number | undefined;
    validatedByYaqeen: boolean | undefined;
    isAlive: boolean | undefined;
    type: string | undefined;
    email: string | undefined;
    emailConfirmed: boolean | undefined;
    phoneNumber: string | undefined;
    phoneNumberConfirmed: boolean | undefined;
}

export class InputAssetDto implements IInputAssetDto {
    assetTypeId!: number;
    assetSizeId!: number;
    assetApproximatelyAmount!: number;
    requestId!: string;
    animalOrAgriculturalAsset!: InputAnimalOrAgriculturalAssetDto;
    businessEntityAsset!: InputBusinessEntityAssetDto;
    fiscalAsset!: InputFiscalAssetDto;
    intellectualPropertyAndTrademarkAsset!: InputIntellectualPropertyAndTrademarkAssetDto;
    movableAsset!: InputMovableAssetDto;
    monetaryAsset!: InputMonetaryAssetDto;
    particularBenefitAsset!: InputParticularBenefitAssetDto;
    realEstateAsset!: InputRealEstateAssetDto;
    waqfId!: string | undefined;
    id!: string | undefined;

    constructor(data?: IInputAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetTypeId = _data["assetTypeId"];
            this.assetSizeId = _data["assetSizeId"];
            this.assetApproximatelyAmount = _data["assetApproximatelyAmount"];
            this.requestId = _data["requestId"];
            this.animalOrAgriculturalAsset = _data["animalOrAgriculturalAsset"] ? InputAnimalOrAgriculturalAssetDto.fromJS(_data["animalOrAgriculturalAsset"]) : <any>undefined;
            this.businessEntityAsset = _data["businessEntityAsset"] ? InputBusinessEntityAssetDto.fromJS(_data["businessEntityAsset"]) : <any>undefined;
            this.fiscalAsset = _data["fiscalAsset"] ? InputFiscalAssetDto.fromJS(_data["fiscalAsset"]) : <any>undefined;
            this.intellectualPropertyAndTrademarkAsset = _data["intellectualPropertyAndTrademarkAsset"] ? InputIntellectualPropertyAndTrademarkAssetDto.fromJS(_data["intellectualPropertyAndTrademarkAsset"]) : <any>undefined;
            this.movableAsset = _data["movableAsset"] ? InputMovableAssetDto.fromJS(_data["movableAsset"]) : <any>undefined;
            this.monetaryAsset = _data["monetaryAsset"] ? InputMonetaryAssetDto.fromJS(_data["monetaryAsset"]) : <any>undefined;
            this.particularBenefitAsset = _data["particularBenefitAsset"] ? InputParticularBenefitAssetDto.fromJS(_data["particularBenefitAsset"]) : <any>undefined;
            this.realEstateAsset = _data["realEstateAsset"] ? InputRealEstateAssetDto.fromJS(_data["realEstateAsset"]) : <any>undefined;
            this.waqfId = _data["waqfId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetTypeId"] = this.assetTypeId;
        data["assetSizeId"] = this.assetSizeId;
        data["assetApproximatelyAmount"] = this.assetApproximatelyAmount;
        data["requestId"] = this.requestId;
        data["animalOrAgriculturalAsset"] = this.animalOrAgriculturalAsset ? this.animalOrAgriculturalAsset.toJSON() : <any>undefined;
        data["businessEntityAsset"] = this.businessEntityAsset ? this.businessEntityAsset.toJSON() : <any>undefined;
        data["fiscalAsset"] = this.fiscalAsset ? this.fiscalAsset.toJSON() : <any>undefined;
        data["intellectualPropertyAndTrademarkAsset"] = this.intellectualPropertyAndTrademarkAsset ? this.intellectualPropertyAndTrademarkAsset.toJSON() : <any>undefined;
        data["movableAsset"] = this.movableAsset ? this.movableAsset.toJSON() : <any>undefined;
        data["monetaryAsset"] = this.monetaryAsset ? this.monetaryAsset.toJSON() : <any>undefined;
        data["particularBenefitAsset"] = this.particularBenefitAsset ? this.particularBenefitAsset.toJSON() : <any>undefined;
        data["realEstateAsset"] = this.realEstateAsset ? this.realEstateAsset.toJSON() : <any>undefined;
        data["waqfId"] = this.waqfId;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputAssetDto {
    assetTypeId: number;
    assetSizeId: number;
    assetApproximatelyAmount: number;
    requestId: string;
    animalOrAgriculturalAsset: InputAnimalOrAgriculturalAssetDto;
    businessEntityAsset: InputBusinessEntityAssetDto;
    fiscalAsset: InputFiscalAssetDto;
    intellectualPropertyAndTrademarkAsset: InputIntellectualPropertyAndTrademarkAssetDto;
    movableAsset: InputMovableAssetDto;
    monetaryAsset: InputMonetaryAssetDto;
    particularBenefitAsset: InputParticularBenefitAssetDto;
    realEstateAsset: InputRealEstateAssetDto;
    waqfId: string | undefined;
    id: string | undefined;
}

export class InputBusinessEntityAssetDto implements IInputBusinessEntityAssetDto {
    businessEntityName!: string;
    assetSubTypeId!: number;
    regionId!: number;
    cityId!: number;
    longitude!: number;
    latitude!: number;
    registrationDocumentNumber!: number;
    waqfResponserPortion!: number | undefined;
    waqfPercentageFromAsset!: number | undefined;
    commercialRegisterAttachmentId!: string;
    id!: string;

    constructor(data?: IInputBusinessEntityAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.businessEntityName = _data["businessEntityName"];
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.registrationDocumentNumber = _data["registrationDocumentNumber"];
            this.waqfResponserPortion = _data["waqfResponserPortion"];
            this.waqfPercentageFromAsset = _data["waqfPercentageFromAsset"];
            this.commercialRegisterAttachmentId = _data["commercialRegisterAttachmentId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputBusinessEntityAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputBusinessEntityAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessEntityName"] = this.businessEntityName;
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["registrationDocumentNumber"] = this.registrationDocumentNumber;
        data["waqfResponserPortion"] = this.waqfResponserPortion;
        data["waqfPercentageFromAsset"] = this.waqfPercentageFromAsset;
        data["commercialRegisterAttachmentId"] = this.commercialRegisterAttachmentId;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputBusinessEntityAssetDto {
    businessEntityName: string;
    assetSubTypeId: number;
    regionId: number;
    cityId: number;
    longitude: number;
    latitude: number;
    registrationDocumentNumber: number;
    waqfResponserPortion: number | undefined;
    waqfPercentageFromAsset: number | undefined;
    commercialRegisterAttachmentId: string;
    id: string;
}

export class InputEndowmentDto implements IInputEndowmentDto {
    endowmentName!: string | undefined;
    endowmentTypeId!: number | undefined;
    endowmentStatusId!: number | undefined;
    endowmentConditions!: string | undefined;
    seerRules!: string | undefined;
    endowmentDeedNumber!: string | undefined;
    endowmentDeedStatusName!: string | undefined;
    endowmentDeedTypeName!: string | undefined;
    endowmentDeedDate!: DateTime | undefined;
    endowmentDeedDateHijri!: string | undefined;
    endowmentDeedRegionId!: number | undefined;
    endowmentDeedCityId!: number | undefined;
    endowmentDeedAttachmentId!: string | undefined;
    issuanceCourtId!: number | undefined;
    deedNotes!: string | undefined;
    endowmentInitialDate!: string | undefined;
    endowmentRevenue!: string | undefined;
    acceptDonations!: boolean | undefined;
    acceptGiveaways!: boolean | undefined;
    requestId!: string | undefined;
    spendingCategoriesIds!: number[] | undefined;

    constructor(data?: IInputEndowmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.endowmentName = _data["endowmentName"];
            this.endowmentTypeId = _data["endowmentTypeId"];
            this.endowmentStatusId = _data["endowmentStatusId"];
            this.endowmentConditions = _data["endowmentConditions"];
            this.seerRules = _data["seerRules"];
            this.endowmentDeedNumber = _data["endowmentDeedNumber"];
            this.endowmentDeedStatusName = _data["endowmentDeedStatusName"];
            this.endowmentDeedTypeName = _data["endowmentDeedTypeName"];
            this.endowmentDeedDate = _data["endowmentDeedDate"] ? DateTime.fromISO(_data["endowmentDeedDate"].toString()) : <any>undefined;
            this.endowmentDeedDateHijri = _data["endowmentDeedDateHijri"];
            this.endowmentDeedRegionId = _data["endowmentDeedRegionId"];
            this.endowmentDeedCityId = _data["endowmentDeedCityId"];
            this.endowmentDeedAttachmentId = _data["endowmentDeedAttachmentId"];
            this.issuanceCourtId = _data["issuanceCourtId"];
            this.deedNotes = _data["deedNotes"];
            this.endowmentInitialDate = _data["endowmentInitialDate"];
            this.endowmentRevenue = _data["endowmentRevenue"];
            this.acceptDonations = _data["acceptDonations"];
            this.acceptGiveaways = _data["acceptGiveaways"];
            this.requestId = _data["requestId"];
            if (Array.isArray(_data["spendingCategoriesIds"])) {
                this.spendingCategoriesIds = [] as any;
                for (let item of _data["spendingCategoriesIds"])
                    this.spendingCategoriesIds!.push(item);
            }
        }
    }

    static fromJS(data: any): InputEndowmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputEndowmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endowmentName"] = this.endowmentName;
        data["endowmentTypeId"] = this.endowmentTypeId;
        data["endowmentStatusId"] = this.endowmentStatusId;
        data["endowmentConditions"] = this.endowmentConditions;
        data["seerRules"] = this.seerRules;
        data["endowmentDeedNumber"] = this.endowmentDeedNumber;
        data["endowmentDeedStatusName"] = this.endowmentDeedStatusName;
        data["endowmentDeedTypeName"] = this.endowmentDeedTypeName;
        data["endowmentDeedDate"] = this.endowmentDeedDate ? this.endowmentDeedDate.toString() : <any>undefined;
        data["endowmentDeedDateHijri"] = this.endowmentDeedDateHijri;
        data["endowmentDeedRegionId"] = this.endowmentDeedRegionId;
        data["endowmentDeedCityId"] = this.endowmentDeedCityId;
        data["endowmentDeedAttachmentId"] = this.endowmentDeedAttachmentId;
        data["issuanceCourtId"] = this.issuanceCourtId;
        data["deedNotes"] = this.deedNotes;
        data["endowmentInitialDate"] = this.endowmentInitialDate;
        data["endowmentRevenue"] = this.endowmentRevenue;
        data["acceptDonations"] = this.acceptDonations;
        data["acceptGiveaways"] = this.acceptGiveaways;
        data["requestId"] = this.requestId;
        if (Array.isArray(this.spendingCategoriesIds)) {
            data["spendingCategoriesIds"] = [];
            for (let item of this.spendingCategoriesIds)
                data["spendingCategoriesIds"].push(item);
        }
        return data;
    }
}

export interface IInputEndowmentDto {
    endowmentName: string | undefined;
    endowmentTypeId: number | undefined;
    endowmentStatusId: number | undefined;
    endowmentConditions: string | undefined;
    seerRules: string | undefined;
    endowmentDeedNumber: string | undefined;
    endowmentDeedStatusName: string | undefined;
    endowmentDeedTypeName: string | undefined;
    endowmentDeedDate: DateTime | undefined;
    endowmentDeedDateHijri: string | undefined;
    endowmentDeedRegionId: number | undefined;
    endowmentDeedCityId: number | undefined;
    endowmentDeedAttachmentId: string | undefined;
    issuanceCourtId: number | undefined;
    deedNotes: string | undefined;
    endowmentInitialDate: string | undefined;
    endowmentRevenue: string | undefined;
    acceptDonations: boolean | undefined;
    acceptGiveaways: boolean | undefined;
    requestId: string | undefined;
    spendingCategoriesIds: number[] | undefined;
}

export class InputEndowmentRegistrationRequestDto implements IInputEndowmentRegistrationRequestDto {
    applicantTypeId!: number | undefined;
    endowmentId!: string | undefined;
    endowmentData!: EndowmentData;
    assetsData!: EndowmentAssetData[] | undefined;
    endowmersData!: EndowmerData[] | undefined;
    seersData!: EndowmentSeerData[] | undefined;
    beneficiariesData!: EndowmentBeneficiaryData[] | undefined;
    id!: string;

    constructor(data?: IInputEndowmentRegistrationRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.applicantTypeId = _data["applicantTypeId"];
            this.endowmentId = _data["endowmentId"];
            this.endowmentData = _data["endowmentData"] ? EndowmentData.fromJS(_data["endowmentData"]) : <any>undefined;
            if (Array.isArray(_data["assetsData"])) {
                this.assetsData = [] as any;
                for (let item of _data["assetsData"])
                    this.assetsData!.push(EndowmentAssetData.fromJS(item));
            }
            if (Array.isArray(_data["endowmersData"])) {
                this.endowmersData = [] as any;
                for (let item of _data["endowmersData"])
                    this.endowmersData!.push(EndowmerData.fromJS(item));
            }
            if (Array.isArray(_data["seersData"])) {
                this.seersData = [] as any;
                for (let item of _data["seersData"])
                    this.seersData!.push(EndowmentSeerData.fromJS(item));
            }
            if (Array.isArray(_data["beneficiariesData"])) {
                this.beneficiariesData = [] as any;
                for (let item of _data["beneficiariesData"])
                    this.beneficiariesData!.push(EndowmentBeneficiaryData.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputEndowmentRegistrationRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputEndowmentRegistrationRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicantTypeId"] = this.applicantTypeId;
        data["endowmentId"] = this.endowmentId;
        data["endowmentData"] = this.endowmentData ? this.endowmentData.toJSON() : <any>undefined;
        if (Array.isArray(this.assetsData)) {
            data["assetsData"] = [];
            for (let item of this.assetsData)
                data["assetsData"].push(item.toJSON());
        }
        if (Array.isArray(this.endowmersData)) {
            data["endowmersData"] = [];
            for (let item of this.endowmersData)
                data["endowmersData"].push(item.toJSON());
        }
        if (Array.isArray(this.seersData)) {
            data["seersData"] = [];
            for (let item of this.seersData)
                data["seersData"].push(item.toJSON());
        }
        if (Array.isArray(this.beneficiariesData)) {
            data["beneficiariesData"] = [];
            for (let item of this.beneficiariesData)
                data["beneficiariesData"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IInputEndowmentRegistrationRequestDto {
    applicantTypeId: number | undefined;
    endowmentId: string | undefined;
    endowmentData: EndowmentData;
    assetsData: EndowmentAssetData[] | undefined;
    endowmersData: EndowmerData[] | undefined;
    seersData: EndowmentSeerData[] | undefined;
    beneficiariesData: EndowmentBeneficiaryData[] | undefined;
    id: string;
}

export class InputEndowmerDto implements IInputEndowmerDto {
    requestId!: string;
    endowmerId!: string | undefined;
    endowmentId!: string | undefined;
    endowmerTypeId!: number | undefined;
    prestigiousAttributeTypeId!: number | undefined;
    commercialNumber!: string | undefined;
    endowmentPartiesTypeId!: number | undefined;
    endowmerPerson!: InputApplicationUserDto;

    constructor(data?: IInputEndowmerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.endowmerId = _data["endowmerId"];
            this.endowmentId = _data["endowmentId"];
            this.endowmerTypeId = _data["endowmerTypeId"];
            this.prestigiousAttributeTypeId = _data["prestigiousAttributeTypeId"];
            this.commercialNumber = _data["commercialNumber"];
            this.endowmentPartiesTypeId = _data["endowmentPartiesTypeId"];
            this.endowmerPerson = _data["endowmerPerson"] ? InputApplicationUserDto.fromJS(_data["endowmerPerson"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InputEndowmerDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputEndowmerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["endowmerId"] = this.endowmerId;
        data["endowmentId"] = this.endowmentId;
        data["endowmerTypeId"] = this.endowmerTypeId;
        data["prestigiousAttributeTypeId"] = this.prestigiousAttributeTypeId;
        data["commercialNumber"] = this.commercialNumber;
        data["endowmentPartiesTypeId"] = this.endowmentPartiesTypeId;
        data["endowmerPerson"] = this.endowmerPerson ? this.endowmerPerson.toJSON() : <any>undefined;
        return data;
    }
}

export interface IInputEndowmerDto {
    requestId: string;
    endowmerId: string | undefined;
    endowmentId: string | undefined;
    endowmerTypeId: number | undefined;
    prestigiousAttributeTypeId: number | undefined;
    commercialNumber: string | undefined;
    endowmentPartiesTypeId: number | undefined;
    endowmerPerson: InputApplicationUserDto;
}

export class InputEndwomentRegistraionRequestApplicantDto implements IInputEndwomentRegistraionRequestApplicantDto {
    requestId!: string | undefined;
    applicantTypes!: string | undefined;
    applicant!: InputApplicantDto;
    applicantEndowmer!: InputApplicantEndowmerDto;
    applicantSeer!: InputApplicantSeerDto;
    applicantAgent!: InputApplicantAgentDto;

    constructor(data?: IInputEndwomentRegistraionRequestApplicantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.applicantTypes = _data["applicantTypes"];
            this.applicant = _data["applicant"] ? InputApplicantDto.fromJS(_data["applicant"]) : <any>undefined;
            this.applicantEndowmer = _data["applicantEndowmer"] ? InputApplicantEndowmerDto.fromJS(_data["applicantEndowmer"]) : <any>undefined;
            this.applicantSeer = _data["applicantSeer"] ? InputApplicantSeerDto.fromJS(_data["applicantSeer"]) : <any>undefined;
            this.applicantAgent = _data["applicantAgent"] ? InputApplicantAgentDto.fromJS(_data["applicantAgent"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InputEndwomentRegistraionRequestApplicantDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputEndwomentRegistraionRequestApplicantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["applicantTypes"] = this.applicantTypes;
        data["applicant"] = this.applicant ? this.applicant.toJSON() : <any>undefined;
        data["applicantEndowmer"] = this.applicantEndowmer ? this.applicantEndowmer.toJSON() : <any>undefined;
        data["applicantSeer"] = this.applicantSeer ? this.applicantSeer.toJSON() : <any>undefined;
        data["applicantAgent"] = this.applicantAgent ? this.applicantAgent.toJSON() : <any>undefined;
        return data;
    }
}

export interface IInputEndwomentRegistraionRequestApplicantDto {
    requestId: string | undefined;
    applicantTypes: string | undefined;
    applicant: InputApplicantDto;
    applicantEndowmer: InputApplicantEndowmerDto;
    applicantSeer: InputApplicantSeerDto;
    applicantAgent: InputApplicantAgentDto;
}

export class InputFileDto implements IInputFileDto {
    entityName!: string | undefined;
    id!: string | undefined;
    filters!: FileExtraData[] | undefined;

    constructor(data?: IInputFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.entityName = _data["entityName"];
            this.id = _data["id"];
            if (Array.isArray(_data["filters"])) {
                this.filters = [] as any;
                for (let item of _data["filters"])
                    this.filters!.push(FileExtraData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InputFileDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityName"] = this.entityName;
        data["id"] = this.id;
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInputFileDto {
    entityName: string | undefined;
    id: string | undefined;
    filters: FileExtraData[] | undefined;
}

export class InputFiscalAssetDto implements IInputFiscalAssetDto {
    assetSubTypeId!: number;
    investmentPortfolioNumber!: number;
    numberOfShare!: number;
    currentAssetValue!: number;
    fiscalAssetAttachementId!: string;
    id!: string;

    constructor(data?: IInputFiscalAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.investmentPortfolioNumber = _data["investmentPortfolioNumber"];
            this.numberOfShare = _data["numberOfShare"];
            this.currentAssetValue = _data["currentAssetValue"];
            this.fiscalAssetAttachementId = _data["fiscalAssetAttachementId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputFiscalAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputFiscalAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["investmentPortfolioNumber"] = this.investmentPortfolioNumber;
        data["numberOfShare"] = this.numberOfShare;
        data["currentAssetValue"] = this.currentAssetValue;
        data["fiscalAssetAttachementId"] = this.fiscalAssetAttachementId;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputFiscalAssetDto {
    assetSubTypeId: number;
    investmentPortfolioNumber: number;
    numberOfShare: number;
    currentAssetValue: number;
    fiscalAssetAttachementId: string;
    id: string;
}

export class InputIntellectualPropertyAndTrademarkAssetDto implements IInputIntellectualPropertyAndTrademarkAssetDto {
    ipatType!: string;
    ipatDescription!: string | undefined;
    ipatValue!: number | undefined;
    isDirectedBenefit!: boolean;
    id!: string;

    constructor(data?: IInputIntellectualPropertyAndTrademarkAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ipatType = _data["ipatType"];
            this.ipatDescription = _data["ipatDescription"];
            this.ipatValue = _data["ipatValue"];
            this.isDirectedBenefit = _data["isDirectedBenefit"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputIntellectualPropertyAndTrademarkAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputIntellectualPropertyAndTrademarkAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ipatType"] = this.ipatType;
        data["ipatDescription"] = this.ipatDescription;
        data["ipatValue"] = this.ipatValue;
        data["isDirectedBenefit"] = this.isDirectedBenefit;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputIntellectualPropertyAndTrademarkAssetDto {
    ipatType: string;
    ipatDescription: string | undefined;
    ipatValue: number | undefined;
    isDirectedBenefit: boolean;
    id: string;
}

export class InputLookUpDto implements IInputLookUpDto {
    lookUpName!: string | undefined;
    id!: number;
    filters!: LookupExtraData[] | undefined;

    constructor(data?: IInputLookUpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lookUpName = _data["lookUpName"];
            this.id = _data["id"];
            if (Array.isArray(_data["filters"])) {
                this.filters = [] as any;
                for (let item of _data["filters"])
                    this.filters!.push(LookupExtraData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InputLookUpDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputLookUpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lookUpName"] = this.lookUpName;
        data["id"] = this.id;
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInputLookUpDto {
    lookUpName: string | undefined;
    id: number;
    filters: LookupExtraData[] | undefined;
}

export class InputMonetaryAssetDto implements IInputMonetaryAssetDto {
    assetSubTypeId!: number;
    monetaryAssetAmount!: number;
    id!: string;

    constructor(data?: IInputMonetaryAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.monetaryAssetAmount = _data["monetaryAssetAmount"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputMonetaryAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputMonetaryAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["monetaryAssetAmount"] = this.monetaryAssetAmount;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputMonetaryAssetDto {
    assetSubTypeId: number;
    monetaryAssetAmount: number;
    id: string;
}

export class InputMovableAssetDto implements IInputMovableAssetDto {
    movableAssetType!: string;
    movableAssetDescription!: string | undefined;
    movableAssetOwnershipNumber!: number | undefined;
    movableValue!: number | undefined;
    isDirectedBenefit!: boolean;
    id!: string;

    constructor(data?: IInputMovableAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.movableAssetType = _data["movableAssetType"];
            this.movableAssetDescription = _data["movableAssetDescription"];
            this.movableAssetOwnershipNumber = _data["movableAssetOwnershipNumber"];
            this.movableValue = _data["movableValue"];
            this.isDirectedBenefit = _data["isDirectedBenefit"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputMovableAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputMovableAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["movableAssetType"] = this.movableAssetType;
        data["movableAssetDescription"] = this.movableAssetDescription;
        data["movableAssetOwnershipNumber"] = this.movableAssetOwnershipNumber;
        data["movableValue"] = this.movableValue;
        data["isDirectedBenefit"] = this.isDirectedBenefit;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputMovableAssetDto {
    movableAssetType: string;
    movableAssetDescription: string | undefined;
    movableAssetOwnershipNumber: number | undefined;
    movableValue: number | undefined;
    isDirectedBenefit: boolean;
    id: string;
}

export class InputOneAssetDto implements IInputOneAssetDto {
    requestId!: string;
    id!: string;

    constructor(data?: IInputOneAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputOneAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputOneAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputOneAssetDto {
    requestId: string;
    id: string;
}

export class InputParticularBenefitAssetDto implements IInputParticularBenefitAssetDto {
    benefitType!: string;
    benefitDescription!: string | undefined;
    benefitValue!: number | undefined;
    isDirectedBenefit!: boolean;
    id!: string;

    constructor(data?: IInputParticularBenefitAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.benefitType = _data["benefitType"];
            this.benefitDescription = _data["benefitDescription"];
            this.benefitValue = _data["benefitValue"];
            this.isDirectedBenefit = _data["isDirectedBenefit"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputParticularBenefitAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputParticularBenefitAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["benefitType"] = this.benefitType;
        data["benefitDescription"] = this.benefitDescription;
        data["benefitValue"] = this.benefitValue;
        data["isDirectedBenefit"] = this.isDirectedBenefit;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputParticularBenefitAssetDto {
    benefitType: string;
    benefitDescription: string | undefined;
    benefitValue: number | undefined;
    isDirectedBenefit: boolean;
    id: string;
}

export class InputRealEstateAssetDto implements IInputRealEstateAssetDto {
    id!: string;
    assetSubTypeId!: number;
    regionId!: number;
    cityId!: number;
    longitude!: number;
    latitude!: number;
    ownershipDeedAttachementId!: string;
    estimatedAmount!: number;

    constructor(data?: IInputRealEstateAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.ownershipDeedAttachementId = _data["ownershipDeedAttachementId"];
            this.estimatedAmount = _data["estimatedAmount"];
        }
    }

    static fromJS(data: any): InputRealEstateAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputRealEstateAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["ownershipDeedAttachementId"] = this.ownershipDeedAttachementId;
        data["estimatedAmount"] = this.estimatedAmount;
        return data;
    }
}

export interface IInputRealEstateAssetDto {
    id: string;
    assetSubTypeId: number;
    regionId: number;
    cityId: number;
    longitude: number;
    latitude: number;
    ownershipDeedAttachementId: string;
    estimatedAmount: number;
}

export class InputRemoveAssetDto implements IInputRemoveAssetDto {
    requestId!: string;
    id!: string;

    constructor(data?: IInputRemoveAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputRemoveAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputRemoveAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputRemoveAssetDto {
    requestId: string;
    id: string;
}

export class IntellectualPropertyAndTrademarkAssetData implements IIntellectualPropertyAndTrademarkAssetData {
    ipatType!: string | undefined;
    ipatValue!: string | undefined;
    isDirectedBenefit!: boolean | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IIntellectualPropertyAndTrademarkAssetData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ipatType = _data["ipatType"];
            this.ipatValue = _data["ipatValue"];
            this.isDirectedBenefit = _data["isDirectedBenefit"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): IntellectualPropertyAndTrademarkAssetData {
        data = typeof data === 'object' ? data : {};
        let result = new IntellectualPropertyAndTrademarkAssetData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ipatType"] = this.ipatType;
        data["ipatValue"] = this.ipatValue;
        data["isDirectedBenefit"] = this.isDirectedBenefit;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IIntellectualPropertyAndTrademarkAssetData {
    ipatType: string | undefined;
    ipatValue: string | undefined;
    isDirectedBenefit: boolean | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class IssuanceCourt implements IIssuanceCourt {
    mojCode!: number;
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: IIssuanceCourt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mojCode = _data["mojCode"];
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): IssuanceCourt {
        data = typeof data === 'object' ? data : {};
        let result = new IssuanceCourt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mojCode"] = this.mojCode;
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IIssuanceCourt {
    mojCode: number;
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class LanguageInfo implements ILanguageInfo {
    name!: string | undefined;
    displayName!: string | undefined;
    icon!: string | undefined;
    isDefault!: boolean;
    isEnabled!: boolean;
    isRightToLeft!: boolean;

    constructor(data?: ILanguageInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.icon = _data["icon"];
            this.isDefault = _data["isDefault"];
            this.isEnabled = _data["isEnabled"];
            this.isRightToLeft = _data["isRightToLeft"];
        }
    }

    static fromJS(data: any): LanguageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDefault"] = this.isDefault;
        data["isEnabled"] = this.isEnabled;
        data["isRightToLeft"] = this.isRightToLeft;
        return data;
    }
}

export interface ILanguageInfo {
    name: string | undefined;
    displayName: string | undefined;
    icon: string | undefined;
    isDefault: boolean;
    isEnabled: boolean;
    isRightToLeft: boolean;
}

export class LocalizationDto implements ILocalizationDto {
    currentCulture!: AppCulture;
    languages!: LanguageInfo[] | undefined;
    localizationDatas!: { [key: string]: { [key: string]: string; }; } | undefined;
    currentLanguage!: LanguageInfo;

    constructor(data?: ILocalizationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentCulture = _data["currentCulture"] ? AppCulture.fromJS(_data["currentCulture"]) : <any>undefined;
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(LanguageInfo.fromJS(item));
            }
            if (_data["localizationDatas"]) {
                this.localizationDatas = {} as any;
                for (let key in _data["localizationDatas"]) {
                    if (_data["localizationDatas"].hasOwnProperty(key))
                        (<any>this.localizationDatas)![key] = _data["localizationDatas"][key] !== undefined ? _data["localizationDatas"][key] : {};
                }
            }
            this.currentLanguage = _data["currentLanguage"] ? LanguageInfo.fromJS(_data["currentLanguage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LocalizationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentCulture"] = this.currentCulture ? this.currentCulture.toJSON() : <any>undefined;
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item.toJSON());
        }
        if (this.localizationDatas) {
            data["localizationDatas"] = {};
            for (let key in this.localizationDatas) {
                if (this.localizationDatas.hasOwnProperty(key))
                    (<any>data["localizationDatas"])[key] = (<any>this.localizationDatas)[key];
            }
        }
        data["currentLanguage"] = this.currentLanguage ? this.currentLanguage.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILocalizationDto {
    currentCulture: AppCulture;
    languages: LanguageInfo[] | undefined;
    localizationDatas: { [key: string]: { [key: string]: string; }; } | undefined;
    currentLanguage: LanguageInfo;
}

export class LoginModel implements ILoginModel {
    userName!: string;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        return data;
    }
}

export interface ILoginModel {
    userName: string;
}

export class LookupDto implements ILookupDto {
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    hint!: string | undefined;
    lookupExtraDatas!: LookupExtraData[] | undefined;
    id!: number;

    constructor(data?: ILookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.hint = _data["hint"];
            if (Array.isArray(_data["lookupExtraDatas"])) {
                this.lookupExtraDatas = [] as any;
                for (let item of _data["lookupExtraDatas"])
                    this.lookupExtraDatas!.push(LookupExtraData.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): LookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new LookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["hint"] = this.hint;
        if (Array.isArray(this.lookupExtraDatas)) {
            data["lookupExtraDatas"] = [];
            for (let item of this.lookupExtraDatas)
                data["lookupExtraDatas"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data;
    }
}

export interface ILookupDto {
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    hint: string | undefined;
    lookupExtraDatas: LookupExtraData[] | undefined;
    id: number;
}

export class LookupExtraData implements ILookupExtraData {
    dataName!: string | undefined;
    dataValue!: string | undefined;

    constructor(data?: ILookupExtraData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataName = _data["dataName"];
            this.dataValue = _data["dataValue"];
        }
    }

    static fromJS(data: any): LookupExtraData {
        data = typeof data === 'object' ? data : {};
        let result = new LookupExtraData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataName"] = this.dataName;
        data["dataValue"] = this.dataValue;
        return data;
    }
}

export interface ILookupExtraData {
    dataName: string | undefined;
    dataValue: string | undefined;
}

export class MonetaryAssetData implements IMonetaryAssetData {
    monetaryAssetAmount!: number | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IMonetaryAssetData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.monetaryAssetAmount = _data["monetaryAssetAmount"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): MonetaryAssetData {
        data = typeof data === 'object' ? data : {};
        let result = new MonetaryAssetData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["monetaryAssetAmount"] = this.monetaryAssetAmount;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IMonetaryAssetData {
    monetaryAssetAmount: number | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class MovableAssetData implements IMovableAssetData {
    movableAssetOwnershipNumber!: string | undefined;
    movableValue!: number | undefined;
    isDirectedBenefit!: boolean | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IMovableAssetData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.movableAssetOwnershipNumber = _data["movableAssetOwnershipNumber"];
            this.movableValue = _data["movableValue"];
            this.isDirectedBenefit = _data["isDirectedBenefit"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): MovableAssetData {
        data = typeof data === 'object' ? data : {};
        let result = new MovableAssetData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["movableAssetOwnershipNumber"] = this.movableAssetOwnershipNumber;
        data["movableValue"] = this.movableValue;
        data["isDirectedBenefit"] = this.isDirectedBenefit;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IMovableAssetData {
    movableAssetOwnershipNumber: string | undefined;
    movableValue: number | undefined;
    isDirectedBenefit: boolean | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class Nationality implements INationality {
    yaqeenCode!: string | undefined;
    hrsdCode!: string | undefined;
    nafathCode!: string | undefined;
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: INationality) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.yaqeenCode = _data["yaqeenCode"];
            this.hrsdCode = _data["hrsdCode"];
            this.nafathCode = _data["nafathCode"];
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Nationality {
        data = typeof data === 'object' ? data : {};
        let result = new Nationality();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["yaqeenCode"] = this.yaqeenCode;
        data["hrsdCode"] = this.hrsdCode;
        data["nafathCode"] = this.nafathCode;
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface INationality {
    yaqeenCode: string | undefined;
    hrsdCode: string | undefined;
    nafathCode: string | undefined;
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class NotificationMessageDto implements INotificationMessageDto {
    userName!: string | undefined;
    subject!: string | undefined;
    body!: string | undefined;
    provider!: string | undefined;
    referenceNumber!: string | undefined;
    errorType!: string | undefined;
    errorCode!: string | undefined;
    errorMessage!: string | undefined;
    reTryCounter!: number | undefined;
    machineName!: string | undefined;
    isSent!: boolean | undefined;
    sentDatetime!: DateTime | undefined;
    parameters!: TemplateParameter[] | undefined;
    notificationTemplateId!: number;
    id!: string;

    constructor(data?: INotificationMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.subject = _data["subject"];
            this.body = _data["body"];
            this.provider = _data["provider"];
            this.referenceNumber = _data["referenceNumber"];
            this.errorType = _data["errorType"];
            this.errorCode = _data["errorCode"];
            this.errorMessage = _data["errorMessage"];
            this.reTryCounter = _data["reTryCounter"];
            this.machineName = _data["machineName"];
            this.isSent = _data["isSent"];
            this.sentDatetime = _data["sentDatetime"] ? DateTime.fromISO(_data["sentDatetime"].toString()) : <any>undefined;
            if (Array.isArray(_data["parameters"])) {
                this.parameters = [] as any;
                for (let item of _data["parameters"])
                    this.parameters!.push(TemplateParameter.fromJS(item));
            }
            this.notificationTemplateId = _data["notificationTemplateId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): NotificationMessageDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["subject"] = this.subject;
        data["body"] = this.body;
        data["provider"] = this.provider;
        data["referenceNumber"] = this.referenceNumber;
        data["errorType"] = this.errorType;
        data["errorCode"] = this.errorCode;
        data["errorMessage"] = this.errorMessage;
        data["reTryCounter"] = this.reTryCounter;
        data["machineName"] = this.machineName;
        data["isSent"] = this.isSent;
        data["sentDatetime"] = this.sentDatetime ? this.sentDatetime.toString() : <any>undefined;
        if (Array.isArray(this.parameters)) {
            data["parameters"] = [];
            for (let item of this.parameters)
                data["parameters"].push(item.toJSON());
        }
        data["notificationTemplateId"] = this.notificationTemplateId;
        data["id"] = this.id;
        return data;
    }
}

export interface INotificationMessageDto {
    userName: string | undefined;
    subject: string | undefined;
    body: string | undefined;
    provider: string | undefined;
    referenceNumber: string | undefined;
    errorType: string | undefined;
    errorCode: string | undefined;
    errorMessage: string | undefined;
    reTryCounter: number | undefined;
    machineName: string | undefined;
    isSent: boolean | undefined;
    sentDatetime: DateTime | undefined;
    parameters: TemplateParameter[] | undefined;
    notificationTemplateId: number;
    id: string;
}

export class OtpGenerationOutputDto implements IOtpGenerationOutputDto {
    code!: string | undefined;
    url!: string | undefined;
    hash!: string | undefined;
    expireDate!: DateTime;
    validityMinutes!: number;

    constructor(data?: IOtpGenerationOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.url = _data["url"];
            this.hash = _data["hash"];
            this.expireDate = _data["expireDate"] ? DateTime.fromISO(_data["expireDate"].toString()) : <any>undefined;
            this.validityMinutes = _data["validityMinutes"];
        }
    }

    static fromJS(data: any): OtpGenerationOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new OtpGenerationOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["url"] = this.url;
        data["hash"] = this.hash;
        data["expireDate"] = this.expireDate ? this.expireDate.toString() : <any>undefined;
        data["validityMinutes"] = this.validityMinutes;
        return data;
    }
}

export interface IOtpGenerationOutputDto {
    code: string | undefined;
    url: string | undefined;
    hash: string | undefined;
    expireDate: DateTime;
    validityMinutes: number;
}

export class OtpVerificationOutputDto implements IOtpVerificationOutputDto {
    id!: number;
    hash!: string | undefined;
    expireDate!: DateTime;
    validityMinutes!: number;

    constructor(data?: IOtpVerificationOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.hash = _data["hash"];
            this.expireDate = _data["expireDate"] ? DateTime.fromISO(_data["expireDate"].toString()) : <any>undefined;
            this.validityMinutes = _data["validityMinutes"];
        }
    }

    static fromJS(data: any): OtpVerificationOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new OtpVerificationOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hash"] = this.hash;
        data["expireDate"] = this.expireDate ? this.expireDate.toString() : <any>undefined;
        data["validityMinutes"] = this.validityMinutes;
        return data;
    }
}

export interface IOtpVerificationOutputDto {
    id: number;
    hash: string | undefined;
    expireDate: DateTime;
    validityMinutes: number;
}

export class OutputApplicationUserDto implements IOutputApplicationUserDto {
    id!: string | undefined;
    idNumber!: string | undefined;
    birthDate!: DateTime | undefined;
    birthDateHijri!: string | undefined;
    gender!: UserGender;
    idTypeId!: number | undefined;
    regionId!: number | undefined;
    region!: LookupDto;
    cityId!: number | undefined;
    city!: LookupDto;
    fullName!: string | undefined;
    userName!: string | undefined;
    firstNameEn!: string | undefined;
    thirdNameEn!: string | undefined;
    secondNameEn!: string | undefined;
    lastNameEn!: string | undefined;
    firstNameAr!: string | undefined;
    secondNameAr!: string | undefined;
    thirdNameAr!: string | undefined;
    lastNameAr!: string | undefined;
    idExpiryDate!: string | undefined;
    idIssueDate!: string | undefined;
    idIssuePlace!: string | undefined;
    placeOfBirth!: string | undefined;
    iqamaExpiryDateGregorian!: DateTime | undefined;
    iqamaIssueDateGregorian!: DateTime | undefined;
    iqamaIssuePlaceCode!: string | undefined;
    placeOfBirthCode!: string | undefined;
    nationalityId!: number | undefined;
    nationality!: LookupDto;
    noIdentityReason!: number | undefined;
    validatedByYaqeen!: boolean | undefined;
    isAlive!: boolean | undefined;
    type!: string | undefined;
    email!: string | undefined;
    emailConfirmed!: boolean | undefined;
    phoneNumber!: string | undefined;
    phoneNumberConfirmed!: boolean | undefined;

    constructor(data?: IOutputApplicationUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.idNumber = _data["idNumber"];
            this.birthDate = _data["birthDate"] ? DateTime.fromISO(_data["birthDate"].toString()) : <any>undefined;
            this.birthDateHijri = _data["birthDateHijri"];
            this.gender = _data["gender"];
            this.idTypeId = _data["idTypeId"];
            this.regionId = _data["regionId"];
            this.region = _data["region"] ? LookupDto.fromJS(_data["region"]) : <any>undefined;
            this.cityId = _data["cityId"];
            this.city = _data["city"] ? LookupDto.fromJS(_data["city"]) : <any>undefined;
            this.fullName = _data["fullName"];
            this.userName = _data["userName"];
            this.firstNameEn = _data["firstNameEn"];
            this.thirdNameEn = _data["thirdNameEn"];
            this.secondNameEn = _data["secondNameEn"];
            this.lastNameEn = _data["lastNameEn"];
            this.firstNameAr = _data["firstNameAr"];
            this.secondNameAr = _data["secondNameAr"];
            this.thirdNameAr = _data["thirdNameAr"];
            this.lastNameAr = _data["lastNameAr"];
            this.idExpiryDate = _data["idExpiryDate"];
            this.idIssueDate = _data["idIssueDate"];
            this.idIssuePlace = _data["idIssuePlace"];
            this.placeOfBirth = _data["placeOfBirth"];
            this.iqamaExpiryDateGregorian = _data["iqamaExpiryDateGregorian"] ? DateTime.fromISO(_data["iqamaExpiryDateGregorian"].toString()) : <any>undefined;
            this.iqamaIssueDateGregorian = _data["iqamaIssueDateGregorian"] ? DateTime.fromISO(_data["iqamaIssueDateGregorian"].toString()) : <any>undefined;
            this.iqamaIssuePlaceCode = _data["iqamaIssuePlaceCode"];
            this.placeOfBirthCode = _data["placeOfBirthCode"];
            this.nationalityId = _data["nationalityId"];
            this.nationality = _data["nationality"] ? LookupDto.fromJS(_data["nationality"]) : <any>undefined;
            this.noIdentityReason = _data["noIdentityReason"];
            this.validatedByYaqeen = _data["validatedByYaqeen"];
            this.isAlive = _data["isAlive"];
            this.type = _data["type"];
            this.email = _data["email"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
        }
    }

    static fromJS(data: any): OutputApplicationUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputApplicationUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["idNumber"] = this.idNumber;
        data["birthDate"] = this.birthDate ? this.birthDate.toString() : <any>undefined;
        data["birthDateHijri"] = this.birthDateHijri;
        data["gender"] = this.gender;
        data["idTypeId"] = this.idTypeId;
        data["regionId"] = this.regionId;
        data["region"] = this.region ? this.region.toJSON() : <any>undefined;
        data["cityId"] = this.cityId;
        data["city"] = this.city ? this.city.toJSON() : <any>undefined;
        data["fullName"] = this.fullName;
        data["userName"] = this.userName;
        data["firstNameEn"] = this.firstNameEn;
        data["thirdNameEn"] = this.thirdNameEn;
        data["secondNameEn"] = this.secondNameEn;
        data["lastNameEn"] = this.lastNameEn;
        data["firstNameAr"] = this.firstNameAr;
        data["secondNameAr"] = this.secondNameAr;
        data["thirdNameAr"] = this.thirdNameAr;
        data["lastNameAr"] = this.lastNameAr;
        data["idExpiryDate"] = this.idExpiryDate;
        data["idIssueDate"] = this.idIssueDate;
        data["idIssuePlace"] = this.idIssuePlace;
        data["placeOfBirth"] = this.placeOfBirth;
        data["iqamaExpiryDateGregorian"] = this.iqamaExpiryDateGregorian ? this.iqamaExpiryDateGregorian.toString() : <any>undefined;
        data["iqamaIssueDateGregorian"] = this.iqamaIssueDateGregorian ? this.iqamaIssueDateGregorian.toString() : <any>undefined;
        data["iqamaIssuePlaceCode"] = this.iqamaIssuePlaceCode;
        data["placeOfBirthCode"] = this.placeOfBirthCode;
        data["nationalityId"] = this.nationalityId;
        data["nationality"] = this.nationality ? this.nationality.toJSON() : <any>undefined;
        data["noIdentityReason"] = this.noIdentityReason;
        data["validatedByYaqeen"] = this.validatedByYaqeen;
        data["isAlive"] = this.isAlive;
        data["type"] = this.type;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        return data;
    }
}

export interface IOutputApplicationUserDto {
    id: string | undefined;
    idNumber: string | undefined;
    birthDate: DateTime | undefined;
    birthDateHijri: string | undefined;
    gender: UserGender;
    idTypeId: number | undefined;
    regionId: number | undefined;
    region: LookupDto;
    cityId: number | undefined;
    city: LookupDto;
    fullName: string | undefined;
    userName: string | undefined;
    firstNameEn: string | undefined;
    thirdNameEn: string | undefined;
    secondNameEn: string | undefined;
    lastNameEn: string | undefined;
    firstNameAr: string | undefined;
    secondNameAr: string | undefined;
    thirdNameAr: string | undefined;
    lastNameAr: string | undefined;
    idExpiryDate: string | undefined;
    idIssueDate: string | undefined;
    idIssuePlace: string | undefined;
    placeOfBirth: string | undefined;
    iqamaExpiryDateGregorian: DateTime | undefined;
    iqamaIssueDateGregorian: DateTime | undefined;
    iqamaIssuePlaceCode: string | undefined;
    placeOfBirthCode: string | undefined;
    nationalityId: number | undefined;
    nationality: LookupDto;
    noIdentityReason: number | undefined;
    validatedByYaqeen: boolean | undefined;
    isAlive: boolean | undefined;
    type: string | undefined;
    email: string | undefined;
    emailConfirmed: boolean | undefined;
    phoneNumber: string | undefined;
    phoneNumberConfirmed: boolean | undefined;
}

export class OutputAssetDto implements IOutputAssetDto {
    endowmentId!: string | undefined;
    assetTypeId!: number | undefined;
    assetSubTypeId!: number | undefined;
    assetSizeId!: number | undefined;
    assetApproximatelyAmount!: number | undefined;
    assetSubTypeDescription!: string | undefined;
    assetDescription!: string | undefined;
    assetDeedNumber!: string | undefined;
    assetIssuanceCourt!: string | undefined;
    assetDeedDate!: DateTime | undefined;
    assetDeedDateHijri!: string | undefined;
    requestId!: string | undefined;
    animalOrAgriculturalAsset!: InputAnimalOrAgriculturalAssetDto;
    businessEntityAsset!: InputBusinessEntityAssetDto;
    fiscalAsset!: InputFiscalAssetDto;
    intellectualPropertyAndTrademarkAsset!: InputIntellectualPropertyAndTrademarkAssetDto;
    movableAsset!: InputMovableAssetDto;
    monetaryAsset!: InputMonetaryAssetDto;
    particularBenefitAsset!: InputParticularBenefitAssetDto;
    realEstateAsset!: InputRealEstateAssetDto;
    id!: string | undefined;

    constructor(data?: IOutputAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.endowmentId = _data["endowmentId"];
            this.assetTypeId = _data["assetTypeId"];
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.assetSizeId = _data["assetSizeId"];
            this.assetApproximatelyAmount = _data["assetApproximatelyAmount"];
            this.assetSubTypeDescription = _data["assetSubTypeDescription"];
            this.assetDescription = _data["assetDescription"];
            this.assetDeedNumber = _data["assetDeedNumber"];
            this.assetIssuanceCourt = _data["assetIssuanceCourt"];
            this.assetDeedDate = _data["assetDeedDate"] ? DateTime.fromISO(_data["assetDeedDate"].toString()) : <any>undefined;
            this.assetDeedDateHijri = _data["assetDeedDateHijri"];
            this.requestId = _data["requestId"];
            this.animalOrAgriculturalAsset = _data["animalOrAgriculturalAsset"] ? InputAnimalOrAgriculturalAssetDto.fromJS(_data["animalOrAgriculturalAsset"]) : <any>undefined;
            this.businessEntityAsset = _data["businessEntityAsset"] ? InputBusinessEntityAssetDto.fromJS(_data["businessEntityAsset"]) : <any>undefined;
            this.fiscalAsset = _data["fiscalAsset"] ? InputFiscalAssetDto.fromJS(_data["fiscalAsset"]) : <any>undefined;
            this.intellectualPropertyAndTrademarkAsset = _data["intellectualPropertyAndTrademarkAsset"] ? InputIntellectualPropertyAndTrademarkAssetDto.fromJS(_data["intellectualPropertyAndTrademarkAsset"]) : <any>undefined;
            this.movableAsset = _data["movableAsset"] ? InputMovableAssetDto.fromJS(_data["movableAsset"]) : <any>undefined;
            this.monetaryAsset = _data["monetaryAsset"] ? InputMonetaryAssetDto.fromJS(_data["monetaryAsset"]) : <any>undefined;
            this.particularBenefitAsset = _data["particularBenefitAsset"] ? InputParticularBenefitAssetDto.fromJS(_data["particularBenefitAsset"]) : <any>undefined;
            this.realEstateAsset = _data["realEstateAsset"] ? InputRealEstateAssetDto.fromJS(_data["realEstateAsset"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OutputAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endowmentId"] = this.endowmentId;
        data["assetTypeId"] = this.assetTypeId;
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["assetSizeId"] = this.assetSizeId;
        data["assetApproximatelyAmount"] = this.assetApproximatelyAmount;
        data["assetSubTypeDescription"] = this.assetSubTypeDescription;
        data["assetDescription"] = this.assetDescription;
        data["assetDeedNumber"] = this.assetDeedNumber;
        data["assetIssuanceCourt"] = this.assetIssuanceCourt;
        data["assetDeedDate"] = this.assetDeedDate ? this.assetDeedDate.toString() : <any>undefined;
        data["assetDeedDateHijri"] = this.assetDeedDateHijri;
        data["requestId"] = this.requestId;
        data["animalOrAgriculturalAsset"] = this.animalOrAgriculturalAsset ? this.animalOrAgriculturalAsset.toJSON() : <any>undefined;
        data["businessEntityAsset"] = this.businessEntityAsset ? this.businessEntityAsset.toJSON() : <any>undefined;
        data["fiscalAsset"] = this.fiscalAsset ? this.fiscalAsset.toJSON() : <any>undefined;
        data["intellectualPropertyAndTrademarkAsset"] = this.intellectualPropertyAndTrademarkAsset ? this.intellectualPropertyAndTrademarkAsset.toJSON() : <any>undefined;
        data["movableAsset"] = this.movableAsset ? this.movableAsset.toJSON() : <any>undefined;
        data["monetaryAsset"] = this.monetaryAsset ? this.monetaryAsset.toJSON() : <any>undefined;
        data["particularBenefitAsset"] = this.particularBenefitAsset ? this.particularBenefitAsset.toJSON() : <any>undefined;
        data["realEstateAsset"] = this.realEstateAsset ? this.realEstateAsset.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IOutputAssetDto {
    endowmentId: string | undefined;
    assetTypeId: number | undefined;
    assetSubTypeId: number | undefined;
    assetSizeId: number | undefined;
    assetApproximatelyAmount: number | undefined;
    assetSubTypeDescription: string | undefined;
    assetDescription: string | undefined;
    assetDeedNumber: string | undefined;
    assetIssuanceCourt: string | undefined;
    assetDeedDate: DateTime | undefined;
    assetDeedDateHijri: string | undefined;
    requestId: string | undefined;
    animalOrAgriculturalAsset: InputAnimalOrAgriculturalAssetDto;
    businessEntityAsset: InputBusinessEntityAssetDto;
    fiscalAsset: InputFiscalAssetDto;
    intellectualPropertyAndTrademarkAsset: InputIntellectualPropertyAndTrademarkAssetDto;
    movableAsset: InputMovableAssetDto;
    monetaryAsset: InputMonetaryAssetDto;
    particularBenefitAsset: InputParticularBenefitAssetDto;
    realEstateAsset: InputRealEstateAssetDto;
    id: string | undefined;
}

export class OutputBeneficiaryDto implements IOutputBeneficiaryDto {
    beneficiaryId!: string | undefined;
    endowmentId!: string | undefined;
    beneficiaryName!: string | undefined;
    spendingCategoryId!: number | undefined;
    isBeneficiaryInsideKsa!: boolean | undefined;
    beneficiaryPerson!: OutputApplicationUserDto;

    constructor(data?: IOutputBeneficiaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beneficiaryId = _data["beneficiaryId"];
            this.endowmentId = _data["endowmentId"];
            this.beneficiaryName = _data["beneficiaryName"];
            this.spendingCategoryId = _data["spendingCategoryId"];
            this.isBeneficiaryInsideKsa = _data["isBeneficiaryInsideKsa"];
            this.beneficiaryPerson = _data["beneficiaryPerson"] ? OutputApplicationUserDto.fromJS(_data["beneficiaryPerson"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OutputBeneficiaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputBeneficiaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beneficiaryId"] = this.beneficiaryId;
        data["endowmentId"] = this.endowmentId;
        data["beneficiaryName"] = this.beneficiaryName;
        data["spendingCategoryId"] = this.spendingCategoryId;
        data["isBeneficiaryInsideKsa"] = this.isBeneficiaryInsideKsa;
        data["beneficiaryPerson"] = this.beneficiaryPerson ? this.beneficiaryPerson.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOutputBeneficiaryDto {
    beneficiaryId: string | undefined;
    endowmentId: string | undefined;
    beneficiaryName: string | undefined;
    spendingCategoryId: number | undefined;
    isBeneficiaryInsideKsa: boolean | undefined;
    beneficiaryPerson: OutputApplicationUserDto;
}

export class OutputEndowmentDetailsDto implements IOutputEndowmentDetailsDto {
    endowmentName!: string | undefined;
    endowmentTypeId!: number | undefined;
    endowmentStatusId!: number | undefined;
    endowmentConditions!: string | undefined;
    seerRules!: string | undefined;
    endowmentDeedNumber!: string | undefined;
    endowmentDeedStatusName!: string | undefined;
    endowmentDeedTypeName!: string | undefined;
    endowmentDeedDate!: DateTime | undefined;
    endowmentDeedDateHijri!: string | undefined;
    endowmentDeedRegionId!: number | undefined;
    endowmentDeedCityId!: number | undefined;
    endowmentDeedAttachmentId!: string | undefined;
    issuanceCourtId!: number | undefined;
    deedNotes!: string | undefined;
    endowmentInitialDate!: string | undefined;
    endowmentRevenue!: string | undefined;
    acceptDonations!: boolean | undefined;
    acceptGiveaways!: boolean | undefined;
    requestId!: string | undefined;
    spendingCategoriesIds!: number[] | undefined;

    constructor(data?: IOutputEndowmentDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.endowmentName = _data["endowmentName"];
            this.endowmentTypeId = _data["endowmentTypeId"];
            this.endowmentStatusId = _data["endowmentStatusId"];
            this.endowmentConditions = _data["endowmentConditions"];
            this.seerRules = _data["seerRules"];
            this.endowmentDeedNumber = _data["endowmentDeedNumber"];
            this.endowmentDeedStatusName = _data["endowmentDeedStatusName"];
            this.endowmentDeedTypeName = _data["endowmentDeedTypeName"];
            this.endowmentDeedDate = _data["endowmentDeedDate"] ? DateTime.fromISO(_data["endowmentDeedDate"].toString()) : <any>undefined;
            this.endowmentDeedDateHijri = _data["endowmentDeedDateHijri"];
            this.endowmentDeedRegionId = _data["endowmentDeedRegionId"];
            this.endowmentDeedCityId = _data["endowmentDeedCityId"];
            this.endowmentDeedAttachmentId = _data["endowmentDeedAttachmentId"];
            this.issuanceCourtId = _data["issuanceCourtId"];
            this.deedNotes = _data["deedNotes"];
            this.endowmentInitialDate = _data["endowmentInitialDate"];
            this.endowmentRevenue = _data["endowmentRevenue"];
            this.acceptDonations = _data["acceptDonations"];
            this.acceptGiveaways = _data["acceptGiveaways"];
            this.requestId = _data["requestId"];
            if (Array.isArray(_data["spendingCategoriesIds"])) {
                this.spendingCategoriesIds = [] as any;
                for (let item of _data["spendingCategoriesIds"])
                    this.spendingCategoriesIds!.push(item);
            }
        }
    }

    static fromJS(data: any): OutputEndowmentDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputEndowmentDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endowmentName"] = this.endowmentName;
        data["endowmentTypeId"] = this.endowmentTypeId;
        data["endowmentStatusId"] = this.endowmentStatusId;
        data["endowmentConditions"] = this.endowmentConditions;
        data["seerRules"] = this.seerRules;
        data["endowmentDeedNumber"] = this.endowmentDeedNumber;
        data["endowmentDeedStatusName"] = this.endowmentDeedStatusName;
        data["endowmentDeedTypeName"] = this.endowmentDeedTypeName;
        data["endowmentDeedDate"] = this.endowmentDeedDate ? this.endowmentDeedDate.toString() : <any>undefined;
        data["endowmentDeedDateHijri"] = this.endowmentDeedDateHijri;
        data["endowmentDeedRegionId"] = this.endowmentDeedRegionId;
        data["endowmentDeedCityId"] = this.endowmentDeedCityId;
        data["endowmentDeedAttachmentId"] = this.endowmentDeedAttachmentId;
        data["issuanceCourtId"] = this.issuanceCourtId;
        data["deedNotes"] = this.deedNotes;
        data["endowmentInitialDate"] = this.endowmentInitialDate;
        data["endowmentRevenue"] = this.endowmentRevenue;
        data["acceptDonations"] = this.acceptDonations;
        data["acceptGiveaways"] = this.acceptGiveaways;
        data["requestId"] = this.requestId;
        if (Array.isArray(this.spendingCategoriesIds)) {
            data["spendingCategoriesIds"] = [];
            for (let item of this.spendingCategoriesIds)
                data["spendingCategoriesIds"].push(item);
        }
        return data;
    }
}

export interface IOutputEndowmentDetailsDto {
    endowmentName: string | undefined;
    endowmentTypeId: number | undefined;
    endowmentStatusId: number | undefined;
    endowmentConditions: string | undefined;
    seerRules: string | undefined;
    endowmentDeedNumber: string | undefined;
    endowmentDeedStatusName: string | undefined;
    endowmentDeedTypeName: string | undefined;
    endowmentDeedDate: DateTime | undefined;
    endowmentDeedDateHijri: string | undefined;
    endowmentDeedRegionId: number | undefined;
    endowmentDeedCityId: number | undefined;
    endowmentDeedAttachmentId: string | undefined;
    issuanceCourtId: number | undefined;
    deedNotes: string | undefined;
    endowmentInitialDate: string | undefined;
    endowmentRevenue: string | undefined;
    acceptDonations: boolean | undefined;
    acceptGiveaways: boolean | undefined;
    requestId: string | undefined;
    spendingCategoriesIds: number[] | undefined;
}

export class OutputEndowmerDto implements IOutputEndowmerDto {
    endowmerId!: string | undefined;
    endowmentId!: string;
    endowmerTypeId!: number | undefined;
    prestigiousAttributeTypeId!: number | undefined;
    commercialNumber!: string | undefined;
    endowmentPartiesTypeId!: number | undefined;
    isMainApplicant!: boolean;
    endowmerPerson!: OutputApplicationUserDto;

    constructor(data?: IOutputEndowmerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.endowmerId = _data["endowmerId"];
            this.endowmentId = _data["endowmentId"];
            this.endowmerTypeId = _data["endowmerTypeId"];
            this.prestigiousAttributeTypeId = _data["prestigiousAttributeTypeId"];
            this.commercialNumber = _data["commercialNumber"];
            this.endowmentPartiesTypeId = _data["endowmentPartiesTypeId"];
            this.isMainApplicant = _data["isMainApplicant"];
            this.endowmerPerson = _data["endowmerPerson"] ? OutputApplicationUserDto.fromJS(_data["endowmerPerson"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OutputEndowmerDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputEndowmerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endowmerId"] = this.endowmerId;
        data["endowmentId"] = this.endowmentId;
        data["endowmerTypeId"] = this.endowmerTypeId;
        data["prestigiousAttributeTypeId"] = this.prestigiousAttributeTypeId;
        data["commercialNumber"] = this.commercialNumber;
        data["endowmentPartiesTypeId"] = this.endowmentPartiesTypeId;
        data["isMainApplicant"] = this.isMainApplicant;
        data["endowmerPerson"] = this.endowmerPerson ? this.endowmerPerson.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOutputEndowmerDto {
    endowmerId: string | undefined;
    endowmentId: string;
    endowmerTypeId: number | undefined;
    prestigiousAttributeTypeId: number | undefined;
    commercialNumber: string | undefined;
    endowmentPartiesTypeId: number | undefined;
    isMainApplicant: boolean;
    endowmerPerson: OutputApplicationUserDto;
}

export class OutputEndwomentRegistrationRequestDto implements IOutputEndwomentRegistrationRequestDto {
    requestId!: string | undefined;
    applicantTypes!: string | undefined;
    applicant!: InputApplicantDto;
    applicantEndowmer!: InputApplicantEndowmerDto;
    applicantSeer!: InputApplicantSeerDto;
    applicantAgent!: InputApplicantAgentDto;
    id!: string;

    constructor(data?: IOutputEndwomentRegistrationRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.applicantTypes = _data["applicantTypes"];
            this.applicant = _data["applicant"] ? InputApplicantDto.fromJS(_data["applicant"]) : <any>undefined;
            this.applicantEndowmer = _data["applicantEndowmer"] ? InputApplicantEndowmerDto.fromJS(_data["applicantEndowmer"]) : <any>undefined;
            this.applicantSeer = _data["applicantSeer"] ? InputApplicantSeerDto.fromJS(_data["applicantSeer"]) : <any>undefined;
            this.applicantAgent = _data["applicantAgent"] ? InputApplicantAgentDto.fromJS(_data["applicantAgent"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OutputEndwomentRegistrationRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputEndwomentRegistrationRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["applicantTypes"] = this.applicantTypes;
        data["applicant"] = this.applicant ? this.applicant.toJSON() : <any>undefined;
        data["applicantEndowmer"] = this.applicantEndowmer ? this.applicantEndowmer.toJSON() : <any>undefined;
        data["applicantSeer"] = this.applicantSeer ? this.applicantSeer.toJSON() : <any>undefined;
        data["applicantAgent"] = this.applicantAgent ? this.applicantAgent.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IOutputEndwomentRegistrationRequestDto {
    requestId: string | undefined;
    applicantTypes: string | undefined;
    applicant: InputApplicantDto;
    applicantEndowmer: InputApplicantEndowmerDto;
    applicantSeer: InputApplicantSeerDto;
    applicantAgent: InputApplicantAgentDto;
    id: string;
}

export class OutputFileDto implements IOutputFileDto {
    id!: string;
    fileData!: string | undefined;
    fileName!: string | undefined;
    size!: number;
    contentType!: string | undefined;
    extraDatas!: FileExtraData[] | undefined;

    constructor(data?: IOutputFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fileData = _data["fileData"];
            this.fileName = _data["fileName"];
            this.size = _data["size"];
            this.contentType = _data["contentType"];
            if (Array.isArray(_data["extraDatas"])) {
                this.extraDatas = [] as any;
                for (let item of _data["extraDatas"])
                    this.extraDatas!.push(FileExtraData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OutputFileDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fileData"] = this.fileData;
        data["fileName"] = this.fileName;
        data["size"] = this.size;
        data["contentType"] = this.contentType;
        if (Array.isArray(this.extraDatas)) {
            data["extraDatas"] = [];
            for (let item of this.extraDatas)
                data["extraDatas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOutputFileDto {
    id: string;
    fileData: string | undefined;
    fileName: string | undefined;
    size: number;
    contentType: string | undefined;
    extraDatas: FileExtraData[] | undefined;
}

export class OutputSeerDto implements IOutputSeerDto {
    seerId!: string | undefined;
    endowmentId!: string | undefined;
    seerTypeId!: number | undefined;
    prestigiousAttributeTypeId!: number | undefined;
    prestigiousAttributeName!: string | undefined;
    seenDeedId!: string | undefined;
    seedDeedAttachmentId!: string | undefined;
    commercialNumber!: string | undefined;
    educationLevelId!: number | undefined;
    educationLevelCertificateAttachmentId!: string | undefined;
    experienceYearId!: number | undefined;
    startingDate!: DateTime | undefined;
    endDate!: DateTime | undefined;
    endSeerReasonTypeId!: number | undefined;
    isDeleted!: boolean | undefined;
    endowmentPartiesTypeId!: number | undefined;
    seerPerson!: OutputApplicationUserDto;

    constructor(data?: IOutputSeerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.seerId = _data["seerId"];
            this.endowmentId = _data["endowmentId"];
            this.seerTypeId = _data["seerTypeId"];
            this.prestigiousAttributeTypeId = _data["prestigiousAttributeTypeId"];
            this.prestigiousAttributeName = _data["prestigiousAttributeName"];
            this.seenDeedId = _data["seenDeedId"];
            this.seedDeedAttachmentId = _data["seedDeedAttachmentId"];
            this.commercialNumber = _data["commercialNumber"];
            this.educationLevelId = _data["educationLevelId"];
            this.educationLevelCertificateAttachmentId = _data["educationLevelCertificateAttachmentId"];
            this.experienceYearId = _data["experienceYearId"];
            this.startingDate = _data["startingDate"] ? DateTime.fromISO(_data["startingDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? DateTime.fromISO(_data["endDate"].toString()) : <any>undefined;
            this.endSeerReasonTypeId = _data["endSeerReasonTypeId"];
            this.isDeleted = _data["isDeleted"];
            this.endowmentPartiesTypeId = _data["endowmentPartiesTypeId"];
            this.seerPerson = _data["seerPerson"] ? OutputApplicationUserDto.fromJS(_data["seerPerson"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OutputSeerDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputSeerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["seerId"] = this.seerId;
        data["endowmentId"] = this.endowmentId;
        data["seerTypeId"] = this.seerTypeId;
        data["prestigiousAttributeTypeId"] = this.prestigiousAttributeTypeId;
        data["prestigiousAttributeName"] = this.prestigiousAttributeName;
        data["seenDeedId"] = this.seenDeedId;
        data["seedDeedAttachmentId"] = this.seedDeedAttachmentId;
        data["commercialNumber"] = this.commercialNumber;
        data["educationLevelId"] = this.educationLevelId;
        data["educationLevelCertificateAttachmentId"] = this.educationLevelCertificateAttachmentId;
        data["experienceYearId"] = this.experienceYearId;
        data["startingDate"] = this.startingDate ? this.startingDate.toString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toString() : <any>undefined;
        data["endSeerReasonTypeId"] = this.endSeerReasonTypeId;
        data["isDeleted"] = this.isDeleted;
        data["endowmentPartiesTypeId"] = this.endowmentPartiesTypeId;
        data["seerPerson"] = this.seerPerson ? this.seerPerson.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOutputSeerDto {
    seerId: string | undefined;
    endowmentId: string | undefined;
    seerTypeId: number | undefined;
    prestigiousAttributeTypeId: number | undefined;
    prestigiousAttributeName: string | undefined;
    seenDeedId: string | undefined;
    seedDeedAttachmentId: string | undefined;
    commercialNumber: string | undefined;
    educationLevelId: number | undefined;
    educationLevelCertificateAttachmentId: string | undefined;
    experienceYearId: number | undefined;
    startingDate: DateTime | undefined;
    endDate: DateTime | undefined;
    endSeerReasonTypeId: number | undefined;
    isDeleted: boolean | undefined;
    endowmentPartiesTypeId: number | undefined;
    seerPerson: OutputApplicationUserDto;
}

export class PagedResultDtoOfEndowmentOutputDto implements IPagedResultDtoOfEndowmentOutputDto {
    totalCount!: number;
    items!: EndowmentOutputDto[] | undefined;

    constructor(data?: IPagedResultDtoOfEndowmentOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(EndowmentOutputDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfEndowmentOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfEndowmentOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedResultDtoOfEndowmentOutputDto {
    totalCount: number;
    items: EndowmentOutputDto[] | undefined;
}

export class PagedResultDtoOfLookupDto implements IPagedResultDtoOfLookupDto {
    totalCount!: number;
    items!: LookupDto[] | undefined;

    constructor(data?: IPagedResultDtoOfLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedResultDtoOfLookupDto {
    totalCount: number;
    items: LookupDto[] | undefined;
}

export class PagedResultDtoOfOutputBeneficiaryDto implements IPagedResultDtoOfOutputBeneficiaryDto {
    totalCount!: number;
    items!: OutputBeneficiaryDto[] | undefined;

    constructor(data?: IPagedResultDtoOfOutputBeneficiaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OutputBeneficiaryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOutputBeneficiaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfOutputBeneficiaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedResultDtoOfOutputBeneficiaryDto {
    totalCount: number;
    items: OutputBeneficiaryDto[] | undefined;
}

export class PagedResultDtoOfOutputEndowmerDto implements IPagedResultDtoOfOutputEndowmerDto {
    totalCount!: number;
    items!: OutputEndowmerDto[] | undefined;

    constructor(data?: IPagedResultDtoOfOutputEndowmerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OutputEndowmerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOutputEndowmerDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfOutputEndowmerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedResultDtoOfOutputEndowmerDto {
    totalCount: number;
    items: OutputEndowmerDto[] | undefined;
}

export class PagedResultDtoOfOutputSeerDto implements IPagedResultDtoOfOutputSeerDto {
    totalCount!: number;
    items!: OutputSeerDto[] | undefined;

    constructor(data?: IPagedResultDtoOfOutputSeerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OutputSeerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOutputSeerDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfOutputSeerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedResultDtoOfOutputSeerDto {
    totalCount: number;
    items: OutputSeerDto[] | undefined;
}

export class PagedResultDtoOfRequestOutputDto implements IPagedResultDtoOfRequestOutputDto {
    totalCount!: number;
    items!: RequestOutputDto[] | undefined;

    constructor(data?: IPagedResultDtoOfRequestOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RequestOutputDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRequestOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRequestOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedResultDtoOfRequestOutputDto {
    totalCount: number;
    items: RequestOutputDto[] | undefined;
}

export class ParticularBenefitAssetData implements IParticularBenefitAssetData {
    benefitValue!: number | undefined;
    isDirectedBenefit!: boolean | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IParticularBenefitAssetData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.benefitValue = _data["benefitValue"];
            this.isDirectedBenefit = _data["isDirectedBenefit"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ParticularBenefitAssetData {
        data = typeof data === 'object' ? data : {};
        let result = new ParticularBenefitAssetData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["benefitValue"] = this.benefitValue;
        data["isDirectedBenefit"] = this.isDirectedBenefit;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IParticularBenefitAssetData {
    benefitValue: number | undefined;
    isDirectedBenefit: boolean | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class PhoneOtpGenerationInputDto implements IPhoneOtpGenerationInputDto {
    userId!: string | undefined;
    phoneNumber!: string | undefined;

    constructor(data?: IPhoneOtpGenerationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): PhoneOtpGenerationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneOtpGenerationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["phoneNumber"] = this.phoneNumber;
        return data;
    }
}

export interface IPhoneOtpGenerationInputDto {
    userId: string | undefined;
    phoneNumber: string | undefined;
}

export class PhoneOtpVerificationInputDto implements IPhoneOtpVerificationInputDto {
    phoneNumber!: string | undefined;
    code!: string | undefined;
    hash!: string | undefined;
    userId!: string | undefined;

    constructor(data?: IPhoneOtpVerificationInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.phoneNumber = _data["phoneNumber"];
            this.code = _data["code"];
            this.hash = _data["hash"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): PhoneOtpVerificationInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneOtpVerificationInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber;
        data["code"] = this.code;
        data["hash"] = this.hash;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IPhoneOtpVerificationInputDto {
    phoneNumber: string | undefined;
    code: string | undefined;
    hash: string | undefined;
    userId: string | undefined;
}

export class RealEstateAssetData implements IRealEstateAssetData {
    regionId!: number | undefined;
    cityId!: number | undefined;
    longitude!: number | undefined;
    latitude!: number | undefined;
    ownershipDeedAttachementId!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IRealEstateAssetData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.ownershipDeedAttachementId = _data["ownershipDeedAttachementId"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RealEstateAssetData {
        data = typeof data === 'object' ? data : {};
        let result = new RealEstateAssetData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["ownershipDeedAttachementId"] = this.ownershipDeedAttachementId;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IRealEstateAssetData {
    regionId: number | undefined;
    cityId: number | undefined;
    longitude: number | undefined;
    latitude: number | undefined;
    ownershipDeedAttachementId: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class RefreshToken implements IRefreshToken {
    token!: string | undefined;
    expires!: DateTime;
    created!: DateTime;

    constructor(data?: IRefreshToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.expires = _data["expires"] ? DateTime.fromISO(_data["expires"].toString()) : <any>undefined;
            this.created = _data["created"] ? DateTime.fromISO(_data["created"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RefreshToken {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["expires"] = this.expires ? this.expires.toString() : <any>undefined;
        data["created"] = this.created ? this.created.toString() : <any>undefined;
        return data;
    }
}

export interface IRefreshToken {
    token: string | undefined;
    expires: DateTime;
    created: DateTime;
}

export class Region implements IRegion {
    regionCode!: string | undefined;
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: IRegion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionCode = _data["regionCode"];
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Region {
        data = typeof data === 'object' ? data : {};
        let result = new Region();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionCode"] = this.regionCode;
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IRegion {
    regionCode: string | undefined;
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class RemoveBeneficiaryInputDto implements IRemoveBeneficiaryInputDto {
    beneficiaryId!: string;
    requestId!: string;

    constructor(data?: IRemoveBeneficiaryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beneficiaryId = _data["beneficiaryId"];
            this.requestId = _data["requestId"];
        }
    }

    static fromJS(data: any): RemoveBeneficiaryInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveBeneficiaryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beneficiaryId"] = this.beneficiaryId;
        data["requestId"] = this.requestId;
        return data;
    }
}

export interface IRemoveBeneficiaryInputDto {
    beneficiaryId: string;
    requestId: string;
}

export class RemoveSeerInputDto implements IRemoveSeerInputDto {
    seerId!: string;
    requestId!: string;

    constructor(data?: IRemoveSeerInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.seerId = _data["seerId"];
            this.requestId = _data["requestId"];
        }
    }

    static fromJS(data: any): RemoveSeerInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveSeerInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["seerId"] = this.seerId;
        data["requestId"] = this.requestId;
        return data;
    }
}

export interface IRemoveSeerInputDto {
    seerId: string;
    requestId: string;
}

export class Request implements IRequest {
    requestNumber!: number;
    applicantId!: string | undefined;
    requestTypeId!: number | undefined;
    requestStatusId!: number | undefined;
    workflowInstanceId!: string | undefined;
    submitionDate!: DateTime | undefined;
    applicationUser!: ApplicationUser;
    endowmentRegistrationRequest!: EndowmentRegistrationRequest;
    requestType!: RequestType;
    requestStatus!: RequestStatus;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: string;

    constructor(data?: IRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestNumber = _data["requestNumber"];
            this.applicantId = _data["applicantId"];
            this.requestTypeId = _data["requestTypeId"];
            this.requestStatusId = _data["requestStatusId"];
            this.workflowInstanceId = _data["workflowInstanceId"];
            this.submitionDate = _data["submitionDate"] ? DateTime.fromISO(_data["submitionDate"].toString()) : <any>undefined;
            this.applicationUser = _data["applicationUser"] ? ApplicationUser.fromJS(_data["applicationUser"]) : <any>undefined;
            this.endowmentRegistrationRequest = _data["endowmentRegistrationRequest"] ? EndowmentRegistrationRequest.fromJS(_data["endowmentRegistrationRequest"]) : <any>undefined;
            this.requestType = _data["requestType"] ? RequestType.fromJS(_data["requestType"]) : <any>undefined;
            this.requestStatus = _data["requestStatus"] ? RequestStatus.fromJS(_data["requestStatus"]) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Request {
        data = typeof data === 'object' ? data : {};
        let result = new Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestNumber"] = this.requestNumber;
        data["applicantId"] = this.applicantId;
        data["requestTypeId"] = this.requestTypeId;
        data["requestStatusId"] = this.requestStatusId;
        data["workflowInstanceId"] = this.workflowInstanceId;
        data["submitionDate"] = this.submitionDate ? this.submitionDate.toString() : <any>undefined;
        data["applicationUser"] = this.applicationUser ? this.applicationUser.toJSON() : <any>undefined;
        data["endowmentRegistrationRequest"] = this.endowmentRegistrationRequest ? this.endowmentRegistrationRequest.toJSON() : <any>undefined;
        data["requestType"] = this.requestType ? this.requestType.toJSON() : <any>undefined;
        data["requestStatus"] = this.requestStatus ? this.requestStatus.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IRequest {
    requestNumber: number;
    applicantId: string | undefined;
    requestTypeId: number | undefined;
    requestStatusId: number | undefined;
    workflowInstanceId: string | undefined;
    submitionDate: DateTime | undefined;
    applicationUser: ApplicationUser;
    endowmentRegistrationRequest: EndowmentRegistrationRequest;
    requestType: RequestType;
    requestStatus: RequestStatus;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: string;
}

export class RequestDto implements IRequestDto {
    id!: string;

    constructor(data?: IRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IRequestDto {
    id: string;
}

export class RequestOutputDto implements IRequestOutputDto {
    requestNumber!: number;
    applicantId!: string | undefined;
    requestTypeId!: number | undefined;
    requestStatusId!: number | undefined;
    workflowInstanceId!: string | undefined;
    submitionDate!: DateTime | undefined;
    applicationUser!: ApplicationUser;
    endowmentRegistrationRequest!: EndowmentRegistrationRequest;
    requestType!: RequestType;
    requestStatus!: RequestStatus;

    constructor(data?: IRequestOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestNumber = _data["requestNumber"];
            this.applicantId = _data["applicantId"];
            this.requestTypeId = _data["requestTypeId"];
            this.requestStatusId = _data["requestStatusId"];
            this.workflowInstanceId = _data["workflowInstanceId"];
            this.submitionDate = _data["submitionDate"] ? DateTime.fromISO(_data["submitionDate"].toString()) : <any>undefined;
            this.applicationUser = _data["applicationUser"] ? ApplicationUser.fromJS(_data["applicationUser"]) : <any>undefined;
            this.endowmentRegistrationRequest = _data["endowmentRegistrationRequest"] ? EndowmentRegistrationRequest.fromJS(_data["endowmentRegistrationRequest"]) : <any>undefined;
            this.requestType = _data["requestType"] ? RequestType.fromJS(_data["requestType"]) : <any>undefined;
            this.requestStatus = _data["requestStatus"] ? RequestStatus.fromJS(_data["requestStatus"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestNumber"] = this.requestNumber;
        data["applicantId"] = this.applicantId;
        data["requestTypeId"] = this.requestTypeId;
        data["requestStatusId"] = this.requestStatusId;
        data["workflowInstanceId"] = this.workflowInstanceId;
        data["submitionDate"] = this.submitionDate ? this.submitionDate.toString() : <any>undefined;
        data["applicationUser"] = this.applicationUser ? this.applicationUser.toJSON() : <any>undefined;
        data["endowmentRegistrationRequest"] = this.endowmentRegistrationRequest ? this.endowmentRegistrationRequest.toJSON() : <any>undefined;
        data["requestType"] = this.requestType ? this.requestType.toJSON() : <any>undefined;
        data["requestStatus"] = this.requestStatus ? this.requestStatus.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRequestOutputDto {
    requestNumber: number;
    applicantId: string | undefined;
    requestTypeId: number | undefined;
    requestStatusId: number | undefined;
    workflowInstanceId: string | undefined;
    submitionDate: DateTime | undefined;
    applicationUser: ApplicationUser;
    endowmentRegistrationRequest: EndowmentRegistrationRequest;
    requestType: RequestType;
    requestStatus: RequestStatus;
}

export class RequestStatus implements IRequestStatus {
    statusCode!: string | undefined;
    requestTypes!: RequestType[] | undefined;
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: IRequestStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"];
            if (Array.isArray(_data["requestTypes"])) {
                this.requestTypes = [] as any;
                for (let item of _data["requestTypes"])
                    this.requestTypes!.push(RequestType.fromJS(item));
            }
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RequestStatus {
        data = typeof data === 'object' ? data : {};
        let result = new RequestStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        if (Array.isArray(this.requestTypes)) {
            data["requestTypes"] = [];
            for (let item of this.requestTypes)
                data["requestTypes"].push(item.toJSON());
        }
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IRequestStatus {
    statusCode: string | undefined;
    requestTypes: RequestType[] | undefined;
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class RequestType implements IRequestType {
    requestTypeCode!: string | undefined;
    requestTypePrefix!: string | undefined;
    requestStatuses!: RequestStatus[] | undefined;
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    createdBy!: string | undefined;
    creationDate!: DateTime;
    updatedBy!: string | undefined;
    lastUpdate!: DateTime | undefined;
    id!: number;

    constructor(data?: IRequestType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestTypeCode = _data["requestTypeCode"];
            this.requestTypePrefix = _data["requestTypePrefix"];
            if (Array.isArray(_data["requestStatuses"])) {
                this.requestStatuses = [] as any;
                for (let item of _data["requestStatuses"])
                    this.requestStatuses!.push(RequestStatus.fromJS(item));
            }
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.createdBy = _data["createdBy"];
            this.creationDate = _data["creationDate"] ? DateTime.fromISO(_data["creationDate"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.lastUpdate = _data["lastUpdate"] ? DateTime.fromISO(_data["lastUpdate"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RequestType {
        data = typeof data === 'object' ? data : {};
        let result = new RequestType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestTypeCode"] = this.requestTypeCode;
        data["requestTypePrefix"] = this.requestTypePrefix;
        if (Array.isArray(this.requestStatuses)) {
            data["requestStatuses"] = [];
            for (let item of this.requestStatuses)
                data["requestStatuses"].push(item.toJSON());
        }
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["createdBy"] = this.createdBy;
        data["creationDate"] = this.creationDate ? this.creationDate.toString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IRequestType {
    requestTypeCode: string | undefined;
    requestTypePrefix: string | undefined;
    requestStatuses: RequestStatus[] | undefined;
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    createdBy: string | undefined;
    creationDate: DateTime;
    updatedBy: string | undefined;
    lastUpdate: DateTime | undefined;
    id: number;
}

export class SentNotificationMessagesDto implements ISentNotificationMessagesDto {
    notificationMessageDto!: NotificationMessageDto;
    id!: string;

    constructor(data?: ISentNotificationMessagesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.notificationMessageDto = _data["notificationMessageDto"] ? NotificationMessageDto.fromJS(_data["notificationMessageDto"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): SentNotificationMessagesDto {
        data = typeof data === 'object' ? data : {};
        let result = new SentNotificationMessagesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notificationMessageDto"] = this.notificationMessageDto ? this.notificationMessageDto.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ISentNotificationMessagesDto {
    notificationMessageDto: NotificationMessageDto;
    id: string;
}

export class Setting implements ISetting {
    appSettings!: string | undefined;

    constructor(data?: ISetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appSettings = _data["appSettings"];
        }
    }

    static fromJS(data: any): Setting {
        data = typeof data === 'object' ? data : {};
        let result = new Setting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appSettings"] = this.appSettings;
        return data;
    }
}

export interface ISetting {
    appSettings: string | undefined;
}

export class TemplateParameter implements ITemplateParameter {
    key!: string | undefined;
    value!: any | undefined;

    constructor(data?: ITemplateParameter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): TemplateParameter {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateParameter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface ITemplateParameter {
    key: string | undefined;
    value: any | undefined;
}

export class TokenResponse implements ITokenResponse {
    accessToken!: string | undefined;
    refreshToken!: RefreshToken;

    constructor(data?: ITokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.refreshToken = _data["refreshToken"] ? RefreshToken.fromJS(_data["refreshToken"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken ? this.refreshToken.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITokenResponse {
    accessToken: string | undefined;
    refreshToken: RefreshToken;
}

export class UpdateUserCityRegionInputDto implements IUpdateUserCityRegionInputDto {
    regionId!: number | undefined;
    cityId!: number | undefined;

    constructor(data?: IUpdateUserCityRegionInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
        }
    }

    static fromJS(data: any): UpdateUserCityRegionInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserCityRegionInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        return data;
    }
}

export interface IUpdateUserCityRegionInputDto {
    regionId: number | undefined;
    cityId: number | undefined;
}

export enum UserGender {
    Male = 0,
    Female = 1,
    None = -1,
}

export enum UserType {
    Public = 0,
    Employee = 1,
}

export class ValidationResultDetails implements IValidationResultDetails {
    errorCode!: string | undefined;
    errorMessage!: string | undefined;

    constructor(data?: IValidationResultDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorCode = _data["errorCode"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ValidationResultDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationResultDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorCode"] = this.errorCode;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IValidationResultDetails {
    errorCode: string | undefined;
    errorMessage: string | undefined;
}

export class ValidationResultMessage implements IValidationResultMessage {
    propertyName!: string | undefined;
    validationResultDetails!: ValidationResultDetails[] | undefined;

    constructor(data?: IValidationResultMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            if (Array.isArray(_data["validationResultDetails"])) {
                this.validationResultDetails = [] as any;
                for (let item of _data["validationResultDetails"])
                    this.validationResultDetails!.push(ValidationResultDetails.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ValidationResultMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationResultMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        if (Array.isArray(this.validationResultDetails)) {
            data["validationResultDetails"] = [];
            for (let item of this.validationResultDetails)
                data["validationResultDetails"].push(item.toJSON());
        }
        return data;
    }
}

export interface IValidationResultMessage {
    propertyName: string | undefined;
    validationResultDetails: ValidationResultDetails[] | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date!: DateTime;
    temperatureC!: number;
    readonly temperatureF!: number;
    summary!: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? DateTime.fromISO(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date: DateTime;
    temperatureC: number;
    temperatureF: number;
    summary: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
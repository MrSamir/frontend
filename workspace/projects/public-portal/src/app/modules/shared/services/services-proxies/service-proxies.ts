//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import { DateTime, Duration } from "luxon";

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AppCoreConfigurationsServiceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAppCoreConfigurations(): Observable<AppCore> {
        let url_ = this.baseUrl + "/api/AppCoreConfigurationsService/GetAppCoreConfigurations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppCoreConfigurations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppCoreConfigurations(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppCore>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppCore>;
        }));
    }

    protected processGetAppCoreConfigurations(response: HttpResponseBase): Observable<AppCore> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppCore.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class EndowmentRegistrationServiceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createWaqfRequestAsset(body: InputAssetDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/CreateWaqfRequestAsset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateWaqfRequestAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateWaqfRequestAsset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processCreateWaqfRequestAsset(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param isApplicantAgent (optional) 
     * @param body (optional) 
     * @return Success
     */
    initiateEndowmentRegistrationRequest(isApplicantAgent: boolean | undefined, body: InputApplicantDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/InitiateEndowmentRegistrationRequest?";
        if (isApplicantAgent === null)
            throw new Error("The parameter 'isApplicantAgent' cannot be null.");
        else if (isApplicantAgent !== undefined)
            url_ += "isApplicantAgent=" + encodeURIComponent("" + isApplicantAgent) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInitiateEndowmentRegistrationRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInitiateEndowmentRegistrationRequest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processInitiateEndowmentRegistrationRequest(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    editWaqfAssetRequest(body: InputAssetDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/EditWaqfAssetRequest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditWaqfAssetRequest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditWaqfAssetRequest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processEditWaqfAssetRequest(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteWaqfRequestAsset(body: InputRemoveAssetDto | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/DeleteWaqfRequestAsset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteWaqfRequestAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteWaqfRequestAsset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processDeleteWaqfRequestAsset(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestId (optional) 
     * @return Success
     */
    getAssetsByRequestId(requestId: string | undefined): Observable<OutputAssetDto[]> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GetAssetsByRequestId?";
        if (requestId === null)
            throw new Error("The parameter 'requestId' cannot be null.");
        else if (requestId !== undefined)
            url_ += "requestId=" + encodeURIComponent("" + requestId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetsByRequestId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetsByRequestId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OutputAssetDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OutputAssetDto[]>;
        }));
    }

    protected processGetAssetsByRequestId(response: HttpResponseBase): Observable<OutputAssetDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OutputAssetDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getOneAsset(body: InputOneAssetDto | undefined): Observable<ApiResponseOfOutputAssetDto> {
        let url_ = this.baseUrl + "/api/EndowmentRegistrationService/GetOneAsset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOneAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOneAsset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputAssetDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputAssetDto>;
        }));
    }

    protected processGetOneAsset(response: HttpResponseBase): Observable<ApiResponseOfOutputAssetDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputAssetDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class FileLibraryApplicationServiceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    downloadFilePost(body: InputFileDto | undefined): Observable<ApiResponseOfOutputFileDto> {
        let url_ = this.baseUrl + "/api/FileLibraryApplicationService/DownloadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadFilePost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadFilePost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputFileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputFileDto>;
        }));
    }

    protected processDownloadFilePost(response: HttpResponseBase): Observable<ApiResponseOfOutputFileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputFileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param entityName (optional) 
     * @param id (optional) 
     * @return Success
     */
    downloadFileGet(entityName: string | undefined, id: string | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/FileLibraryApplicationService/DownloadFile?";
        if (entityName === null)
            throw new Error("The parameter 'entityName' cannot be null.");
        else if (entityName !== undefined)
            url_ += "entityName=" + encodeURIComponent("" + entityName) + "&";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadFileGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadFileGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDownloadFileGet(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param entityName (optional) 
     * @param file (optional) 
     * @param fileExtraDatas (optional) 
     * @return Success
     */
    uploadFile(entityName: string | undefined, file: FileParameter | undefined, fileExtraDatas: FileExtraData[] | undefined): Observable<ApiResponseOfOutputFileDto> {
        let url_ = this.baseUrl + "/api/FileLibraryApplicationService/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (entityName === null || entityName === undefined)
            throw new Error("The parameter 'entityName' cannot be null.");
        else
            content_.append("entityName", entityName.toString());
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        if (fileExtraDatas === null || fileExtraDatas === undefined)
            throw new Error("The parameter 'fileExtraDatas' cannot be null.");
        else
            fileExtraDatas.forEach(item_ => content_.append("fileExtraDatas", item_.toString()));

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputFileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputFileDto>;
        }));
    }

    protected processUploadFile(response: HttpResponseBase): Observable<ApiResponseOfOutputFileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputFileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param entityName (optional) 
     * @param contentType (optional) 
     * @param fileName (optional) 
     * @param fileData (optional) 
     * @param fileExtraDatas (optional) 
     * @return Success
     */
    uploadFileBytes(entityName: string | undefined, contentType: string | undefined, fileName: string | undefined, fileData: string | undefined, fileExtraDatas: FileExtraData[] | undefined): Observable<ApiResponseOfOutputFileDto> {
        let url_ = this.baseUrl + "/api/FileLibraryApplicationService/UploadFileBytes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (entityName === null || entityName === undefined)
            throw new Error("The parameter 'entityName' cannot be null.");
        else
            content_.append("entityName", entityName.toString());
        if (contentType === null || contentType === undefined)
            throw new Error("The parameter 'contentType' cannot be null.");
        else
            content_.append("contentType", contentType.toString());
        if (fileName === null || fileName === undefined)
            throw new Error("The parameter 'fileName' cannot be null.");
        else
            content_.append("fileName", fileName.toString());
        if (fileData === null || fileData === undefined)
            throw new Error("The parameter 'fileData' cannot be null.");
        else
            content_.append("fileData", fileData.toString());
        if (fileExtraDatas === null || fileExtraDatas === undefined)
            throw new Error("The parameter 'fileExtraDatas' cannot be null.");
        else
            fileExtraDatas.forEach(item_ => content_.append("fileExtraDatas", item_.toString()));

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadFileBytes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadFileBytes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfOutputFileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfOutputFileDto>;
        }));
    }

    protected processUploadFileBytes(response: HttpResponseBase): Observable<ApiResponseOfOutputFileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfOutputFileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class LookupApplicationServiceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7071";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAllLookups(body: InputLookUpDto | undefined): Observable<ApiResponseOfPagedResultDtoOfLookupDto> {
        let url_ = this.baseUrl + "/api/LookupApplicationService/GetAllLookups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllLookups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllLookups(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfPagedResultDtoOfLookupDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfPagedResultDtoOfLookupDto>;
        }));
    }

    protected processGetAllLookups(response: HttpResponseBase): Observable<ApiResponseOfPagedResultDtoOfLookupDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfPagedResultDtoOfLookupDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getById(body: InputLookUpDto | undefined): Observable<ApiResponseOfLookupDto> {
        let url_ = this.baseUrl + "/api/LookupApplicationService/GetById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfLookupDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfLookupDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ApiResponseOfLookupDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfLookupDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class MojDataMigrationApplicationServicesServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    registerAllEndowment(): Observable<ApiResponseOfRequestDto> {
        let url_ = this.baseUrl + "/api/MojDataMigrationApplicationServices/RegisterAllEndowment";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterAllEndowment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterAllEndowment(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfRequestDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfRequestDto>;
        }));
    }

    protected processRegisterAllEndowment(response: HttpResponseBase): Observable<ApiResponseOfRequestDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfRequestDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param deedNumber (optional) 
     * @return Success
     */
    registerEndowmentByDeedNumber(deedNumber: number | undefined): Observable<ApiResponseOfRequestDto> {
        let url_ = this.baseUrl + "/api/MojDataMigrationApplicationServices/RegisterEndowmentByDeedNumber?";
        if (deedNumber === null)
            throw new Error("The parameter 'deedNumber' cannot be null.");
        else if (deedNumber !== undefined)
            url_ += "deedNumber=" + encodeURIComponent("" + deedNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterEndowmentByDeedNumber(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterEndowmentByDeedNumber(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfRequestDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfRequestDto>;
        }));
    }

    protected processRegisterEndowmentByDeedNumber(response: HttpResponseBase): Observable<ApiResponseOfRequestDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfRequestDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class SendNotificationApplicationServiceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param requestNumber (optional) 
     * @param templateGroupId (optional) 
     * @param roleName (optional) 
     * @return Success
     */
    sendNotificationForRole(requestNumber: string | undefined, templateGroupId: number | undefined, roleName: string | undefined): Observable<ApiResponseOfSentNotificationMessagesDto> {
        let url_ = this.baseUrl + "/api/SendNotificationApplicationService/SendNotificationForRole?";
        if (requestNumber === null)
            throw new Error("The parameter 'requestNumber' cannot be null.");
        else if (requestNumber !== undefined)
            url_ += "requestNumber=" + encodeURIComponent("" + requestNumber) + "&";
        if (templateGroupId === null)
            throw new Error("The parameter 'templateGroupId' cannot be null.");
        else if (templateGroupId !== undefined)
            url_ += "templateGroupId=" + encodeURIComponent("" + templateGroupId) + "&";
        if (roleName === null)
            throw new Error("The parameter 'roleName' cannot be null.");
        else if (roleName !== undefined)
            url_ += "roleName=" + encodeURIComponent("" + roleName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendNotificationForRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendNotificationForRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
        }));
    }

    protected processSendNotificationForRole(response: HttpResponseBase): Observable<ApiResponseOfSentNotificationMessagesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfSentNotificationMessagesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param requestNumber (optional) 
     * @param templateGroupId (optional) 
     * @param body (optional) 
     * @return Success
     */
    sendNotificationUsers(requestNumber: string | undefined, templateGroupId: number | undefined, body: string[] | undefined): Observable<ApiResponseOfSentNotificationMessagesDto> {
        let url_ = this.baseUrl + "/api/SendNotificationApplicationService/SendNotificationUsers?";
        if (requestNumber === null)
            throw new Error("The parameter 'requestNumber' cannot be null.");
        else if (requestNumber !== undefined)
            url_ += "requestNumber=" + encodeURIComponent("" + requestNumber) + "&";
        if (templateGroupId === null)
            throw new Error("The parameter 'templateGroupId' cannot be null.");
        else if (templateGroupId !== undefined)
            url_ += "templateGroupId=" + encodeURIComponent("" + templateGroupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendNotificationUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendNotificationUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseOfSentNotificationMessagesDto>;
        }));
    }

    protected processSendNotificationUsers(response: HttpResponseBase): Observable<ApiResponseOfSentNotificationMessagesDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseOfSentNotificationMessagesDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class WeatherForecastServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    weatherForecast(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherForecast(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherForecast(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherForecast[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherForecast[]>;
        }));
    }

    protected processWeatherForecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ApiResponse implements IApiResponse {
    isSuccess!: boolean;
    dto!: any | undefined;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"];
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponse {
    isSuccess: boolean;
    dto: any | undefined;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfLookupDto implements IApiResponseOfLookupDto {
    isSuccess!: boolean;
    dto!: LookupDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? LookupDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfLookupDto {
    isSuccess: boolean;
    dto: LookupDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfOutputAssetDto implements IApiResponseOfOutputAssetDto {
    isSuccess!: boolean;
    dto!: OutputAssetDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfOutputAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? OutputAssetDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfOutputAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfOutputAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfOutputAssetDto {
    isSuccess: boolean;
    dto: OutputAssetDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfOutputFileDto implements IApiResponseOfOutputFileDto {
    isSuccess!: boolean;
    dto!: OutputFileDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfOutputFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? OutputFileDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfOutputFileDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfOutputFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfOutputFileDto {
    isSuccess: boolean;
    dto: OutputFileDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfPagedResultDtoOfLookupDto implements IApiResponseOfPagedResultDtoOfLookupDto {
    isSuccess!: boolean;
    dto!: PagedResultDtoOfLookupDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfPagedResultDtoOfLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? PagedResultDtoOfLookupDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfPagedResultDtoOfLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfPagedResultDtoOfLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfPagedResultDtoOfLookupDto {
    isSuccess: boolean;
    dto: PagedResultDtoOfLookupDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfRequestDto implements IApiResponseOfRequestDto {
    isSuccess!: boolean;
    dto!: RequestDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? RequestDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfRequestDto {
    isSuccess: boolean;
    dto: RequestDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class ApiResponseOfSentNotificationMessagesDto implements IApiResponseOfSentNotificationMessagesDto {
    isSuccess!: boolean;
    dto!: SentNotificationMessagesDto;
    message!: string | undefined;
    validationResultMessages!: ValidationResultMessage[] | undefined;

    constructor(data?: IApiResponseOfSentNotificationMessagesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.dto = _data["dto"] ? SentNotificationMessagesDto.fromJS(_data["dto"]) : <any>undefined;
            this.message = _data["message"];
            if (Array.isArray(_data["validationResultMessages"])) {
                this.validationResultMessages = [] as any;
                for (let item of _data["validationResultMessages"])
                    this.validationResultMessages!.push(ValidationResultMessage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseOfSentNotificationMessagesDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseOfSentNotificationMessagesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["dto"] = this.dto ? this.dto.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (Array.isArray(this.validationResultMessages)) {
            data["validationResultMessages"] = [];
            for (let item of this.validationResultMessages)
                data["validationResultMessages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IApiResponseOfSentNotificationMessagesDto {
    isSuccess: boolean;
    dto: SentNotificationMessagesDto;
    message: string | undefined;
    validationResultMessages: ValidationResultMessage[] | undefined;
}

export class AppCore implements IAppCore {
    localization!: Localization;
    settings!: Setting;

    constructor(data?: IAppCore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localization = _data["localization"] ? Localization.fromJS(_data["localization"]) : <any>undefined;
            this.settings = _data["settings"] ? Setting.fromJS(_data["settings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AppCore {
        data = typeof data === 'object' ? data : {};
        let result = new AppCore();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localization"] = this.localization ? this.localization.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAppCore {
    localization: Localization;
    settings: Setting;
}

export class FileExtraData implements IFileExtraData {
    dataName!: string | undefined;
    dataValue!: string | undefined;

    constructor(data?: IFileExtraData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataName = _data["dataName"];
            this.dataValue = _data["dataValue"];
        }
    }

    static fromJS(data: any): FileExtraData {
        data = typeof data === 'object' ? data : {};
        let result = new FileExtraData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataName"] = this.dataName;
        data["dataValue"] = this.dataValue;
        return data;
    }
}

export interface IFileExtraData {
    dataName: string | undefined;
    dataValue: string | undefined;
}

export class InputAnimalOrAgriculturalAssetDto implements IInputAnimalOrAgriculturalAssetDto {
    regionId!: number;
    cityId!: number;
    animalOrAgriculturaDescription!: string | undefined;
    id!: string;

    constructor(data?: IInputAnimalOrAgriculturalAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.animalOrAgriculturaDescription = _data["animalOrAgriculturaDescription"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputAnimalOrAgriculturalAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputAnimalOrAgriculturalAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["animalOrAgriculturaDescription"] = this.animalOrAgriculturaDescription;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputAnimalOrAgriculturalAssetDto {
    regionId: number;
    cityId: number;
    animalOrAgriculturaDescription: string | undefined;
    id: string;
}

export class InputApplicantDto implements IInputApplicantDto {
    fullName!: string | undefined;
    birthDate!: DateTime;
    birthDateHijri!: string | undefined;
    gender!: UserGender;
    idTypeId!: number | undefined;
    regionId!: number | undefined;
    cityId!: number | undefined;
    firstNameEn!: string | undefined;
    thirdNameEn!: string | undefined;
    secondNameEn!: string | undefined;
    lastNameEn!: string | undefined;
    firstNameAr!: string | undefined;
    secondNameAr!: string | undefined;
    thirdNameAr!: string | undefined;
    lastNameAr!: string | undefined;
    idExpiryDate!: string | undefined;
    idIssueDate!: string | undefined;
    idIssuePlace!: string | undefined;
    placeOfBirth!: string | undefined;
    iqamaExpiryDateGregorian!: DateTime | undefined;
    iqamaIssueDateGregorian!: DateTime | undefined;
    iqamaIssuePlaceCode!: string | undefined;
    placeOfBirthCode!: string | undefined;
    nationalityId!: number | undefined;
    noIdentityReason!: number | undefined;
    validatedByYaqeen!: boolean | undefined;
    isAlive!: boolean | undefined;

    constructor(data?: IInputApplicantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.birthDate = _data["birthDate"] ? DateTime.fromISO(_data["birthDate"].toString()) : <any>undefined;
            this.birthDateHijri = _data["birthDateHijri"];
            this.gender = _data["gender"];
            this.idTypeId = _data["idTypeId"];
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.firstNameEn = _data["firstNameEn"];
            this.thirdNameEn = _data["thirdNameEn"];
            this.secondNameEn = _data["secondNameEn"];
            this.lastNameEn = _data["lastNameEn"];
            this.firstNameAr = _data["firstNameAr"];
            this.secondNameAr = _data["secondNameAr"];
            this.thirdNameAr = _data["thirdNameAr"];
            this.lastNameAr = _data["lastNameAr"];
            this.idExpiryDate = _data["idExpiryDate"];
            this.idIssueDate = _data["idIssueDate"];
            this.idIssuePlace = _data["idIssuePlace"];
            this.placeOfBirth = _data["placeOfBirth"];
            this.iqamaExpiryDateGregorian = _data["iqamaExpiryDateGregorian"] ? DateTime.fromISO(_data["iqamaExpiryDateGregorian"].toString()) : <any>undefined;
            this.iqamaIssueDateGregorian = _data["iqamaIssueDateGregorian"] ? DateTime.fromISO(_data["iqamaIssueDateGregorian"].toString()) : <any>undefined;
            this.iqamaIssuePlaceCode = _data["iqamaIssuePlaceCode"];
            this.placeOfBirthCode = _data["placeOfBirthCode"];
            this.nationalityId = _data["nationalityId"];
            this.noIdentityReason = _data["noIdentityReason"];
            this.validatedByYaqeen = _data["validatedByYaqeen"];
            this.isAlive = _data["isAlive"];
        }
    }

    static fromJS(data: any): InputApplicantDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputApplicantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["birthDate"] = this.birthDate ? this.birthDate.toString() : <any>undefined;
        data["birthDateHijri"] = this.birthDateHijri;
        data["gender"] = this.gender;
        data["idTypeId"] = this.idTypeId;
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["firstNameEn"] = this.firstNameEn;
        data["thirdNameEn"] = this.thirdNameEn;
        data["secondNameEn"] = this.secondNameEn;
        data["lastNameEn"] = this.lastNameEn;
        data["firstNameAr"] = this.firstNameAr;
        data["secondNameAr"] = this.secondNameAr;
        data["thirdNameAr"] = this.thirdNameAr;
        data["lastNameAr"] = this.lastNameAr;
        data["idExpiryDate"] = this.idExpiryDate;
        data["idIssueDate"] = this.idIssueDate;
        data["idIssuePlace"] = this.idIssuePlace;
        data["placeOfBirth"] = this.placeOfBirth;
        data["iqamaExpiryDateGregorian"] = this.iqamaExpiryDateGregorian ? this.iqamaExpiryDateGregorian.toString() : <any>undefined;
        data["iqamaIssueDateGregorian"] = this.iqamaIssueDateGregorian ? this.iqamaIssueDateGregorian.toString() : <any>undefined;
        data["iqamaIssuePlaceCode"] = this.iqamaIssuePlaceCode;
        data["placeOfBirthCode"] = this.placeOfBirthCode;
        data["nationalityId"] = this.nationalityId;
        data["noIdentityReason"] = this.noIdentityReason;
        data["validatedByYaqeen"] = this.validatedByYaqeen;
        data["isAlive"] = this.isAlive;
        return data;
    }
}

export interface IInputApplicantDto {
    fullName: string | undefined;
    birthDate: DateTime;
    birthDateHijri: string | undefined;
    gender: UserGender;
    idTypeId: number | undefined;
    regionId: number | undefined;
    cityId: number | undefined;
    firstNameEn: string | undefined;
    thirdNameEn: string | undefined;
    secondNameEn: string | undefined;
    lastNameEn: string | undefined;
    firstNameAr: string | undefined;
    secondNameAr: string | undefined;
    thirdNameAr: string | undefined;
    lastNameAr: string | undefined;
    idExpiryDate: string | undefined;
    idIssueDate: string | undefined;
    idIssuePlace: string | undefined;
    placeOfBirth: string | undefined;
    iqamaExpiryDateGregorian: DateTime | undefined;
    iqamaIssueDateGregorian: DateTime | undefined;
    iqamaIssuePlaceCode: string | undefined;
    placeOfBirthCode: string | undefined;
    nationalityId: number | undefined;
    noIdentityReason: number | undefined;
    validatedByYaqeen: boolean | undefined;
    isAlive: boolean | undefined;
}

export class InputAssetDto implements IInputAssetDto {
    assetTypeId!: number;
    assetSizeId!: number;
    assetApproximatelyAmount!: number;
    requestId!: string;
    animalOrAgriculturalAsset!: InputAnimalOrAgriculturalAssetDto;
    businessEntityAsset!: InputBusinessEntityAssetDto;
    fiscalAsset!: InputFiscalAssetDto;
    intellectualPropertyAndTrademarkAsset!: InputIntellectualPropertyAndTrademarkAssetDto;
    movableAsset!: InputMovableAssetDto;
    monetaryAsset!: InputMonetaryAssetDto;
    particularBenefitAsset!: InputParticularBenefitAssetDto;
    realEstateAsset!: InputRealEstateAssetDto;
    waqfId!: string | undefined;
    id!: string | undefined;

    constructor(data?: IInputAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetTypeId = _data["assetTypeId"];
            this.assetSizeId = _data["assetSizeId"];
            this.assetApproximatelyAmount = _data["assetApproximatelyAmount"];
            this.requestId = _data["requestId"];
            this.animalOrAgriculturalAsset = _data["animalOrAgriculturalAsset"] ? InputAnimalOrAgriculturalAssetDto.fromJS(_data["animalOrAgriculturalAsset"]) : <any>undefined;
            this.businessEntityAsset = _data["businessEntityAsset"] ? InputBusinessEntityAssetDto.fromJS(_data["businessEntityAsset"]) : <any>undefined;
            this.fiscalAsset = _data["fiscalAsset"] ? InputFiscalAssetDto.fromJS(_data["fiscalAsset"]) : <any>undefined;
            this.intellectualPropertyAndTrademarkAsset = _data["intellectualPropertyAndTrademarkAsset"] ? InputIntellectualPropertyAndTrademarkAssetDto.fromJS(_data["intellectualPropertyAndTrademarkAsset"]) : <any>undefined;
            this.movableAsset = _data["movableAsset"] ? InputMovableAssetDto.fromJS(_data["movableAsset"]) : <any>undefined;
            this.monetaryAsset = _data["monetaryAsset"] ? InputMonetaryAssetDto.fromJS(_data["monetaryAsset"]) : <any>undefined;
            this.particularBenefitAsset = _data["particularBenefitAsset"] ? InputParticularBenefitAssetDto.fromJS(_data["particularBenefitAsset"]) : <any>undefined;
            this.realEstateAsset = _data["realEstateAsset"] ? InputRealEstateAssetDto.fromJS(_data["realEstateAsset"]) : <any>undefined;
            this.waqfId = _data["waqfId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetTypeId"] = this.assetTypeId;
        data["assetSizeId"] = this.assetSizeId;
        data["assetApproximatelyAmount"] = this.assetApproximatelyAmount;
        data["requestId"] = this.requestId;
        data["animalOrAgriculturalAsset"] = this.animalOrAgriculturalAsset ? this.animalOrAgriculturalAsset.toJSON() : <any>undefined;
        data["businessEntityAsset"] = this.businessEntityAsset ? this.businessEntityAsset.toJSON() : <any>undefined;
        data["fiscalAsset"] = this.fiscalAsset ? this.fiscalAsset.toJSON() : <any>undefined;
        data["intellectualPropertyAndTrademarkAsset"] = this.intellectualPropertyAndTrademarkAsset ? this.intellectualPropertyAndTrademarkAsset.toJSON() : <any>undefined;
        data["movableAsset"] = this.movableAsset ? this.movableAsset.toJSON() : <any>undefined;
        data["monetaryAsset"] = this.monetaryAsset ? this.monetaryAsset.toJSON() : <any>undefined;
        data["particularBenefitAsset"] = this.particularBenefitAsset ? this.particularBenefitAsset.toJSON() : <any>undefined;
        data["realEstateAsset"] = this.realEstateAsset ? this.realEstateAsset.toJSON() : <any>undefined;
        data["waqfId"] = this.waqfId;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputAssetDto {
    assetTypeId: number;
    assetSizeId: number;
    assetApproximatelyAmount: number;
    requestId: string;
    animalOrAgriculturalAsset: InputAnimalOrAgriculturalAssetDto;
    businessEntityAsset: InputBusinessEntityAssetDto;
    fiscalAsset: InputFiscalAssetDto;
    intellectualPropertyAndTrademarkAsset: InputIntellectualPropertyAndTrademarkAssetDto;
    movableAsset: InputMovableAssetDto;
    monetaryAsset: InputMonetaryAssetDto;
    particularBenefitAsset: InputParticularBenefitAssetDto;
    realEstateAsset: InputRealEstateAssetDto;
    waqfId: string | undefined;
    id: string | undefined;
}

export class InputBusinessEntityAssetDto implements IInputBusinessEntityAssetDto {
    businessEntityName!: string;
    assetSubTypeId!: number;
    regionId!: number;
    cityId!: number;
    longitude!: number;
    latitude!: number;
    registrationDocumentNumber!: number;
    waqfResponserPortion!: number | undefined;
    waqfPercentageFromAsset!: number | undefined;
    commercialRegisterAttachmentId!: string;
    id!: string;

    constructor(data?: IInputBusinessEntityAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.businessEntityName = _data["businessEntityName"];
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.registrationDocumentNumber = _data["registrationDocumentNumber"];
            this.waqfResponserPortion = _data["waqfResponserPortion"];
            this.waqfPercentageFromAsset = _data["waqfPercentageFromAsset"];
            this.commercialRegisterAttachmentId = _data["commercialRegisterAttachmentId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputBusinessEntityAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputBusinessEntityAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessEntityName"] = this.businessEntityName;
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["registrationDocumentNumber"] = this.registrationDocumentNumber;
        data["waqfResponserPortion"] = this.waqfResponserPortion;
        data["waqfPercentageFromAsset"] = this.waqfPercentageFromAsset;
        data["commercialRegisterAttachmentId"] = this.commercialRegisterAttachmentId;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputBusinessEntityAssetDto {
    businessEntityName: string;
    assetSubTypeId: number;
    regionId: number;
    cityId: number;
    longitude: number;
    latitude: number;
    registrationDocumentNumber: number;
    waqfResponserPortion: number | undefined;
    waqfPercentageFromAsset: number | undefined;
    commercialRegisterAttachmentId: string;
    id: string;
}

export class InputFileDto implements IInputFileDto {
    entityName!: string | undefined;
    id!: string | undefined;
    filters!: FileExtraData[] | undefined;

    constructor(data?: IInputFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.entityName = _data["entityName"];
            this.id = _data["id"];
            if (Array.isArray(_data["filters"])) {
                this.filters = [] as any;
                for (let item of _data["filters"])
                    this.filters!.push(FileExtraData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InputFileDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityName"] = this.entityName;
        data["id"] = this.id;
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInputFileDto {
    entityName: string | undefined;
    id: string | undefined;
    filters: FileExtraData[] | undefined;
}

export class InputFiscalAssetDto implements IInputFiscalAssetDto {
    assetSubTypeId!: number;
    investmentPortfolioNumber!: number;
    numberOfShare!: number;
    currentAssetValue!: number;
    fiscalAssetAttachementId!: string;
    id!: string;

    constructor(data?: IInputFiscalAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.investmentPortfolioNumber = _data["investmentPortfolioNumber"];
            this.numberOfShare = _data["numberOfShare"];
            this.currentAssetValue = _data["currentAssetValue"];
            this.fiscalAssetAttachementId = _data["fiscalAssetAttachementId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputFiscalAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputFiscalAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["investmentPortfolioNumber"] = this.investmentPortfolioNumber;
        data["numberOfShare"] = this.numberOfShare;
        data["currentAssetValue"] = this.currentAssetValue;
        data["fiscalAssetAttachementId"] = this.fiscalAssetAttachementId;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputFiscalAssetDto {
    assetSubTypeId: number;
    investmentPortfolioNumber: number;
    numberOfShare: number;
    currentAssetValue: number;
    fiscalAssetAttachementId: string;
    id: string;
}

export class InputIntellectualPropertyAndTrademarkAssetDto implements IInputIntellectualPropertyAndTrademarkAssetDto {
    ipatType!: string;
    ipatDescription!: string | undefined;
    ipatValue!: number | undefined;
    isDirectedBenefit!: boolean;
    id!: string;

    constructor(data?: IInputIntellectualPropertyAndTrademarkAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ipatType = _data["ipatType"];
            this.ipatDescription = _data["ipatDescription"];
            this.ipatValue = _data["ipatValue"];
            this.isDirectedBenefit = _data["isDirectedBenefit"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputIntellectualPropertyAndTrademarkAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputIntellectualPropertyAndTrademarkAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ipatType"] = this.ipatType;
        data["ipatDescription"] = this.ipatDescription;
        data["ipatValue"] = this.ipatValue;
        data["isDirectedBenefit"] = this.isDirectedBenefit;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputIntellectualPropertyAndTrademarkAssetDto {
    ipatType: string;
    ipatDescription: string | undefined;
    ipatValue: number | undefined;
    isDirectedBenefit: boolean;
    id: string;
}

export class InputLookUpDto implements IInputLookUpDto {
    lookUpName!: string | undefined;
    id!: number;
    filters!: LookupExtraData[] | undefined;

    constructor(data?: IInputLookUpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lookUpName = _data["lookUpName"];
            this.id = _data["id"];
            if (Array.isArray(_data["filters"])) {
                this.filters = [] as any;
                for (let item of _data["filters"])
                    this.filters!.push(LookupExtraData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InputLookUpDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputLookUpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lookUpName"] = this.lookUpName;
        data["id"] = this.id;
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInputLookUpDto {
    lookUpName: string | undefined;
    id: number;
    filters: LookupExtraData[] | undefined;
}

export class InputMonetaryAssetDto implements IInputMonetaryAssetDto {
    assetSubTypeId!: number;
    monetaryAssetAmount!: number;
    id!: string;

    constructor(data?: IInputMonetaryAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.monetaryAssetAmount = _data["monetaryAssetAmount"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputMonetaryAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputMonetaryAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["monetaryAssetAmount"] = this.monetaryAssetAmount;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputMonetaryAssetDto {
    assetSubTypeId: number;
    monetaryAssetAmount: number;
    id: string;
}

export class InputMovableAssetDto implements IInputMovableAssetDto {
    movableAssetType!: string;
    movableAssetDescription!: string | undefined;
    movableAssetOwnershipNumber!: number | undefined;
    movableValue!: number | undefined;
    isDirectedBenefit!: boolean;
    id!: string;

    constructor(data?: IInputMovableAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.movableAssetType = _data["movableAssetType"];
            this.movableAssetDescription = _data["movableAssetDescription"];
            this.movableAssetOwnershipNumber = _data["movableAssetOwnershipNumber"];
            this.movableValue = _data["movableValue"];
            this.isDirectedBenefit = _data["isDirectedBenefit"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputMovableAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputMovableAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["movableAssetType"] = this.movableAssetType;
        data["movableAssetDescription"] = this.movableAssetDescription;
        data["movableAssetOwnershipNumber"] = this.movableAssetOwnershipNumber;
        data["movableValue"] = this.movableValue;
        data["isDirectedBenefit"] = this.isDirectedBenefit;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputMovableAssetDto {
    movableAssetType: string;
    movableAssetDescription: string | undefined;
    movableAssetOwnershipNumber: number | undefined;
    movableValue: number | undefined;
    isDirectedBenefit: boolean;
    id: string;
}

export class InputOneAssetDto implements IInputOneAssetDto {
    requestId!: string;
    id!: string;

    constructor(data?: IInputOneAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputOneAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputOneAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputOneAssetDto {
    requestId: string;
    id: string;
}

export class InputParticularBenefitAssetDto implements IInputParticularBenefitAssetDto {
    benefitType!: string;
    benefitDescription!: string | undefined;
    benefitValue!: number | undefined;
    isDirectedBenefit!: boolean;
    id!: string;

    constructor(data?: IInputParticularBenefitAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.benefitType = _data["benefitType"];
            this.benefitDescription = _data["benefitDescription"];
            this.benefitValue = _data["benefitValue"];
            this.isDirectedBenefit = _data["isDirectedBenefit"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputParticularBenefitAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputParticularBenefitAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["benefitType"] = this.benefitType;
        data["benefitDescription"] = this.benefitDescription;
        data["benefitValue"] = this.benefitValue;
        data["isDirectedBenefit"] = this.isDirectedBenefit;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputParticularBenefitAssetDto {
    benefitType: string;
    benefitDescription: string | undefined;
    benefitValue: number | undefined;
    isDirectedBenefit: boolean;
    id: string;
}

export class InputRealEstateAssetDto implements IInputRealEstateAssetDto {
    id!: string;
    assetSubTypeId!: number;
    regionId!: number;
    cityId!: number;
    longitude!: number;
    latitude!: number;
    ownershipDeedAttachementId!: string;
    estimatedAmount!: number;

    constructor(data?: IInputRealEstateAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.regionId = _data["regionId"];
            this.cityId = _data["cityId"];
            this.longitude = _data["longitude"];
            this.latitude = _data["latitude"];
            this.ownershipDeedAttachementId = _data["ownershipDeedAttachementId"];
            this.estimatedAmount = _data["estimatedAmount"];
        }
    }

    static fromJS(data: any): InputRealEstateAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputRealEstateAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["regionId"] = this.regionId;
        data["cityId"] = this.cityId;
        data["longitude"] = this.longitude;
        data["latitude"] = this.latitude;
        data["ownershipDeedAttachementId"] = this.ownershipDeedAttachementId;
        data["estimatedAmount"] = this.estimatedAmount;
        return data;
    }
}

export interface IInputRealEstateAssetDto {
    id: string;
    assetSubTypeId: number;
    regionId: number;
    cityId: number;
    longitude: number;
    latitude: number;
    ownershipDeedAttachementId: string;
    estimatedAmount: number;
}

export class InputRemoveAssetDto implements IInputRemoveAssetDto {
    requestId!: string;
    id!: string;

    constructor(data?: IInputRemoveAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): InputRemoveAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputRemoveAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        data["id"] = this.id;
        return data;
    }
}

export interface IInputRemoveAssetDto {
    requestId: string;
    id: string;
}

export class LanguageInfo implements ILanguageInfo {
    name!: string | undefined;
    languageData!: any | undefined;

    constructor(data?: ILanguageInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.languageData = _data["languageData"];
        }
    }

    static fromJS(data: any): LanguageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["languageData"] = this.languageData;
        return data;
    }
}

export interface ILanguageInfo {
    name: string | undefined;
    languageData: any | undefined;
}

export class Localization implements ILocalization {
    languagesInfo!: LanguageInfo[] | undefined;
    currentLanguage!: LanguageInfo;

    constructor(data?: ILocalization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["languagesInfo"])) {
                this.languagesInfo = [] as any;
                for (let item of _data["languagesInfo"])
                    this.languagesInfo!.push(LanguageInfo.fromJS(item));
            }
            this.currentLanguage = _data["currentLanguage"] ? LanguageInfo.fromJS(_data["currentLanguage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Localization {
        data = typeof data === 'object' ? data : {};
        let result = new Localization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.languagesInfo)) {
            data["languagesInfo"] = [];
            for (let item of this.languagesInfo)
                data["languagesInfo"].push(item.toJSON());
        }
        data["currentLanguage"] = this.currentLanguage ? this.currentLanguage.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILocalization {
    languagesInfo: LanguageInfo[] | undefined;
    currentLanguage: LanguageInfo;
}

export class LookupDto implements ILookupDto {
    localizedKey!: string | undefined;
    isEnabled!: boolean;
    name!: string | undefined;
    hintLoclizedKey!: string | undefined;
    hint!: string | undefined;
    lookupExtraDatas!: LookupExtraData[] | undefined;
    id!: number;

    constructor(data?: ILookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.localizedKey = _data["localizedKey"];
            this.isEnabled = _data["isEnabled"];
            this.name = _data["name"];
            this.hintLoclizedKey = _data["hintLoclizedKey"];
            this.hint = _data["hint"];
            if (Array.isArray(_data["lookupExtraDatas"])) {
                this.lookupExtraDatas = [] as any;
                for (let item of _data["lookupExtraDatas"])
                    this.lookupExtraDatas!.push(LookupExtraData.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): LookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new LookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localizedKey"] = this.localizedKey;
        data["isEnabled"] = this.isEnabled;
        data["name"] = this.name;
        data["hintLoclizedKey"] = this.hintLoclizedKey;
        data["hint"] = this.hint;
        if (Array.isArray(this.lookupExtraDatas)) {
            data["lookupExtraDatas"] = [];
            for (let item of this.lookupExtraDatas)
                data["lookupExtraDatas"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data;
    }
}

export interface ILookupDto {
    localizedKey: string | undefined;
    isEnabled: boolean;
    name: string | undefined;
    hintLoclizedKey: string | undefined;
    hint: string | undefined;
    lookupExtraDatas: LookupExtraData[] | undefined;
    id: number;
}

export class LookupExtraData implements ILookupExtraData {
    dataName!: string | undefined;
    dataValue!: string | undefined;

    constructor(data?: ILookupExtraData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataName = _data["dataName"];
            this.dataValue = _data["dataValue"];
        }
    }

    static fromJS(data: any): LookupExtraData {
        data = typeof data === 'object' ? data : {};
        let result = new LookupExtraData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataName"] = this.dataName;
        data["dataValue"] = this.dataValue;
        return data;
    }
}

export interface ILookupExtraData {
    dataName: string | undefined;
    dataValue: string | undefined;
}

export class NotificationMessageDto implements INotificationMessageDto {
    userName!: string | undefined;
    subject!: string | undefined;
    body!: string | undefined;
    provider!: string | undefined;
    referenceNumber!: string | undefined;
    errorType!: string | undefined;
    errorCode!: string | undefined;
    errorMessage!: string | undefined;
    reTryCounter!: number | undefined;
    machineName!: string | undefined;
    isSent!: boolean | undefined;
    sentDatetime!: DateTime | undefined;
    parameters!: TemplateParameter[] | undefined;
    notificationTemplateId!: number;
    id!: string;

    constructor(data?: INotificationMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.subject = _data["subject"];
            this.body = _data["body"];
            this.provider = _data["provider"];
            this.referenceNumber = _data["referenceNumber"];
            this.errorType = _data["errorType"];
            this.errorCode = _data["errorCode"];
            this.errorMessage = _data["errorMessage"];
            this.reTryCounter = _data["reTryCounter"];
            this.machineName = _data["machineName"];
            this.isSent = _data["isSent"];
            this.sentDatetime = _data["sentDatetime"] ? DateTime.fromISO(_data["sentDatetime"].toString()) : <any>undefined;
            if (Array.isArray(_data["parameters"])) {
                this.parameters = [] as any;
                for (let item of _data["parameters"])
                    this.parameters!.push(TemplateParameter.fromJS(item));
            }
            this.notificationTemplateId = _data["notificationTemplateId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): NotificationMessageDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationMessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["subject"] = this.subject;
        data["body"] = this.body;
        data["provider"] = this.provider;
        data["referenceNumber"] = this.referenceNumber;
        data["errorType"] = this.errorType;
        data["errorCode"] = this.errorCode;
        data["errorMessage"] = this.errorMessage;
        data["reTryCounter"] = this.reTryCounter;
        data["machineName"] = this.machineName;
        data["isSent"] = this.isSent;
        data["sentDatetime"] = this.sentDatetime ? this.sentDatetime.toString() : <any>undefined;
        if (Array.isArray(this.parameters)) {
            data["parameters"] = [];
            for (let item of this.parameters)
                data["parameters"].push(item.toJSON());
        }
        data["notificationTemplateId"] = this.notificationTemplateId;
        data["id"] = this.id;
        return data;
    }
}

export interface INotificationMessageDto {
    userName: string | undefined;
    subject: string | undefined;
    body: string | undefined;
    provider: string | undefined;
    referenceNumber: string | undefined;
    errorType: string | undefined;
    errorCode: string | undefined;
    errorMessage: string | undefined;
    reTryCounter: number | undefined;
    machineName: string | undefined;
    isSent: boolean | undefined;
    sentDatetime: DateTime | undefined;
    parameters: TemplateParameter[] | undefined;
    notificationTemplateId: number;
    id: string;
}

export class OutputAssetDto implements IOutputAssetDto {
    endowmentId!: string | undefined;
    assetTypeId!: number | undefined;
    assetSubTypeId!: number | undefined;
    assetSizeId!: number | undefined;
    assetApproximatelyAmount!: number | undefined;
    assetSubTypeDescription!: string | undefined;
    assetDescription!: string | undefined;
    assetDeedNumber!: string | undefined;
    assetIssuanceCourt!: string | undefined;
    assetDeedDate!: DateTime | undefined;
    assetDeedDateHijri!: string | undefined;
    requestId!: string | undefined;
    animalOrAgriculturalAsset!: InputAnimalOrAgriculturalAssetDto;
    businessEntityAsset!: InputBusinessEntityAssetDto;
    fiscalAsset!: InputFiscalAssetDto;
    intellectualPropertyAndTrademarkAsset!: InputIntellectualPropertyAndTrademarkAssetDto;
    movableAsset!: InputMovableAssetDto;
    monetaryAsset!: InputMonetaryAssetDto;
    particularBenefitAsset!: InputParticularBenefitAssetDto;
    realEstateAsset!: InputRealEstateAssetDto;
    id!: string | undefined;

    constructor(data?: IOutputAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.endowmentId = _data["endowmentId"];
            this.assetTypeId = _data["assetTypeId"];
            this.assetSubTypeId = _data["assetSubTypeId"];
            this.assetSizeId = _data["assetSizeId"];
            this.assetApproximatelyAmount = _data["assetApproximatelyAmount"];
            this.assetSubTypeDescription = _data["assetSubTypeDescription"];
            this.assetDescription = _data["assetDescription"];
            this.assetDeedNumber = _data["assetDeedNumber"];
            this.assetIssuanceCourt = _data["assetIssuanceCourt"];
            this.assetDeedDate = _data["assetDeedDate"] ? DateTime.fromISO(_data["assetDeedDate"].toString()) : <any>undefined;
            this.assetDeedDateHijri = _data["assetDeedDateHijri"];
            this.requestId = _data["requestId"];
            this.animalOrAgriculturalAsset = _data["animalOrAgriculturalAsset"] ? InputAnimalOrAgriculturalAssetDto.fromJS(_data["animalOrAgriculturalAsset"]) : <any>undefined;
            this.businessEntityAsset = _data["businessEntityAsset"] ? InputBusinessEntityAssetDto.fromJS(_data["businessEntityAsset"]) : <any>undefined;
            this.fiscalAsset = _data["fiscalAsset"] ? InputFiscalAssetDto.fromJS(_data["fiscalAsset"]) : <any>undefined;
            this.intellectualPropertyAndTrademarkAsset = _data["intellectualPropertyAndTrademarkAsset"] ? InputIntellectualPropertyAndTrademarkAssetDto.fromJS(_data["intellectualPropertyAndTrademarkAsset"]) : <any>undefined;
            this.movableAsset = _data["movableAsset"] ? InputMovableAssetDto.fromJS(_data["movableAsset"]) : <any>undefined;
            this.monetaryAsset = _data["monetaryAsset"] ? InputMonetaryAssetDto.fromJS(_data["monetaryAsset"]) : <any>undefined;
            this.particularBenefitAsset = _data["particularBenefitAsset"] ? InputParticularBenefitAssetDto.fromJS(_data["particularBenefitAsset"]) : <any>undefined;
            this.realEstateAsset = _data["realEstateAsset"] ? InputRealEstateAssetDto.fromJS(_data["realEstateAsset"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): OutputAssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputAssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endowmentId"] = this.endowmentId;
        data["assetTypeId"] = this.assetTypeId;
        data["assetSubTypeId"] = this.assetSubTypeId;
        data["assetSizeId"] = this.assetSizeId;
        data["assetApproximatelyAmount"] = this.assetApproximatelyAmount;
        data["assetSubTypeDescription"] = this.assetSubTypeDescription;
        data["assetDescription"] = this.assetDescription;
        data["assetDeedNumber"] = this.assetDeedNumber;
        data["assetIssuanceCourt"] = this.assetIssuanceCourt;
        data["assetDeedDate"] = this.assetDeedDate ? this.assetDeedDate.toString() : <any>undefined;
        data["assetDeedDateHijri"] = this.assetDeedDateHijri;
        data["requestId"] = this.requestId;
        data["animalOrAgriculturalAsset"] = this.animalOrAgriculturalAsset ? this.animalOrAgriculturalAsset.toJSON() : <any>undefined;
        data["businessEntityAsset"] = this.businessEntityAsset ? this.businessEntityAsset.toJSON() : <any>undefined;
        data["fiscalAsset"] = this.fiscalAsset ? this.fiscalAsset.toJSON() : <any>undefined;
        data["intellectualPropertyAndTrademarkAsset"] = this.intellectualPropertyAndTrademarkAsset ? this.intellectualPropertyAndTrademarkAsset.toJSON() : <any>undefined;
        data["movableAsset"] = this.movableAsset ? this.movableAsset.toJSON() : <any>undefined;
        data["monetaryAsset"] = this.monetaryAsset ? this.monetaryAsset.toJSON() : <any>undefined;
        data["particularBenefitAsset"] = this.particularBenefitAsset ? this.particularBenefitAsset.toJSON() : <any>undefined;
        data["realEstateAsset"] = this.realEstateAsset ? this.realEstateAsset.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IOutputAssetDto {
    endowmentId: string | undefined;
    assetTypeId: number | undefined;
    assetSubTypeId: number | undefined;
    assetSizeId: number | undefined;
    assetApproximatelyAmount: number | undefined;
    assetSubTypeDescription: string | undefined;
    assetDescription: string | undefined;
    assetDeedNumber: string | undefined;
    assetIssuanceCourt: string | undefined;
    assetDeedDate: DateTime | undefined;
    assetDeedDateHijri: string | undefined;
    requestId: string | undefined;
    animalOrAgriculturalAsset: InputAnimalOrAgriculturalAssetDto;
    businessEntityAsset: InputBusinessEntityAssetDto;
    fiscalAsset: InputFiscalAssetDto;
    intellectualPropertyAndTrademarkAsset: InputIntellectualPropertyAndTrademarkAssetDto;
    movableAsset: InputMovableAssetDto;
    monetaryAsset: InputMonetaryAssetDto;
    particularBenefitAsset: InputParticularBenefitAssetDto;
    realEstateAsset: InputRealEstateAssetDto;
    id: string | undefined;
}

export class OutputFileDto implements IOutputFileDto {
    id!: string;
    fileData!: string | undefined;
    fileName!: string | undefined;
    size!: number;
    contentType!: string | undefined;
    extraDatas!: FileExtraData[] | undefined;

    constructor(data?: IOutputFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fileData = _data["fileData"];
            this.fileName = _data["fileName"];
            this.size = _data["size"];
            this.contentType = _data["contentType"];
            if (Array.isArray(_data["extraDatas"])) {
                this.extraDatas = [] as any;
                for (let item of _data["extraDatas"])
                    this.extraDatas!.push(FileExtraData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OutputFileDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fileData"] = this.fileData;
        data["fileName"] = this.fileName;
        data["size"] = this.size;
        data["contentType"] = this.contentType;
        if (Array.isArray(this.extraDatas)) {
            data["extraDatas"] = [];
            for (let item of this.extraDatas)
                data["extraDatas"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOutputFileDto {
    id: string;
    fileData: string | undefined;
    fileName: string | undefined;
    size: number;
    contentType: string | undefined;
    extraDatas: FileExtraData[] | undefined;
}

export class PagedResultDtoOfLookupDto implements IPagedResultDtoOfLookupDto {
    totalCount!: number;
    items!: LookupDto[] | undefined;

    constructor(data?: IPagedResultDtoOfLookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LookupDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfLookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfLookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedResultDtoOfLookupDto {
    totalCount: number;
    items: LookupDto[] | undefined;
}

export class RequestDto implements IRequestDto {
    id!: string;

    constructor(data?: IRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IRequestDto {
    id: string;
}

export class SentNotificationMessagesDto implements ISentNotificationMessagesDto {
    notificationMessageDtos!: NotificationMessageDto[] | undefined;
    id!: string;

    constructor(data?: ISentNotificationMessagesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["notificationMessageDtos"])) {
                this.notificationMessageDtos = [] as any;
                for (let item of _data["notificationMessageDtos"])
                    this.notificationMessageDtos!.push(NotificationMessageDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): SentNotificationMessagesDto {
        data = typeof data === 'object' ? data : {};
        let result = new SentNotificationMessagesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.notificationMessageDtos)) {
            data["notificationMessageDtos"] = [];
            for (let item of this.notificationMessageDtos)
                data["notificationMessageDtos"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data;
    }
}

export interface ISentNotificationMessagesDto {
    notificationMessageDtos: NotificationMessageDto[] | undefined;
    id: string;
}

export class Setting implements ISetting {
    appSettings!: string | undefined;

    constructor(data?: ISetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appSettings = _data["appSettings"];
        }
    }

    static fromJS(data: any): Setting {
        data = typeof data === 'object' ? data : {};
        let result = new Setting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appSettings"] = this.appSettings;
        return data;
    }
}

export interface ISetting {
    appSettings: string | undefined;
}

export class TemplateParameter implements ITemplateParameter {
    key!: string | undefined;
    value!: any | undefined;

    constructor(data?: ITemplateParameter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): TemplateParameter {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateParameter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface ITemplateParameter {
    key: string | undefined;
    value: any | undefined;
}

export enum UserGender {
    Male = 0,
    Female = 1,
    None = -1,
}

export class ValidationResultDetails implements IValidationResultDetails {
    errorCode!: string | undefined;
    errorMessage!: string | undefined;

    constructor(data?: IValidationResultDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.errorCode = _data["errorCode"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ValidationResultDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationResultDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["errorCode"] = this.errorCode;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IValidationResultDetails {
    errorCode: string | undefined;
    errorMessage: string | undefined;
}

export class ValidationResultMessage implements IValidationResultMessage {
    propertyName!: string | undefined;
    validationResultDetails!: ValidationResultDetails[] | undefined;

    constructor(data?: IValidationResultMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            if (Array.isArray(_data["validationResultDetails"])) {
                this.validationResultDetails = [] as any;
                for (let item of _data["validationResultDetails"])
                    this.validationResultDetails!.push(ValidationResultDetails.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ValidationResultMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationResultMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        if (Array.isArray(this.validationResultDetails)) {
            data["validationResultDetails"] = [];
            for (let item of this.validationResultDetails)
                data["validationResultDetails"].push(item.toJSON());
        }
        return data;
    }
}

export interface IValidationResultMessage {
    propertyName: string | undefined;
    validationResultDetails: ValidationResultDetails[] | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date!: DateTime;
    temperatureC!: number;
    readonly temperatureF!: number;
    summary!: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? DateTime.fromISO(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date: DateTime;
    temperatureC: number;
    temperatureF: number;
    summary: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}